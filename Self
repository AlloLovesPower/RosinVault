{
  "name": "rosinvault",
  "description": "just a the websites",
  "version": "1.0.0",
  "main": "server/server.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon server/server.js",
    "format": "npx prettier --write **/*.{js,md}",
    "format:check": "npx prettier --check **/*.{js,md}",
    "lint": "npx eslint server/*.js --env=node && npx eslint client/*.js --env=browser"
  },
  "engines": {
    "node": "14.x"
  },
  "license": "Apache-2.0",
  "dependencies": {
    "dotenv": "^16.3.1",
    "ejs": "^3.1.9",
    "express": "^4.18.2",
    "node-fetch": "^3.3.2",
    "node-schedule": "^2.1.1",
    "cors": "^2.8.5",
    "express-fileupload": "^1.5.0",
"express-rate-limit": "^7.3.1",
"cookie": "^0.6.0",
"jsonwebtoken": "^9.0.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
%%%%%%let Celestia = {}  //most important part the summoning of Celestia

let siartanilo = "RosinVault"

import express from "express"
import cors from "cors"
import fetch from "node-fetch"
import "dotenv/config"
import fileUpload from "express-fileupload"
import rateLimit from "express-rate-limit"
import cookie from "cookie"
import zog from "crypto"
import schedule from "node-schedule"
import fs from "fs"
import jwt from "jsonwebtoken"
const PORT = 3000

const app = express()



Celestia.legalizeName = function(hem){
let hemb = hem.replace(/[^a-z0-9]/gi, '')
return hemb
}.bind(this)

Celestia.fate = function(hem){
  let hema = Math.floor(Math.random()*hem)
  return hema
}


Celestia.melosia = async function(hemsia,eshe){
let answer = ""
  await fs.readdir(hemsia, (err, files) => {
if(files != undefined && files.length > 0){
let filess = files.join(",")
    eshe(filess)
}else{eshe("")}  
})
  return
}




Celestia.seall = async function(hemaera,hemsiar,eshe){  
    return fs.writeFile(hemsiar, hemaera, function(err) {
    if(err) {
        return console.log(err)
    }
      if(eshe != undefined){eshe()}
})  
}


Celestia.sensia = async function(aera,sia){
let w = await Celestia.melosia(sia,async function(hem){
    let ww = hem.split(",")
let an = ww.length
if(ww==""){an=0}
let re = an.toString()
await Celestia.seall(aera,sia+"/"+re)
})
}

Celestia.lseall = async function(hemsiar,eshe){
  let ver = 'utf8'
let v = fs.readFile(hemsiar, ver, function(hmm,aera){
let mmm =""
if(!hmm){mmm=aera}
eshe(mmm)
})
}




Celestia.korsiar = function(hembenlo,hemsiar,eshe){
    fs.copyFile(hembenlo, hemsiar, function(err) {
    if(err) {
        return console.log(err)
    }
if(eshe != undefined){eshe()}
})
}


Celestia.korsia = function(hembenlo,hemsia,eshe){
    fs.cp(hembenlo, hemsia, function(err) {
    if(err) {
        return console.log(err)
    }
if(eshe != undefined){eshe()}
})
}




Celestia.rasiar = async function(hemsiar,eshe){
    fs.access(hemsiar,fs.constants.F_OK, function(err) {
    if(err){
        if(eshe != undefined){eshe("l")}
    }else{
if(eshe != undefined){eshe("o")}
}

})
}



Celestia.rasia = async function(hemsiar,eshe){
    fs.access(hemsiar,fs.constants.F_OK, function(err) {
    if(err){
        if(eshe != undefined){eshe("l")}
    }else{
if(eshe != undefined){eshe("o")}
}

})
}


Celestia.maasia = async function(hemsia,eshe){
  fs.mkdir(hemsia, { recursive: true },function(err) {
    if(err) {
        return console.log(err)
    }
if(eshe != undefined){eshe()}
})
}




Celestia.kortani = function(hemben,hemboda){
      fs.rename(hemben, hemboda, function(err) {
    if(err) {
        return console.log(err);
    }
})
}



Celestia.meh = function(hemsia,eshe){
  fs.rm(hemsia, { recursive: true },function() {
if(eshe != undefined){eshe()}
})
}



function getAdmins(hem){
if(hem == "Allo" || hem == "test" || hem == "Keanen"){
return "o"
}else{
return "l"
}
}









































function generateAccessToken(username){
return jwt.sign(username,process.env.TokenSecret)
}


app.set("view engine", "ejs")
app.set("views", "./views")

if(siartanilo == "BeautifulPeople2"){
app.use(cors({origin:/perchance\.org$/}))
}

app.use(express.static("jss"))

app.use(fileUpload())
app.use(express.json())


app.get("/edit", async (req, res) => {
  let data = {}
    res.render("edit")
})

app.get("/home", async (req, res) => {
  let data = {}
    res.render("home")
})

app.get("/gamble", async (req, res) => {
  let data = {}
    res.render("gamble")
})

app.get("/gallery", async (req, res) => {
  let data = {}
    res.render("gallery")
})

app.get("/vault", async (req, res) => {
  let data = {}
    res.render("vault")
})

app.get("/leaderboard", async (req, res) => {
  let data = {}
    res.render("leaderboard")
})

app.get("/growwithus", async (req, res) => {
  let data = {}
    res.render("growwithus")
})

app.get("/alchemy", async (req, res) => {
  let data = {}
    res.render("alchemy")
})

app.get("/refer", async (req, res) => {
  let data = {}
    res.render("refer")
})

app.get("/", async (req, res) => {
  let data = {}
    res.render("home")
})












Celestia.maasia("jss")

app.post('/upload', function(request, res) {
if(request.headers.cookie != undefined && request.headers.cookie != null && request.headers.cookie.indexOf("token=") != -1){
let cc = request.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
let isk = getAdmins(user)
if(isk == "o"){
let sampleFile
  let uploadPath
  if (!request.files || Object.keys(request.files).length === 0) {
    return res.send('No files were uploaded.');
  }
  // The name of the input field (i.e. "sampleFile") is used to retrieve the uploaded file
  sampleFile = request.files.sampleFile;
  uploadPath = "jss/Self"
  // Use the mv() method to place the file somewhere on your server
  sampleFile.mv(uploadPath, function(err) {
    if (err)
      return res.send(err)
     unzip()
    res.send('File uploaded!')
  })
}else{
data.signedIn = "l"
res.send(data)
}
  }else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})



async function unzip() { 
  await Celestia.lseall("jss/Self",async function(hem){
let vLae = hem.split("%%%"+"%%%")
  await Celestia.seall(vLae[0],"package.json")
  await Celestia.seall(vLae[1],"server/server.js")
  let filenames = vLae[2].split("&&&"+"&&&")  
  let filetxts = vLae[3].split("&&&"+"&&&")
  for(let i = 0; i < filenames.length; i++){
await Celestia.seall(filetxts[i],"views/"+filenames[i]+".ejs")
}
let updatelog = vLae[4]
await Celestia.seall(updatelog,"updatelog.txt")
})  
}



app.post('/upload2', function(request, res) {
if(request.headers.cookie != undefined && request.headers.cookie != null && request.headers.cookie.indexOf("token=") != -1){
let cc = request.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
let isk = getAdmins(user)
if(isk == "o"){
let sampleFile
  let uploadPath
  if (!request.files || Object.keys(request.files).length === 0) {
    return res.send('No files were uploaded.')
  }
  // The name of the input field (i.e. "sampleFile") is used to retrieve the uploaded file
  sampleFile = request.files.sampleFile;
  uploadPath = "jss/three.min.js"
  // Use the mv() method to place the file somewhere on your server
  sampleFile.mv(uploadPath, function(err) {
    if (err)
      return res.send(err)
    res.send('File uploaded!')
    })
}else{
data.signedIn = "l"
res.send(data)
}
  }else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})






app.post('/upload3', function(request, res) {
if(request.headers.cookie != undefined && request.headers.cookie != null && request.headers.cookie.indexOf("token=") != -1){
let cc = request.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
let isk = getAdmins(user)
if(isk == "o"){
let sampleFile
  let uploadPath
  if (!request.files || Object.keys(request.files).length === 0) {
    return res.send('No files were uploaded.')
  }
  // The name of the input field (i.e. "sampleFile") is used to retrieve the uploaded file
  sampleFile = request.files.sampleFile;
  uploadPath = "jss/GLTFLoader.js"
  // Use the mv() method to place the file somewhere on your server
  sampleFile.mv(uploadPath, function(err) {
    if (err)
      return res.send(err)
    res.send('File uploaded!')
  })
}else{
data.signedIn = "l"
res.send(data)
}
  }else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})
















































Celestia.maasia("entries")

app.post("/getEntries", async (req, res) => {
  let data = {}
  await Celestia.melosia("entries",function(hem){
    data.entries = hem
    res.send(data)})  
})

app.post("/loadEntry", async (request, res) => {
  let data = {}
  await Celestia.lseall("entries/"+request.body.entrylocation, async function(hem){
data.entry = hem; res.send(data)})
})

app.post("/getUpdates", async (req, res) => {
  let data = {}
  await Celestia.lseall("updatelog.txt", async function(hem){data.entries = hem; res.send(data)})
})

app.post("/saveEntry", async (request, res) => {
  let data = {}
if(request.headers.cookie != undefined && request.headers.cookie != null && request.headers.cookie.indexOf("token=") != -1){
let cc = request.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
let isk = getAdmins(user)
if(isk == "o"){
  await Celestia.seall(request.body.fullstring,request.body.entrylocation)
await Celestia.maasia("a"+request.body.entrylocation+"comments", async function(){
await Celestia.seall("","a"+request.body.entrylocation+"comments/commentstats")
await Celestia.maasia("a"+request.body.entrylocation+"comments/commentq")
})
  } 
data.signedIn = "o"
data.name = user
res.send(data)
}else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})























app.post("/askToComment", async (request, res) => {
console.log(request.headers.cookie)
let cc = request.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
let data = {}
await Celestia.melosia("aentries/"+request.body.which+"comments/commentq",async function(hem){   
if(hem == ""){await Celestia.seall(request.body.when +"~*^°^*~"+request.body.aera,"aentries/"+request.body.which+"comments/commentq/"+"0") }else{
let entre = hem.split(",")
await Celestia.seall(request.body.when +"~*^°^*~"+request.body.name+"~*^°^*~"+request.body.aera,"aentries/"+request.body.which+"comments/commentq/"+entre.length) }
    res.send(data)})
}
})
})
















Celestia.maasia("questionhistory")
Celestia.maasia("questions", async function(){
Celestia.maasia("questions/votes", async function(){
Celestia.maasia("questions/votes/0")
Celestia.maasia("questions/votes/1")
Celestia.maasia("questions/votes/2")
Celestia.maasia("questions/votes/3")
Celestia.maasia("questions/votes/4")
Celestia.maasia("questions/votes/5")
Celestia.maasia("questions/votes/6")
Celestia.maasia("questions/votes/7")
Celestia.maasia("questions/votes/8")
Celestia.maasia("questions/votes/9")
})
})




app.post("/getMyDailyQuestions", async (request, res) => {
  let data = {}

if(request.headers.cookie != undefined && request.headers.cookie != null && request.headers.cookie.indexOf("token=") != -1){
let cc = request.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
console.log(err)
console.log(user)

if(user != undefined){
data.signedIn = "o"
data.name = user

await Celestia.melosia("questions/votes/9", async function(hem){
let zarfnog = hem.split(",")
for(let c=0;c<zarfnog.length;c++){
if(user == zarfnog[c]){
data.question9up = "l"
}else{data.question9up="o"}
}
await Celestia.melosia("questions/votes/8", async function(hem){
let zarfnog = hem.split(",")
for(let c=0;c<zarfnog.length;c++){
if(user == zarfnog[c]){
data.question8up = "l"
}else{data.question8up="o"}
}

await Celestia.melosia("questions/votes/7", async function(hem){
let zarfnog = hem.split(",")
for(let c=0;c<zarfnog.length;c++){
if(user == zarfnog[c]){
data.question7up = "l"
}else{data.question7up="o"}
}
await Celestia.melosia("questions/votes/6", async function(hem){
let zarfnog = hem.split(",")
for(let c=0;c<zarfnog.length;c++){
if(user == zarfnog[c]){
data.question6up = "l"
}else{data.question6up="o"}
}
await Celestia.melosia("questions/votes/5", async function(hem){
let zarfnog = hem.split(",")
for(let c=0;c<zarfnog.length;c++){
if(user == zarfnog[c]){
data.question5up = "l"
}else{data.question5up="o"}
}
await Celestia.melosia("questions/votes/4", async function(hem){
let zarfnog = hem.split(",")
for(let c=0;c<zarfnog.length;c++){
if(user == zarfnog[c]){
data.question4up = "l"
}else{data.question4up="o"}
}
await Celestia.melosia("questions/votes/3", async function(hem){
let zarfnog = hem.split(",")
for(let c=0;c<zarfnog.length;c++){
if(user == zarfnog[c]){
data.question3up = "l"
}else{data.question3up="o"}
}
await Celestia.melosia("questions/votes/2", async function(hem){
let zarfnog = hem.split(",")
for(let c=0;c<zarfnog.length;c++){
if(user == zarfnog[c]){
data.question2up = "l"
}else{data.question2up="o"}
}
await Celestia.melosia("questions/votes/1", async function(hem){
let zarfnog = hem.split(",")
for(let c=0;c<zarfnog.length;c++){
if(user == zarfnog[c]){
data.question1up = "l"
}else{data.question1up="o"}
}
await Celestia.melosia("questions/votes/0", async function(hem){
let zarfnog = hem.split(",")
for(let c=0;c<zarfnog.length;c++){
if(user == zarfnog[c]){
data.question0up = "l"
}else{data.question0up="o"}
}

data.q1 = ""
data.q2 = ""
data.q1aera = ""
data.q2aera = ""

if(data.question8up == "o" || data.question9up == "o"){
data.q1 = "8"
data.q2 = "9"
}

if(data.question6up == "o" || data.question7up == "o"){
data.q1 = "6"
data.q2 = "7"
}

if(data.question4up == "o" || data.question5up == "o"){
data.q1 = "4"
data.q2 = "5"
}

if(data.question2up == "o" || data.question3up == "o"){
data.q1 = "2"
data.q2 = "3"
}

if(data.question0up == "o" || data.question1up == "o"){
data.q1 = "0"
data.q2 = "1"
}

let kh = "question"+data.q1+"up"
let khh = "question"+data.q2+"up"

await Celestia.lseall("questions/"+data.q1, async function(hhaera){
if(data[kh]=="o"){data.q1aera = hhaera}
await Celestia.lseall("questions/"+data.q2, async function(hhhaera){
if(data[khh]=="o"){data.q2aera = hhhaera}
res.send(data)
})
})

})
})
})
})
})
})
})
})
})
})
}else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})







app.post("/getQuestion", async (request, res) => {
  let data = {}
if(request.headers.cookie != undefined && request.headers.cookie != null && request.headers.cookie.indexOf("token=") != -1){
let cc = request.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
data.signedIn = "o"
data.name = user
let isk = getAdmins(user)
if(isk == "o"){
await Celestia.lseall("questions/"+request.body.sen, async function(hem){
data.question = hem; res.send(data)})
}else{
data.signedIn = "l" 
res.send(data)
}
}else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})







app.post("/maaQuestion", async (request, res) => {
  let data = {}
if(request.headers.cookie != undefined && request.headers.cookie != null && request.headers.cookie.indexOf("token=") != -1){
let cc = request.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
data.signedIn = "o"
data.name = user
let isk = getAdmins(user)
if(isk == "o"){
await Celestia.seall(request.body.haera,"questions/"+request.body.questionsen,function(){
res.send(data)
})
}else{
res.send(data)
}
}else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})








app.post("/resolveQuestion", async (request, res) => {
  let data = {}
if(request.headers.cookie != undefined && request.headers.cookie != null && request.headers.cookie.indexOf("token=") != -1){
let cc = request.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
data.signedIn = "o"
data.name = user
let isk = getAdmins(user)
if(isk == "o"){
//request.body.whowon
//compilerewardguesses
//await Celestia.lseall("questions/"+request.body.questionsen)
//compile
//save
Celestia.melosia("questions/votes/"+request.body.questionsen,function(hem){
let vwho = hem.split(",")
for(let c=0;c<vwho.length;c++){
Celestia.lseall("questions/votes/"+request.body.questionsen+"/"+vwho[c],async function(hemb){
let hema = hemb.split("&&&")
if(hema[0]==request.body.whowon){
await Celestia.lseall("people/"+user+"/coinamount", async function(amt){
let na = parseInt(amt)+(parseInt(hema[1])*2)
data.amount = na.toString()
await Celestia.seall(data.amount, "people/"+user+"/coinamount", async function(){
Celestia.meh("questions/votes/"+request.body.questionsen+"/"+user)
})
})
}else{
Celestia.meh("questions/votes/"+request.body.questionsen+"/"+user)
}
})
}
})
Celestia.meh("questions/"+request.body.questionsen,function(){
res.send(data)
})
}else{
res.send(data)
}
}else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})









//check if they rlly have that much
//pay
//refresh money

app.post("/gambleAnswerQuestion", async (hem, res) => {
  let data = {}
if(hem.headers.cookie != undefined && hem.headers.cookie != null && hem.headers.cookie.indexOf("token=") != -1){
let cc = hem.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined && hem.body.answer.indexOf("&&&") == -1){
await Celestia.lseall("people/"+user+"/coinamount", async function(amt){
if(parseInt(amt)>parseInt(hem.body.amount)){
let na = parseInt(amt)-(parseInt(hem.body.amount))
await Celestia.seall(na.toString(), "people/"+user+"/coinamount", async function(){
await Celestia.seall(hem.body.answer+"&&&"+hem.body.amount, "questions/votes/"+hem.body.questionsen+"/"+user,function(){
data.answered = "o"
data.signedIn = "o"
data.name = user
res.send(data)
})
})
}else{res.send(data)}
})
}else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})







































app.post("/getMoney", async (hem, res) => {
  let data = {}
if(hem.headers.cookie != undefined && hem.headers.cookie != null && hem.headers.cookie.indexOf("token=") != -1){
let cc = hem.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
data.signedIn = "o"
data.name = user
await Celestia.lseall("people/"+user+"/coinamount", async function(hemm){
data.money = hemm
res.send(data)
})
}else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})








app.post("/getTimeAndCollects", async (hem, res) => {
  let data = {}
if(hem.headers.cookie != undefined && hem.headers.cookie != null && hem.headers.cookie.indexOf("token=") != -1){
let cc = hem.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
data.signedIn = "o"
data.name = user
await Celestia.lseall("people/"+user+"/whencheck", async function(j){
data.timesofar = j
res.send(data)
})
}else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})





app.post("/timebarCollect", async (hem, res) => {
  let data = {}
if(hem.headers.cookie != undefined && hem.headers.cookie != null && hem.headers.cookie.indexOf("token=") != -1){
let cc = hem.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
data.signedIn = "o"
data.name = user
await Celestia.lseall("people/"+user+"/whencheck", async function(d){
data.timesofar = d
let time = parseInt(data.timesofar)
let now = Date.now()
let amountCollected = 0
if(((((now-time)/1000)/60)/60) > 1){
amountCollected = amountCollected + 5
if(((((now-time)/1000)/60)/60) > 2){amountCollected = amountCollected + 4}
if(((((now-time)/1000)/60)/60) > 3){amountCollected = amountCollected + 2}
if(((((now-time)/1000)/60)/60) > 6){amountCollected = amountCollected + 1}
if(((((now-time)/1000)/60)/60) > 12){amountCollected = amountCollected + 1}
await Celestia.lseall("people/"+user+"/coinamount", async function(amt){
let na = parseInt(amt)+amountCollected
data.amountCollected = amountCollected.toString()
data.amount = na.toString()
await Celestia.seall(data.amount, "people/"+user+"/coinamount")
await Celestia.seall(now.toString(), "people/"+user+"/whencheck")
res.send(data)
})
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})























app.post("/sayhi", async (req, res) => {
  let data = {}
  if(req.headers.origin != "https://rosinvault.glitch.me"){
    data.say = req.headers.origin.substring(8,req.headers.origin.indexOf("."))
    initializeOnSayHi(data.say)
  }  
  res.send(data)
})
async function initializeOnSayHi(hem){
}





























Celestia.maasia("people")

Celestia.maasia("passwords")

app.post("/signIn", async (request, reply) => {
  let data = {}
if(request.body.name != "SignIn"){
   await Celestia.rasiar("passwords/"+request.body.name, async function(hem){
if(hem=="o"){
       await Celestia.lseall("passwords/"+request.body.name, async function(hema){
if(hema==request.body.pass){
          data.name = request.body.name
         data.say = "You are Signed In."
data.token = generateAccessToken(request.body.name)
reply.setHeader("Set-Cookie",cookie.serialize("token",data.token,{httpOnly:true,maxAge: 60*60*24*7}))
         reply.send(data)
       }else{data.say = "Wrong pass."
            reply.send(data)}
    })   
     }else{
//check name and pass character legality
       await Celestia.seall(request.body.pass,"passwords/"+request.body.name)
await Celestia.maasia("people/"+request.body.name, async function(){
let whencheck = Date.now()
await Celestia.seall(whencheck.toString(),"people/"+request.body.name+"/accountcreationdate")
await Celestia.seall(whencheck.toString(),"people/"+request.body.name+"/whencheck")
await Celestia.seall("0","people/"+request.body.name+"/coinamount")

await Celestia.seall("o","people/"+request.body.name+"/earlymember")

await Celestia.seall("","people/"+request.body.name+"/referer")

await Celestia.seall("0","people/"+request.body.name+"/refercode")
await Celestia.seall("","people/"+request.body.name+"/refered")

await Celestia.seall("0","people/"+request.body.name+"/room")

await Celestia.seall("0","people/"+request.body.name+"/owned")

await Celestia.seall("0","people/"+request.body.name+"/roomcomments")

await Celestia.seall("0","people/"+request.body.name+"/questionsAvailable")
await Celestia.seall("0","people/"+request.body.name+"/questionsAnsweredToday")
await Celestia.maasia("gambleanswers/"+request.body.name)

await Celestia.seall("0","people/"+request.body.name+"/avatar")

await Celestia.seall("0","people/"+request.body.name+"/friends")

await Celestia.seall("o","people/"+request.body.name+"/avatarpermission")

await Celestia.seall("0","people/"+request.body.name+"/commentlog")

         data.say = "Account Created.  You are Signed In."
data.token = generateAccessToken(request.body.name)
reply.setHeader("Set-Cookie",cookie.serialize("token",data.token,{httpOnly:true,maxAge: 60*60*24*7}))
       data.name = request.body.name
       reply.send(data)
})  
     }
})     
}
     })








app.post("/amISignedIn", async (request, res) => {
let data = {}
if(request.headers.cookie != undefined && request.headers.cookie != null && request.headers.cookie.indexOf("token=") != -1){
let cc = request.headers.cookie.split("token=")
jwt.verify(cc[1],process.env.TokenSecret, async (err,user) =>{
if(user != undefined){
data.signedIn = "o"
data.name = user
res.send(data)
}else{
data.signedIn = "l"
res.send(data)
}
})
}else{
data.signedIn = "l"
res.send(data)
}
})




app.post("/signOut", async (request, reply) => {
  let data = {}
data.say = "You are signed out"
reply.setHeader("Set-Cookie",cookie.serialize("token","",{httpOnly:true,maxAge: 60*60*24*7}))
         reply.send(data)
     })





























app.post("/getGalleryDabList", async (request, reply) => {
let data =   {}
reply.send(data)
     })















app.post("/viewUp", async (request, reply) => {
await Celestia.lseall("pageviews", async function(rw){
if(rw==""){await Celestia.seall("1","pageviews")}else{
let rww = parseInt(rw)+1
await Celestia.seall(rww.toString(),"pageviews")
}
reply.send({})
})
     })




app.post("/getViewUpdates", async (request, reply) => {
let data = {}
await Celestia.lseall("pageviews", async function(xxx){
data.views = xxx
reply.send(data)
}.bind(this))
     })




















app.listen(PORT, () => {
  console.log(`Node server listening at http://localhost:${PORT}/`)
})





//Showotron REpEAt Customers
//upon sayhi
//maasia page
//pagehistory
//pagecharacters

schedule.scheduleJob('0 0 * * *', async () => { 
console.log("midnight")
  
    //save logged in today in history
  //per logged in today do their action
  //generate world event (image and description)
  //
  //clear logged in today
  
  Celestia.rasiar("time.txt",function(yes){if(yes=="o"){
    Celestia.lseall("time.txt", async function(aera){
         let number2 = parseInt(aera)+1
       let number3 = number2.toString()
       Celestia.seall(number3,"time.txt").then(function(){console.log("saved")}) 
       })    
  }else{Celestia.seall("1","time.txt").then(function(){console.log("saved")}) }
                                                                })       
}) // run everyday at midnight
//at 4 now


console.log(zog.randomBytes(64).toString("hex"))




%%%%%%home&&&&&&gamble&&&&&&alchemy&&&&&&refer&&&&&&AboutUs&&&&&&vault&&&&&&growwithus&&&&&&leaderboard&&&&&&edit%%%%%%<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RosinVault</title>
   <script src="three.min.js"></script>
   <script src="GLTFLoader.js"></script>
  </head>
  <body><script>window.siartani = "home"

window.siartanilo = "RosinVault"

window.Crystalline = {

raphos: function(hem){
 





hem.aeralign = function(hema){if(hema=="o" || hema==undefined){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }



















hem.vcenter = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
hem.style.alignItems = "center"
         return hem
         }

hem.vcenterles = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
         return hem
         }

hem.vcenterphel = function(){hem.style.display = "flex"
hem.style.alignItems = "center"
         return hem
         }

hem.vsel = function(){hem.style.display = "flex"
hem.style.justifyContent = "left"
hem.style.textAlign = "left"
         return hem
         }

hem.vles = function(){hem.style.display = "flex"
hem.style.textAlign = "right"
hem.style.justifyContent = "right"
         return hem
         }



hem.eshe = function(hema){
if(hem.hematype == "select"){
hem.onchange = hema}else{
hem.onclick = hema
}
          return hem
          }



















































































hem.dalcorsalsen = function(){hem.style.backgroundRepeat = "no-repeat"
                                      
         return hem
         }





hem.dalcorsavcenter = function(){hem.style.backgroundPosition = "center"
                                     
         return hem
         }















hem.dalcorsa = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.Background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

         hem.corsadal = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"} 
         return hem
         }

















hem.noselect = function(hema){
               hema.style.userSelect = "none"
          return hem}

hem.border = function(radius,color,width,style){
          hem.style.borderRadius = "7px"
          hem.style.borderColor = "rgba(255,255,255,1)"
          hem.style.borderWidth = "3px"
          hem.style.borderStyle = "double"
          if(arguments.length>0){hem.style.borderRadius = radius}
           if(arguments.length>1){hem.style.borderColor = "rgba("+color+")"}
           if(arguments.length>2){hem.style.borderWidth = width}
           if(arguments.length>3){hem.style.borderStyle = style}
           return hem
         }

         

         

         

         hem.ona = function(){
         for(this.iuuuui=0;this.iuuuui<arguments.length;this.iuuuui++){
           hem.removeChild(arguments[this.iuuuui]) 
          }
          return hem
         }

         hem.font = function(hema){hem.style.fontFamily = hema
          return hem
          }

          
         
         
         
         
         
         
         
         


         
      
         
         
         




  hem.dalcorsascroll = function(){hem.style.backgroundAttachment = "scroll"
                                     
         return hem
         }

hem.white = function(){hem.style.whiteSpace = "pre"
                                     
         return hem
         }


hem.dalcorsalscroll = function(){hem.style.backgroundAttachment = "fixed"
                                      
         return hem
         }


hem.dalcorsaliscroll = function(){hem.style.backgroundAttachment = "local"
                                      
         return hem
         }


hem.dalcorsasen = function(){hem.style.backgroundRepeat = "repeat"
                                      
         return hem
         }



hem.dalcorsaeren = function(){hem.style.backgroundSize = "cover"
                                      
         return hem
         }



hem.dalcorsaloeren = function(){hem.style.backgroundSize = "contain"
                                      
         return hem
         }

hem.dalcorsahem = function(){hem.style.backgroundSize = "100% 100%"
                                      
         return hem
         }



         hem.textEdge = function(hema){if(hema=="o"){hem.style.whiteSpace = "wrap"}
                                       if(hema=="l"){hem.style.whiteSpace = "nowrap"}
         return hem
         }
              



hem.koil = function(){hem.style.userSelect = "none"
                                      
         return hem
         }



hem.front = function(hemb){hem.style.zIndex = hemb
                                      
         return hem
         }

hem.dal = function(hemb){hem.type = hemb
                                      
         return hem
         }





































































































































hem.ray = function(hema){












let hn = ""
if(hema != undefined){hn=hema}
         if(hem.hematype == "textarea"){hem.value = hn}
if(hem.hematype == "aera"){hem.value = hn}
if(hem.hematype == "notaera"){hem.value = hn}
if(hem.hematype == "select"){hem.value = hn}
if(hem.hematype == "input"){hem.value = hn}
if(hem.hematype == "div"){hem.innerHTML = hn}
if(hem.hematype == "button"){hem.textContent = hn}
if(hem.hematype == "option"){hem.textContent = hn
hem.value = hn}
         return hem
         }







hem.aeraeren = function(hema){hem.style.fontSize = hema+"px"
         return hem
         }
hem.textSize = function(hema){hem.style.fontSize = hema 
         return hem
         }



















hem.sunano = function(hema){
               document.body.appendChild(hem)
          return hem}

















hem.ano = function(){
         for(this.iuuui=0;this.iuuui<arguments.length;this.iuuui++){
           hem.appendChild(arguments[this.iuuui]) 
          }
          return hem
         }

























hem.vis = function(){hem.style.display = "flex"
                                      
         return hem
         }

hem.visible = function(){hem.style.display = "flex"
                                      
         return hem
         }







hem.invis = function(){hem.style.display = "none"
                                      
         return hem
         }
hem.invisible = function(){hem.style.display = "none"
                                      
         return hem
         }




















hem.sunaera = function(){
if(arguments.length == 1){hem.innerHTML = arguments[0]
         return hem
         }
if(arguments.length == 0 && hem.hematype == "textarea"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "select"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "input"){
return hem.value
}
if(arguments.length == 0 && hem.hematype != "textarea"){
         return hem.innerHTML
         }
}





hem.aeradal = function(hema){hem.style.fontFamily = hema
         return hem
         }


hem.aeraeshe = function(hema){hem.oninput = hema
          return hem
          }





hem.aeracorsa = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }
hem.textColor = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }









         










hem.aeraglow = function(hema){hem.style.textShadow = "0px 0px 4px rgba(" + hema +")"
         return hem
         }











hem.ama = function(hema){hem.placeholder = hema 
         return hem
         }

hem.hint = function(hema){hem.placeholder = hema 
         return hem
         }



















hem.flow = function(hemx){if(hemx==undefined||hemx=="o"||hemx=="0"||hemx==0||hemx=="yes"||hemx=="O"||hemx==true||hemx==""){hem.style.overflow = "auto"}
if(hemx=="l"||hemx=="L"||hemx==1||hemx=="no"||hemx==false){hem.style.overflow = "hidden"}
if(hemx!=undefined){

if(hemx.toLowerCase()=="lleslai"){hem.style.overflowX = "auto"}
if(hemx.toLowerCase()=="phellai"){hem.style.overflowY = "auto"}



}

hem.style.scrollBehavior = "smooth"
          return hem}











hem.aerasun = function(hema){hem.style.textShadow = "0 0 8px rgba("+hema+")"
         return hem
         }





hem.aeraAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }

hem.textAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }




































hem.corsaera = function(hema){
hem.style.color = "rgba("+hema+")"
         return hem
         }




hem.lo = function(x,y,w,h){
          this.lo(hem,x,y,w,h)
return hem
         }.bind(this)

hem.loles = function(x){
          this.loles(hem,x)
return hem
         }.bind(this)

hem.losel = function(x){
          this.losel(hem,x)
return hem
         }.bind(this)

hem.lophel = function(x){
          this.lophel(hem,x)
return hem
         }.bind(this)

hem.lolehp = function(x){
          this.lolehp(hem,x)
return hem
         }.bind(this)

hem.getWidth = function(){
let hema = hem.getBoundingClientRect()

return hema.width
}.bind(this)


hem.getHeight = function(){
let hema = hem.getBoundingClientRect()

return hema.height
}.bind(this)












































hem.rai = function(hema){hem.style.opacity = hema
         return hem
         }



























































hem.rhap = function(radius,color,width,style){
          hem.style.borderRadius = radius + "px"
          hem.style.borderColor = "rgba("+color+")"
          hem.style.borderWidth = width+"px"
          hem.style.borderStyle = style
           return hem
         }





hem.rhapdal = function(hema){hem.style.borderStyle = hema 
         return hem
         }
         hem.rhapcorsa = function(hema){hem.style.borderColor = "rgba("+hema+")" 
         return hem
         }
         hem.rhaperen = function(hema){hem.style.borderWidth = hema
         return hem
         }

hem.rhaprele = function(hema){hem.style.borderRadius = hema+"px"
         return hem
         }
 





hem.borderradiuses = function(tl,tr,br,bl){
hem.style.borderTopLeftRadius = tl+"px"
hem.style.borderTopRightRadius = tr+"px"
hem.style.borderBottomRightRadius = br+"px"
hem.style.borderBottomLeftRadius = bl+"px"
return hem
}


hem.borhap = function(padding){
          hem.style.padding = padding + "px"
           return hem
         }





























































































return hem
        },


seall: function(aera,siar){Kt.seall(aera,siar)},











melosiar: function(siar,hemfun){
    var client = new XMLHttpRequest()
     client.open('GET',siar)
   client.onreadystatechange = function(){
if(client.readyState == 4 && client.status == 200){hemfun(client.responseText)}}
client.send()
   },



















copyAssets: function(aera){Kt.copyAssets(aera)},


hCopyAssets: function(aera){Kt.hCopyAssets(aera)},

copyAssetsCal: function(aera){Kt.copyAssetsCal(aera)},


hCopyAssetsCal: function(aera){Kt.hCopyAssetsCal(aera)},

reloadprogramcal: function(){Kt.reloadprogramcal()},





say: function(hem){Kt.say(hem)},











lseall: function(siar){return Kt.lseall(siar)},






















maaRaynotaera: function(aeralo,x,y,w,h,ano){
let hema = Crystalline.maaelle('aera',x,y,w,h,ano).aeraeshe(function(){
Crystalline.seall(hema.sunaera(),hema.siar)

}.bind(this))

hema.siar = aeralo
hema.ray(Crystalline.lseall(hema.siar))

























},








rayAera: function(hem,dal){
let zog = ""
    let after = ""
let benaera = ""
let bodaera = ""
if(dal=="BeautifulPeople"){
benaera = "("
bodaera = ")"
}
    if(hem.indexOf("in the styles of the artists")!=-1){
    zog = hem.substring(0,hem.indexOf("in the styles of the artists"))
    after = hem.substring(hem.indexOf("in the styles of the artists"),hem.length)
    }else{
      zog = hem
    }
  let maera = hem.split(" ")
  let which = Crystalline.fate(maera.length)
let sen = Crystalline.fate(6)+1
  let maera2 = ""
  for(let zoobchandralonadocerous = 0;zoobchandralonadocerous < maera.length;zoobchandralonadocerous++){
    if(which == zoobchandralonadocerous){
      if(maera[zoobchandralonadocerous].substring(0,2)=="((" || maera[zoobchandralonadocerous].substring(maera[zoobchandralonadocerous].length-2,maera[zoobchandralonadocerous].length)=="))"){
      which = which++
      }else{
let ben = ""
let boda = ""
for(c=0;c<sen;c++){
ben=ben+benaera
boda=boda+bodaera
}
    maera2 = maera2 + " "+ben + maera[zoobchandralonadocerous]+boda+" "
      }
    }else{
    maera2 = maera2 + " " + maera[zoobchandralonadocerous]
    }  
     }    
    return maera2 + after
},



generateSeed: function(){
   let seed = Crystalline.fate(4294967295)+1
   return seed
  },


BeautifulGallery: function(x,y,w,h,ano){
let galleria = Crystalline.maaelle('div',x,y,w,h,ano)
galleria.settings = {}
  galleria.settings.gallery = true
  galleria.settings.sort = "recent"
  galleria.settings.adaptiveHeight = true
  galleria.settings.style = "background-color:rgba(0,0,0,0)"
  galleria.settings.forceColorScheme = "dark"
let c = image(galleria.settings).evaluateItem
  galleria.ray(c)
},

BeautifulStory: function(ask,x,y,w,h,ano){
let textia = Crystalline.maaelle('div',x,y,w,h,ano)
textia.settings = {}
 textia.settings.instruction = ask  
let c = aitext(textia.settings)
  textia.ray(c)
},

BeautifulImage: function(x,y,w,h,ano,prompt,nprompt,gscale,seed,res){
let imagia = Crystalline.maaelle('div',x,y,w,h,ano)
imagia.settings = {}
  imagia.settings.prompt = prompt
  imagia.settings.negativePrompt = nprompt
 imagia.settings.guidanceScale = gscale
 imagia.settings.seed = seed
 imagia.settings.resolution = res
let c = image(imagia.settings).evaluateItem
  imagia.ray(c)
//YTILIBATAPMOC
},




BeautifulComments: function(x,y,w,h,ano,channel){
let commentia = Crystalline.maaelle('div',x,y,w,h,ano)
commentia.settings = {}
  commentia.settings.spiritguides = true
  commentia.settings.loadFonts = "Emilys Candy"
 commentia.settings.channel = channel
 commentia.settings.commentPlaceholderText = "meow"
 commentia.settings.submitButtonText = "meow"
commentia.settings.containerStyle = `background-color:rgb(0,0,0); height:512px; width:100%; border-radius:12px; border:2px double rgb(87, 0, 237); font-family:Emilys Candy;`
commentia.settings.messageBubbleStyle = `background:rgba(255,255,255,0.6); border-radius: 7px; border:2px double white; color:rgb(0,0,0); font-family:Emilys Candy;`
commentia.settings.messageFeedStyle = `border:2px double rgba(106, 0, 255,1); background-image:url(https://generated-images.perchance.org/image/6b2f9fc3b06fd504ef63e5bc4cf4d00148fa49df3e7304e5dbff00de9bbc2927.jpeg); border-radius: 7px; font-family:Emilys Candy;`
commentia.settings.inputAreaStyle = `background-color:rgb(0,0,0); font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(255,255,255);`
commentia.settings.submitButtonStyle = `width:100%;background-color: rgba(61, 242, 255,1); border:none; font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(0,0,0)`
commentia.settings.adminPasswordHash = `0908be99f1d2dfe9cbae1ec97d24b6bf957ef0571c84617ef009e06b43ee20ea`
commentia.settings.adminFlair = `meow`
commentia.settings.width = `400`
commentia.settings.bannedWords = "cbat"
//commentia.settings.customEmojis = {import:allos-emoji-list}
commentia.settings.loneCustomEmojiSizeMultiplier = "3"
commentia.settings.customEmojiSize = "1.2"
let c = comments(commentia.settings).evaluateItem
  commentia.ray(c)
//YTILIBATAPMOC
},





  
  
  
  
  
  
  

  
  
  
  
  
    
  
  


  

  
  
  


melosia: function(hem){return Kt.melosia(hem).split(",")},
















downloadassets: function(hemlo,hemtani){Kt.downloadassets(hemlo,hemtani)},
hseall: function(aera,siar){Kt.hseall(aera,siar)},
hlseall: function(siar){return Kt.hlseall(siar)},
        seallsiar: function(siabe,siabo){Kt.seallsiar(siabe,siabo)},
        rasiar: function(siabe){return Kt.rasiar(siabe)},
hrasiar: function(siabe){return Kt.hrasiar(siabe)},
rasia: function(siabe){return Kt.rasia(siabe)},
        seallsia: function(siabe,siabo){Kt.seallsia(siabe,siabo)},
celestiall: function(siabe,siabo){Kt.celestiall(siabe,siabo)},
        seallver: function(siabe,siabo){Kt.seallver(siabe,siabo)},
        kortanisia: function(siabe,siabo){Kt.kortanisia(siabe,siabo)},
hkortanisia: function(siabe,siabo){Kt.hkortanisia(siabe,siabo)},
        
maasia: function(hem){Kt.maasia(hem)},
hmelosia: function(hem){return Kt.hmelosia(hem).split(",")},
sunseall: function(aera,siar){Kt.sunseall(aera,siar)},
sunlseall: function(siar){return Kt.sunlseall(siar)},
        sunmelosia: function(hem){return Kt.sunmelosia(hem).split(",")},






















ekklinere: function(hemaera,hemekk){
let sen = hemekk.indexOf(hemaera)
if(sen != -1){
  hemekk.splice(sen, 1)
}
return hemekk
},
ekklieren: function(hemaera,hemekk){
hemekk.push(hemaera)
return hemekk
},
ekklira: function(hemaera,hemekk){
if(hemekk.includes(hemaera)){return "o"}else{return "l"}
},











componentToHex: function(c) {
  var hex = c.toString(16)
  return hex.length == 1 ? "0" + hex : hex
},

 rgbToHex: function(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b)
},



hemThree: function(tthen,tanimate,x,y,w,h,hemano){
let hema = Crystalline.maaelle('div',x,y,w,h,hemano)

Crystalline.Corsan = hema
hema.threescript = tanimate
hema.threeobjects = []
hema.threeactive = false
hema.Textures = []
hema.animate = function(){ 	
                      	if(hema.threeactive == true){
for(i=0;i<hema.threeobjects.length;i++){
hema.threeobjects[i]()
}
hema.threescript()
//hema.ORBITCONTROLS.update()
hema.RENDERER.render( hema.SCENE, hema.CAMERA )
}
let ani = hema.animate.bind(this)
requestAnimationFrame( ani )
}.bind(this)

hema.THREE = THREE

hema.TextureLoader = new hema.THREE.TextureLoader()
//hema.GLTFLoader = new this.THREE.GLTFLoader()

let vww = Math.round(w*hemano.clientWidth)
let vhh = Math.round(h*hemano.clientHeight)

     hema.SCENE = new hema.THREE.Scene()

hema.LIGHT = new hema.THREE.AmbientLight(0xffffff,0.3)
hema.SCENE.add(hema.LIGHT)

hema.SUN = new hema.THREE.PointLight( 0xffffff, 1, 70 )
hema.SUN.position.set( 13, 20, 13 )
hema.SUN.castShadow = true
hema.SUN.shadow.mapSize.width = 26
hema.SUN.shadow.mapSize.height = 26
hema.SUN.shadow.camera.near = 1
hema.SUN.shadow.camera.far = 50
hema.SCENE.add( hema.SUN )

    hema.CAMERA = new hema.THREE.PerspectiveCamera( 90, vww/ vhh, 0.1, 1000 )
hema.cameraX = 0
hema.cameraY = 0
hema.cameraZ = 0
hema.CAMERA.position.set(0, 0, 0)



     hema.RENDERER = new hema.THREE.WebGLRenderer()
hema.RENDERER.shadowMap.enabled = true
      hema.RENDERER.setSize(vww, vhh)
hema.RENDERER.setPixelRatio(window.devicePixelRatio)

hema.ORBITCONTROLS = new hema.THREE.OrbitControls(hema.CAMERA,hema.RENDERER.domElement)
hema.ORBITCONTROLS.enabled = false
//hema.ORBITCONTROLS.enableDamping = true
//hema.ORBITCONTROLS.dampingFactor = 0.05
hema.ORBITCONTROLS.screenSpacePanning = false
hema.ORBITCONTROLS.minDistance = 30
hema.ORBITCONTROLS.maxDistance = 100

hema.T = hema.RENDERER.domElement
Crystalline.raphos(hema.T)
hema.T.lo(0,0,1,1)
hema.front(999999999999)
 hema.ano( hema.T )


















hema.createUnit = function(x,y,z,who){

let hemb = {}
hemb.represents = who
hema.tani = who
hemb.x = x
hemb.y = y
hemb.z = z
hemb.variant = ""
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hema.b,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)



hemb.removeFromMap = function(){
this.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)


hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)
}
return hemb
}.bind(this)









hema.SunRaphos = function(hemb){
























































































































































































































hemb.lookAtMe = function(){
hema.CameraLookAtObject(hemb)
return hemb
}.bind(this)














































































































hemb.position = function(rx,ry,rz){
hemb.x = rx
hemb.y = ry
hemb.z = rz
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)



hemb.wireframe = function(hem){
if(hem=="o"){
hemb.materi1.wireframe = true
}else{
hemb.materi1.wireframe = false
}
}.bind(this)



hemb.texturewrap  = function(img){
      
                   
           let mewta = new hema.THREE.TextureLoader().load(img)
                    mewta.wrapS = mewta.wrapT = hema.THREE.RepeatWrapping
                    
                    hemb.materi1.map = mewta         
                    hemb.materi1.needsUpdate = true
                  }.bind(this)




return hemb
}.bind(this)
















































































































































































































hema.maaTree = function(x,y,z){

let hemb = hema.maaS(x,y,z,2,90,2)
hema.maaS(x+6,y+14,z,10,2,2)
hema.maaS(x,y+20,z+6,2,2,10)
hema.maaS(x-6,y+26,z,10,2,2)
hema.maaS(x,y+32,z-6,2,2,10)
hema.maaS(x+6,y+38,z,10,2,2)
return hemb
}.bind(this)



hema.maaS = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(xp, yp, zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
return hemb
}.bind(this)









Crystalline.Corsan.maaLight = function(x,y,z,strength){
let light = new THREE.PointLight(0xffffff,strength)
light.position.set(x,y,z)
hema.SCENE.add(light)
}.bind(this)


Crystalline.Corsan.maaInvisithing = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(255,255,255)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(hemb.xp, hemb.yp, hemb.zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hemb.aaM()
return hemb
}.bind(this)






















































hema.cameraSpin = function(tani){
hema.ORBITCONTROLS.enabled = true
return hema
}.bind(this)




hema.cameraNonspin = function(tani){
hema.ORBITCONTROLS.enabled = false
return hema
}.bind(this)









hema.maaMaven = function(x,z,type,who){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.variant = type
hemb.present = "o"
if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{
let hm = Crystalline.melosia(type+"/Maven/Corsa")
let wm = Crystalline.fate(hm.length)
let whoo = hm[wm].replace(".png","") +"Maven"
let tew = hema.Textures[whoo]
hemb.variant = hm[wm]

if(type != "Nif"){
hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)

hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
}else{

let whooo = who +"Hazel"
let tew2 = hema.Textures[whooo]

hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })
hemb.materi2 = new hema.THREE.SpriteMaterial({ 
	map: tew2,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)
hemb.mesh2 = new hema.THREE.Sprite(hemb.materi2)
hemb.mesh2.scale.set(0.3,0.3,0.3)
hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
hema.SCENE.remove(hemb.mesh2)
hemb.materi2.dispose()
hemb.mesh2 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hemb.mesh2.position.set(hemb.x,hemb.y+1,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hema.SCENE.add(hemb.mesh2)
}

}


return hemb
}.bind(this)


































































hema.maaEditSphere = function(x,z){

let hemb = {}
hemb.x = x
hemb.y = 3
hemb.z = z

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.SphereGeometry(0.35)

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){

hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.rotatia = function(){
hemb.mesh1.rotation.x = hemb.mesh1.rotation.x+0.01
}.bind(this)
hema.threeobjects.push(hemb.rotatia)



return hemb
}.bind(this)

























































































hema.CameraLookAtPosition = function(x,y,z){
let weW = new hema.THREE.Vector3(x,y,z)
hema.CAMERA.lookAt(weW)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraPosition = function(x,y,z){
hema.cameraX = x
hema.cameraY = y
hema.cameraZ = z
hema.CAMERA.position.set(x,y,z)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraTopDown = function(){
//hema.CAMERA
}.bind(this)

hema.CameraVFov = function(hem){
hema.CAMERA.fov = hem
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraLookAtObject = function(hemc){
hema.CAMERA.lookAt(hemc.mesh1.position)
}.bind(this)

hema.cameraright = function(hem){
hema.cameraX = hema.cameraX+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraleft = function(hem){
hema.cameraX = hema.cameraX-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameradown = function(hem){
hema.cameraZ = hema.cameraZ+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraup = function(hem){
hema.cameraZ = hema.cameraZ-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)



hema.CameraAutoTurnaround = function(hemb){
if(arguments.length == 1){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtObject(hemb)
}.bind(this)
hema.threeobjects.push(rotatia)
}
if(arguments.length == 3){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtPosition(arguments[0],arguments[1],arguments[2])
}.bind(this)
hema.threeobjects.push(rotatia)
}


}.bind(this)











hema.maaConversion = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.variant = who
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)






















hema.maaHazel = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z

if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let whoo = who +"Hazel"

let tew = hema.Textures[whoo]



hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)





























hema.maaSen = function(x,z,type){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 1
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.materi1 = ""
if(type.substring(0,4)=="Wall"){
hemb.y=2
hemb.ctype = hemb.ctype.replace("Wall","")
}
if(type.substring(0,9)=="Superwall"){
hemb.y=3
hemb.ctype = hemb.ctype.replace("Superwall","")
}
if(type.substring(0,3)=="Pit"){
hemb.y=0
hemb.ctype = hemb.ctype.replace("Pit","")
}

if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

if(type.substring(0,7)!="Culture"){
let whoo = hemb.ctype +"Sen"
let tew = hema.Textures[whoo]

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	map: tew,
transparent: true
 })
}else{
let hcolor = type.substring(7,type.length)
hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: hcolor,
transparent: true,
wireframe: true
 })

}


hemb.shape1  = new hema.THREE.BoxGeometry( hemb.xw, hemb.yw, hemb.zw )
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){





hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.shape1.dispose()
hemb.mesh1 = undefined

}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)



}

return hemb
}.bind(this)



















































      tthen()
    
hema.threeactive = true
hema.animate()

return hema
},











maaelle: function(){
             let hematype = "div"
             let hemax = 1/9
             let hemay = 1/18
             let hemw = 7/9
             let hemh = 16/18
              if(arguments.length>0){hematype = arguments[0]
              if(arguments[0]=="aera"){hematype = "textarea"}}
              if(arguments.length>1){hemax = arguments[1]}
              if(arguments.length>2){hemay = arguments[2]}
              if(arguments.length>3){hemw = arguments[3]}
              if(arguments.length>4){hemh = arguments[4]}
              let hema = document.createElement(hematype)
              hema.hematype = hematype
              if(hema.hematype == "div"){
               hema.style.userSelect = "none"
              }
             this.raphos(hema)
hema.style.fontFamily = "EmilysCandy"
if(hematype == "option"){
arguments[1].ano(hema)
}else{
             this.lo(hema,hemax,hemay,hemw,hemh)
}
         
             if(arguments.length>5){arguments[5].ano(hema)}
             
hema.dalcorsa("0,0,0,0.0").aeracorsa("255,255,255,1").aeraglow("255,255,255,1")


             return hema
            },




















kiDelete: function(){Kt.kieh(1,0)},
            ki: function(hem){Kt.ki(hem)},
            kiPaste: function(){Kt.kiPaste()},
            kiCopy: function(){Kt.kiCopy()},
            kiCut: function(){Kt.kiCut()},
            kiSelectAll: function(){Kt.kiSelectAll()},
            kiSelect: function(hemben,hemboda){Kt.kiSelect(hemben,hemboda)},
            kiboda: function(hemdistance){return Kt.kiboda(hemdistance)},
            kiben: function(hemdistance){return Kt.kiben(hemdistance)},
            kieh: function(hemben,hemboda){Kt.kieh(hemben,hemboda)},
            kiUp: function(){Kt.kiUp()},
            kiDown: function(){Kt.kiDown()},
            kiLeft: function(){Kt.kiLeft()},
            kiRight: function(){Kt.kiRight()},
            kiUndo: function(){Kt.kiUndo()},
            kiRedo: function(){Kt.kiRedo()},
    
kiSelection: function(){return Kt.kiSelection()},
      


gotowebpage: function(hem){Kt.gotowebpage(hem)},


     readasset: function(hem){
return Kt.readasset(hem)
}, 
exportasset: function(hem,boda){
Kt.exportasset(hem,boda)
}, 
        
        
 














veskaLo: function(tani,hem){
document.location.href = "https://"+tani+".glitch.me/"+hem
},


sensia: function(aera,sia){
let w = Crystalline.melosia(sia)
let an = w.length
if(w[0]==""){an=0}
let re = an.toString()
Crystalline.seall(aera,sia+"/"+re)
},

lo: function(hem,x,y,w,h){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)
                        hem.style.right = this.conversion.percentstring(1-(x+w))
                        hem.style.top = this.conversion.percentstring(y)
                        hem.style.bottom = this.conversion.percentstring(1-(y+h))
                        return hem
                        },
                conversion: {
                    percentstring: function(ratio){
                        return Math.round(ratio*100).toString()+"%"
                    },
                },



loles: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)   
                        return hem
                        },

losel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.right = this.conversion.percentstring(x)   
                        return hem
                        },

lophel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.top = this.conversion.percentstring(x)   
                        return hem
                        },
         
lolehp: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.bottom = this.conversion.percentstring(x)   
                        return hem
                        },










   





lohem: function(hem){
let hema = document.getElementById(hem)

this.raphos(hema)
return hema
},



























fate: function(hsen){
let hema = Math.floor(Math.random()*hsen)
return hema
},



SenNow: function(){
let hema = Date.now()
hema = hema.toString()
return hema
},

Senminutessince: function(since){
let hema = this.SenNow()
let hemaaa = parseInt(hema)-parseInt(since)
return hemaaa
},

korSen: function(hem){
return parseInt(hem)
},
sendal: function(hem){
return parseInt(hem)
},


maaHemSen: function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.year
hema.month
hema.day
hema.hour
hema.minute
hema.second
hema.millisecond
return hema
},

























}

let Kt = {
say: function(hem){alert(hem)},



hseall: function(aera,siar){
localStorage.setItem(siar,aera)
},
hlseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
seall: function(aera,siar){
localStorage.setItem(siar,aera)
},
lseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
        seallsiar: function(siabe,siabo){},
        rasiar: function(siabe){},
rasia: function(siabe){},
        seallsia: function(siabe,siabo){},
        seallver: function(siabe,siabo){},
        kortanisia: function(siabe,siabo){},
        melosia: function(hem){},
hmelosia: function(hem){},
sunseall: function(aera,siar){},
sunlseall: function(siar){},
        sunmelosia: function(hem){},




}






window.mode = ""
if(innerWidth > innerHeight){window.mode = "computer"}else{window.mode = "phone"}

window.SunMohka = Crystalline.maaelle('div',0,0,1,1).sunano().front("1").dalcorsa("0,0,0,1")
SunMohka.Aera = Crystalline.maaelle('div',0,0,1,1,SunMohka).dalcorsa("0,0,0,1")
SunMohka.TopBar = Crystalline.maaelle('div',0,0,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.TopBar.Entries = []
SunMohka.TopBar.Add = function(hem){
SunMohka.Aera.lophel(1/24)
SunMohka.TopBar.vis()
hem.lo((1/5)*SunMohka.TopBar.Entries.length,0,1/5,1)
SunMohka.TopBar.ano(hem)
SunMohka.TopBar.Entries.push(hem)
}.bind(this)
SunMohka.BottomBar = Crystalline.maaelle('div',0,23/24,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.BottomBar.Entries = []
SunMohka.BottomBar.Add = function(hem){
SunMohka.Aera.lolehp(1/24)
SunMohka.BottomBar.vis()
hem.lo((1/5)*SunMohka.BottomBar.Entries.length,0,1/5,1)
SunMohka.BottomBar.ano(hem)
SunMohka.BottomBar.Entries.push(hem)
}.bind(this)



window.Users = {}





Users.coinCorsa = ""






Users.viewUp = async function(){
await Creatures.magicspell("viewUp",{},function(data){})  
  }

Users.refreshMoney = async function(){
await Creatures.magicspell("getMoney",{},function(data){
SunMohka.SignInBar.coinamount.ray(data.money)
})
}.bind(this)



Users.amISignedInvInvis = []
Users.amISignedInInvis = function(hem){
Users.amISignedInvInvis.push(hem)
}.bind(this)

Users.amISignedIn = async function(){
await Creatures.magicspell("amISignedIn",{},function(data){
if(data.signedIn == "o"){
SunMohka.SignInBar.signinliORusername.mode = "Account"
SunMohka.SignInBar.signinliORusername.ray(data.name)
for(i=0;i<Users.amISignedInvInvis.length;i++){
Users.amISignedInvInvis[i].invis()
}
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
}
})
}



Users.signOut = async function(){
await Creatures.magicspell("signOut",{},function(data){
if(siartani == "gamble"){Zogladorium()}
SunMohka.SignInBar.coinamount.ray("0")
alert(data.say)})
}

Users.signIn = async function(hname,hpass,hreferer){
await Creatures.magicspell("signIn",{name:hname,pass:hpass,referer:hreferer},function(data){alert(data.say)
if(data.say == "Account Created.  You are Signed In." || data.say == "You are Signed In."){
SunMohka.SignInBar.signinliORusername.ray(data.name)
SunMohka.SignInBar.signinliORusername.mode = "Account"
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
SunMohka.SignInBar.abovepopupsignin.invis()
}
})
}

Users.createSignInBar = function(cointype){
SunMohka.SignInBar = Crystalline.maaelle('div',0,0,1,1)
SunMohka.TopBar.Add(SunMohka.SignInBar)
SunMohka.SignInBar.cointype = cointype

SunMohka.SignInBar.coin = Crystalline.maaelle('div',0,0,1/4,1,SunMohka.SignInBar).dalcorsascroll().dalcorsaeren().dalcorsalsen().eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}
}.bind(this))

SunMohka.SignInBar.coinamount = Crystalline.maaelle('div',1/4,0,1/4,1,SunMohka.SignInBar).vcenter().ray("0").eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}

}.bind(this))

if(SunMohka.SignInBar.cointype.toUpperCase() == "S"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/5107474554438d57be7152605ea67a78.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}
if(SunMohka.SignInBar.cointype.toUpperCase() == "PERSON"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/837189de985fa03e9fb36adfbabf8c29.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}

SunMohka.SignInBar.signinliORusername = Crystalline.maaelle('div',2/4,0,2/4,1,SunMohka.SignInBar).dalcorsa("0,0,0,1").corsaera("255,255,255").rhap("7","255,255,255,1","1","solid").ray("SignIn").vcenter().eshe(function(){
if(SunMohka.SignInBar.signinliORusername.mode == "SignIn"){
SunMohka.SignInBar.abovepopupsignin.visible()
}
if(SunMohka.SignInBar.signinliORusername.mode == "Account"){
if(Users.AccountMohka.on=="l"){
Users.AccountMohka.on = "o"
Users.AccountMohka.visible()
SunMohka.SignInBar.signinliORusername.corsaera("0,255,0,1").rhap("7","0,255,0,1","1","solid")
}else{
Users.AccountMohka.on = "l"
Users.AccountMohka.invisible()
SunMohka.SignInBar.signinliORusername.corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid")
}

}
}.bind(this))
SunMohka.SignInBar.signinliORusername.mode = "SignIn"

Users.amISignedIn()

SunMohka.SignInBar.abovepopupsignin = Crystalline.maaelle('div',0,0,1,1).sunano().invis().front("100").dalcorsa("0,0,0,0.5")

SunMohka.SignInBar.popupsignin = Crystalline.maaelle('div',0,0,1,1,SunMohka.SignInBar.abovepopupsignin).front("101").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

SunMohka.SignInBar.popupsignin.login = Crystalline.maaelle('aera',1/9,1/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Name").borhap("12")

SunMohka.SignInBar.popupsignin.pass = Crystalline.maaelle('aera',1/9,3/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Password").borhap("12")

SunMohka.SignInBar.popupsignin.referer = Crystalline.maaelle('aera',1/9,5/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("referer").borhap("12")

SunMohka.SignInBar.popupsignin.signinli = Crystalline.maaelle('div',1/9,7/18,7/9,1/18,SunMohka.SignInBar.popupsignin).eshe(function(){
Users.in = SunMohka.SignInBar.popupsignin.login.value
Users.signIn(SunMohka.SignInBar.popupsignin.login.value,SunMohka.SignInBar.popupsignin.pass.value,SunMohka.SignInBar.popupsignin.referer.value)
}.bind(this)).ray("Enter").rhap("7","255,255,255,1","1","solid").borhap("12")
return SunMohka.SignInBar
}









Users.AccountMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).invis().front("201").dalcorsa("0,0,0,1")

Users.AccountMohka.on = "l"

Users.AccountMohka.unlogLi = Crystalline.maaelle('div',0,0,1/9,1/12,Users.AccountMohka).ray("LogOut").eshe(function(){
SunMohka.SignInBar.signinliORusername.ray("SignIn")
SunMohka.SignInBar.signinliORusername.mode = "SignIn"
Users.AccountMohka.invis()
Users.signOut()
}.bind(this)).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

Users.Inventory = Crystalline.maaelle('div',0,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")
Users.Inventory.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Inventory).ray("Inventory").vcenter()
Users.Inventory.Items = Crystalline.maaelle('div',0,1/8,1,7/8,Users.Inventory).rhap("7","255,255,255,1","1","solid").flow("o")
Users.Inventory.Items.vItem = []

Users.Inventory.Items.erenlupe = function(tani,corsa,sen){

let hema = Crystalline.maaelle('div',0,0,1,1)

return hema

}.bind(this)




Users.Friends = Crystalline.maaelle('div',1/2,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.Friends.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Friends).ray("Friends").vcenter()




Users.History = Crystalline.maaelle('div',0,5/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.History.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.History).ray("History").vcenter()

Users.History.Melo = Crystalline.maaelle('div',0,1/8,1/9,7/8,Users.History).rhap("0","255,255,255,1","1","solid")

Users.History.Melo.liItems = Crystalline.maaelle('div',0,0,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Items")

Users.History.Melo.liComments = Crystalline.maaelle('div',0,1/6,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Comments")

//bottom bar of page to be a generic banner until person ranks on a leaderboard, at which point upgrades to 'where u are on leaderboard'








window.Creatures = {}



Creatures.magicspell = async function(what,thing,next){ 
    await fetch('https://rosinvault.glitch.me/'+what, { method: 'POST', headers: { 'Content-Type': 'application/json'}, body: JSON.stringify(thing)}).then(response => response.json()).then(data => next(data)).catch(error => alert(error))  
  }


Creatures.getUpdates = async function(){ 
await Creatures.magicspell("getUpdates",{},function(data){
Creatures.UpdatesMohka.aera.ray("")
Creatures.UpdatesMohka.aera.entries = []
let entries = data.entries.split(`:;:

`)
for(i=0;i<entries.length;i++){
let ha = entries[i].split(`:::

`)
if(ha[1].indexOf("RosinVault, ") != -1){
ha[1] = ha[1].replace("Allotopia, ","")
ha[1] = ha[1].replace("RosinVault, ","")
ha[1] = ha[1].replace("GrowingHome, ","")
ha[1] = ha[1].replace("BeautifulPeople2, ","")
Creatures.UpdatesMohka.aera.entries[i] = Crystalline.maaelle('div',0,(1/6)*i,1,1/6,Creatures.UpdatesMohka.aera)
Crystalline.maaelle('div',0,0,1/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[0]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
 Crystalline.maaelle('div',1/4,0,3/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[1]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
}
}
    })
  }
  








Creatures.UpdatesMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).dalcorsa("0,0,0,1").sunano().invis().front("50")

Creatures.UpdatesMohka.supdate = ""

Creatures.UpdatesMohka.getViewUpdates = async function(){
Creatures.magicspell("getViewUpdates",{},function(data){
Creatures.UpdatesMohka.viewcount.ray("Views: "+data.views)
})
  }
  




Creatures.UpdatesMohka.aera = Crystalline.maaelle('div',0,1/12,1,11/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").flow("o")

Creatures.UpdatesMohka.returnli = Crystalline.maaelle('div',0,0,1/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter().ray("Return").eshe(function(){
clearInterval(Creatures.UpdatesMohka.supdate)
Creatures.UpdatesMohka.invis()
}.bind(this))

Creatures.UpdatesMohka.viewcount = Crystalline.maaelle('div',5/8,0,3/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter()



Creatures.addUpdatesBottomBar = function(){
let hema = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
Creatures.UpdatesMohka.getViewUpdates()
Creatures.UpdatesMohka.supdate = setInterval(function(){
Creatures.UpdatesMohka.getViewUpdates()
}.bind(this),5000)
Creatures.getUpdates()
Creatures.UpdatesMohka.visible()
}.bind(this)).ray("Updates")
SunMohka.BottomBar.Add(hema)
}.bind(this)







//////////////////////////////////////////////////

































































































let Comments = {}
Comments.submit = function(hem,hsen){
let ish = Crystalline.lseall("in")
if(ish == "o"){
let thing = {}
thing.aera = hem
thing.when = Date.now()
thing.which = hsen
thing.name = SunMohka.SignInBar.signinliORusername.sunaera()
Creatures.magicspell("askToComment",function(data){
Crystalline.say("Comment Submitted")
})
}
}.bind(this)















Profile ={}
Profile.referer = ""
Profile.refercount = ""
Profile.refercode = ""
Profile.Comments = {}
Profile.Comments.History = {}
Profile.Comments.History.topRanked = function(){
let hema = {}

return hema
}.bind(this)

// (leaf rating system)








































































let Store = {}
Store.createStore = function(){
SunMohka.StoreLi = Crystalline.maaelle('div',0,0,1,1).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").vcenter().corsaera("255,255,255,1").ray("Store").eshe(function(){
SunMohka.StoreMohka.vis()
}.bind(this))
SunMohka.StoreMohka = Crystalline.maaelle('div',0,0,1,1).sunano().dalcorsa("0,0,0,1").corsaera("255,255,255,1").front("203").invis()
SunMohka.StoreMohka.returnLi = Crystalline.maaelle('div',0,0,1/9,1/12,SunMohka.StoreMohka).ray("return").vcenter().dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").eshe(function(){
SunMohka.StoreMohka.invis()
}.bind(this))


SunMohka.TopBar.Add(SunMohka.StoreLi)
return SunMohka.StoreLi
}.bind(this)






























Creatures.createTimeBar = function(x,y,w,h,ano){
let hema = {}
hema.TimeBar = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.TimeBar.heartdrum = setInterval(function(){
if(hema.time != ""){
let timesofar = Date.now() - hema.time
let days = (((timesofar/1000)/60)/60)/24
let hours = ((timesofar/1000)/60)/60
let minutes = (timesofar/1000)/60
let seconds = timesofar/1000

if(hours < 1){
hema.TimeBar.barhourm.lo(0,0,hours,1)
hema.TimeBar.bartwohoursm.lo(0,0,0,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 1 && hours < 2){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,hours-1,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 2 && hours < 3){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,hours-2,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 3 && hours < 6){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,(hours-3)/3,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 6 && hours < 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,(hours-6)/6,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,1,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,(hours-12)/6,1)
}

}

}.bind(this),1000)

hema.TimeBar.maa = function(){
Creatures.magicspell("getTimeAndCollects",{},function(data){
if(data.signedIn != "l"){
hema.time = data.timesofar
}
}.bind(this))
}.bind(this)

window.Zogladorium = hema.TimeBar.maa
hema.TimeBar.betKoCollect = Crystalline.maaelle('div',1/4,1/16,2/4,1/8,hema.TimeBar).invis().corsaera("0,255,0,1").rai(0).vcenter().aerasun("0,255,0,1")
hema.TimeBar.timeshow = Crystalline.maaelle('div',0,1/4,1,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").dalcorsa("42,18,59,1")
hema.TimeBar.barhour = Crystalline.maaelle('div',0,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("1 Hour")
hema.TimeBar.bartwohours = Crystalline.maaelle('div',1/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("2 Hours")
hema.TimeBar.barthreehours = Crystalline.maaelle('div',2/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("3 Hours")
hema.TimeBar.barsixhours = Crystalline.maaelle('div',3/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("6 Hours")
hema.TimeBar.bartwelvehours = Crystalline.maaelle('div',4/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("12 Hours")
hema.TimeBar.bartwentyfourhours = Crystalline.maaelle('div',5/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("24 Hours")

hema.TimeBar.barhourm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barhour).dalcorsa("0,255,0,1")
hema.TimeBar.bartwohoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwohours).dalcorsa("0,255,0,1")
hema.TimeBar.barthreehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barthreehours).dalcorsa("0,255,0,1")
hema.TimeBar.barsixhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barsixhours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwelvehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwelvehours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwentyfourhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwentyfourhours).dalcorsa("0,255,0,1")

hema.TimeBar.reward = {}
hema.TimeBar.reward.claimli = Crystalline.maaelle('div',3/9,2/4,3/9,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").vcenter().ray("Collect your points!").eshe(function(){
Creatures.magicspell("timebarCollect",{},function(data){
Users.refreshMoney()
hema.TimeBar.maa()
hema.TimeBar.betCollect(data.amountCollected)
})

}.bind(this))

hema.TimeBar.reward.first = Crystalline.maaelle('div',0,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.second = Crystalline.maaelle('div',1/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.third = Crystalline.maaelle('div',2/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fourth = Crystalline.maaelle('div',3/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fifth = Crystalline.maaelle('div',4/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.sixth = Crystalline.maaelle('div',5/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")




hema.TimeBar.reward.corsahourc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.first).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwohoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.second).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsathreehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.third).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsasixhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fourth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwelvehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fifth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwentyfourhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.sixth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()

hema.TimeBar.reward.corsahour = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.first).vcenter().ray("+ 5")
hema.TimeBar.reward.corsatwohours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.second).vcenter().ray("+ 4")
hema.TimeBar.reward.corsathreehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.third).vcenter().ray("+ 2")
hema.TimeBar.reward.corsasixhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fourth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwelvehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fifth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwentyfourhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.sixth).vcenter().ray("+ 0")

hema.TimeBar.betCollect = function(hemsen){
let raera = ""
if(hemsen == undefined){
raera = "An hour has not passed yet."
}else{
raera = hemsen + " points collected!"
}
hema.TimeBar.betKoCollect.ray(raera)
hema.TimeBar.betKoCollect.rai(0)
let op = 0
let dalo = "p"
hema.TimeBar.betKoCollect.vis()
let hx = setInterval(function(){
let opp = op
if(op>1){opp=1}
hema.TimeBar.betKoCollect.rai(opp)
if(dalo=="p"){op=op+0.02}
if(op>=2){op=1
dalo="l"}
if(dalo=="l"){op=op-0.01}
if(op<0){hema.TimeBar.betKoCollect.invis()
clearInterval(hx)}

}.bind(this),10)
}.bind(this)


hema.TimeBar.maa()
return hema.TimeBar
}.bind(this)




//10 questions per day






















Creatures.Gamble = {}

Creatures.Gamble.maa = function(x,y,w,h,ano){
Creatures.Gamble.Mohka = Crystalline.maaelle('div',x,y,w,h,ano)

Creatures.Gamble.getQuestions = async function(){
await Creatures.magicspell("getMyDailyQuestions",{},function(hem){
if(hem.q1aera != ""){
let q = hem.q1aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question1.ray(q[0]+" vs "+q[1])
Creatures.Gamble.Mohka.q1t1.sen = hem.q1
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.vis()
Creatures.Gamble.Mohka.question1.vis()
Creatures.Gamble.Mohka.q1t1.vis()
Creatures.Gamble.Mohka.q1t1.ray(q[0])
Creatures.Gamble.Mohka.q1t2.vis()
Creatures.Gamble.Mohka.q1t2.ray(q[1])
}else{
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.invis()
Creatures.Gamble.Mohka.question1.invis()
Creatures.Gamble.Mohka.q1t1.invis()
Creatures.Gamble.Mohka.q1t1.ray("")
Creatures.Gamble.Mohka.q1t2.invis()
Creatures.Gamble.Mohka.q1t2.ray("")
}

if(hem.q2aera != ""){
let qb = hem.q2aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question2.ray(qb[0]+" vs "+qb[1])
Creatures.Gamble.Mohka.q2t1.sen = hem.q2
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.vis()
Creatures.Gamble.Mohka.question2.vis()
Creatures.Gamble.Mohka.q2t1.vis()
Creatures.Gamble.Mohka.q2t1.ray(qb[0])
Creatures.Gamble.Mohka.q2t2.vis()
Creatures.Gamble.Mohka.q2t2.ray(qb[1])
}else{
Creatures.Gamble.Mohka.q2t1.sen = ""
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.invis()
Creatures.Gamble.Mohka.question2.invis()
Creatures.Gamble.Mohka.q2t1.invis()
Creatures.Gamble.Mohka.q2t1.ray("")
Creatures.Gamble.Mohka.q2t2.invis()
Creatures.Gamble.Mohka.q2t2.ray("")
}

}.bind(this))
}.bind(this)
Creatures.Gamble.answerQuestion = async function(questionsen,answer,amount){
await Creatures.magicspell("gambleAnswerQuestion",{questionsen:questionsen,answer:answer,amount:amount},function(hem){if(hem.answered == "o"){
Users.refreshMoney()
Creatures.Gamble.getQuestions()
}}.bind(this))
}.bind(this)

Creatures.Gamble.Mohka.streak = Crystalline.maaelle('div',0,1/2,1/2,1/2,Creatures.Gamble.Mohka).ray("Enable Streak").vcenter().rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1").eshe(function(){
if(Creatures.Gamble.Mohka.streak.on == "l"){
Creatures.Gamble.Mohka.streak.on = "o"
Creatures.Gamble.Mohka.streak.ray("Streak Enabled!")
Creatures.Gamble.Mohka.streak.rhap("7","0,0,0,1","1","solid").dalcorsa("0,255,0,1").corsaera("0,0,0,1")
Creatures.Gamble.Mohka.Amount1.ray("5")
Creatures.Gamble.Mohka.Amount2.ray("5")
}else{
Creatures.Gamble.Mohka.streak.on = "l"
Creatures.Gamble.Mohka.streak.ray("Enable Streak")
Creatures.Gamble.Mohka.streak.rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")
}

}.bind(this))
Creatures.Gamble.Mohka.streak.on = "l"

Creatures.Gamble.Mohka.questiongetnext = Crystalline.maaelle('div',0,0,1/2,1/2,Creatures.Gamble.Mohka).ray("Get new questions").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){


}.bind(this))

Creatures.Gamble.Mohka.Questions = Crystalline.maaelle('div',1/2,0,1/2,1,Creatures.Gamble.Mohka)


Creatures.Gamble.Mohka.question1 = Crystalline.maaelle('div',0,0,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q1t1 = Crystalline.maaelle('div',2/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t1.sunaera(),amt)

}.bind(this)).invis()
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.q1t2 = Crystalline.maaelle('div',5/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount1 = Crystalline.maaelle("aera",2/7,1/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


Creatures.Gamble.Mohka.question2 = Crystalline.maaelle('div',0,4/7,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q2t1 = Crystalline.maaelle('div',2/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t1.sunaera(),amt)
Creatures.Gamble.Mohka.q2t1.sen = ""

}.bind(this)).invis()
Creatures.Gamble.Mohka.q2t2 = Crystalline.maaelle('div',5/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount2 = Crystalline.maaelle("aera",2/7,5/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


return Creatures.Gamble.Mohka
}.bind(this)

Creatures.Gamble.Aerakormaa = function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)

return hema
}.bind(this)





























Creatures.Leaderboard = {}
Creatures.Leaderboard.maa = function(hem,x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.type = hem
hema.Tani = Crystalline.maaelle('div',0,0,1,1/7,hema).ray(hem).vcenter().rhap("7","255,255,255,1","1","solid")
return hema
}.bind(this)










































Creatures.Bulletin = {}
Creatures.Bulletin.maa = function(x,y,w,h,ano){
Creatures.Bulletin.Mohka = Crystalline.maaelle('div',x,y,w,h,ano).rhap("7","255,255,255,1","1","solid")
Creatures.Bulletin.Mohka.JustReleasedItemsTani = Crystalline.maaelle('div',0,0,1,1/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid").ray("Just Released! (within 72hours)").vcenter()

Creatures.Bulletin.Mohka.JustReleasedItems = Crystalline.maaelle('div',0,1/9,1,4/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid")
Creatures.maaLleslai("Dab","Released","Left",100,0,0,1,1,Creatures.Bulletin.Mohka.JustReleasedItems,"","Nothing in the last 72 hours.")

Creatures.Bulletin.Mohka.WelcomeNewMembers = Crystalline.maaelle('div',0,5/9,1,2/9,Creatures.Bulletin.Mohka).ray("Welcome New Members").vcenter().rhap("0","255,255,255,1","1","solid")

Creatures.Bulletin.Mohka.RememberYourPoints = Crystalline.maaelle('div',0,7/9,1,2/9,Creatures.Bulletin.Mohka).ray("Remember Your Points").vcenter().rhap("0","255,255,255,1","1","solid").eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))

return Creatures.Bulletin.Mohka
}.bind(this)































Creatures.maaLleslai = function(hemdal,hemsort,slideway,slidespeed,x,y,w,h,ano,mcorsa,mtani){
let hema = Crystalline.maaelle('div',x,y,w,h,ano).rhap("0","255,255,255,1","1","solid")
hema.type = hemdal
hema.sort = hemsort
hema.slideway = slideway
hema.slidespeed = slidespeed

hema.slideHolder = Crystalline.maaelle('div',0,0,16/18,1,hema).dalcorsa("255,255,255,1").front("3").flow("o").dalcorsa(mcorsa)
hema.slides = []

hema.slideHolderEmpty = Crystalline.maaelle('div',0,0,1,1,hema.slideHolder).vcenter().ray(mtani).invis().aeraAlign("center").aeraeren(28).dalcorsa("0,0,0,0.8")



hema.onSlide = 0
hema.autoplaying = "o"


hema.sliderele = []
hema.seconds = 0

hema.rele = setInterval(function(){
if(hema.slides.length > 0){
hema.slideHolderEmpty.invis()
}else{hema.slideHolderEmpty.vis()}
for(i=0;i<hema.sliderele.length;i++){
hema.sliderele[i]()
}},1000)
hema.slidewidth = 1000
hema.heartdrumsen = 0
hema.heartdrum = setInterval(function(){
if(hema.autoplaying == "o" && hema.slides.length > 0){
hema.heartdrumsen++
if(hema.heartdrumsen>hema.slides.length*hema.slidewidth){
hema.heartdrumsen=0
hema.slideHolder.scroll({
left: hema.heartdrumsen,
top:0,
behavior: "instant",
})
}else{
hema.slideHolder.scroll(hema.heartdrumsen,0)
}
}
}.bind(this),hema.slidespeed)

hema.CreateSlide = function(hemb,time,last){
hemb.Mohka = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1")
hemb.Mohka.Title = Crystalline.maaelle('div',1/9,0,7/9,1/7,hemb.Mohka).ray(hemb.ShowotronTitle).vcenter()
hemb.Mohka.Image = Crystalline.maaelle('div',0,1/7,1,4/7,hemb.Mohka).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hemb.Mohka.Countdown = Crystalline.maaelle('div',1/9,2/7,7/9,2/7,hemb.Mohka).vcenter()



if(hema.sort=="Upcoming"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = time-now
if(when > 0){
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)

}else{
hemb.Mohka.Countdown.ray(`<span style='color:rgb(255,215,105)'>Just Released!</span>`)

}
})
}

if(hema.sort=="Released"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = now-time
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)
})
}





hemb.Mohka.Description = Crystalline.maaelle('div',0,5/7,1,2/7,hemb.Mohka).ray(hemb.ShowotronDescription).vcenter()
let hemlink = Crystalline.maaelle('div',0,0,1,1).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hema.slideHolder.add(hemb.Mohka,hemlink,last)
}.bind(this)

hema.getSlidesFromServer = async function(){
await Creatures.magicspell("getEntries",{},hema.getSlidesFromServerXX)   
  }

hema.getSlidesFromServerXX = async function(hem){
let vslides = hem.entries.split(",")
for(i=0;i<vslides.length;i++){
hema.getSlideFromServer(vslides[i],"l",i,vslides.length)
}
}.bind(this)





hema.getSlideFromServer = async function(hemx,last,sen,vsen){
await Creatures.magicspell("loadEntry",{entrylocation:hemx},function(hem){
let datas = hem.entry.split("~*^*~")
let hemb = {}
hemb.entrynumber = datas[0]
hemb.entryname = datas[1]
hemb.entryimage = datas[2]
hemb.entrydescription = datas[3]
hemb.entryattributes = datas[4]
hemb.entrytype = datas[5]
hemb.ekkattributes = [] 
let vattribute = hemb.entryattributes.split("~x*^*x~")
for(i=0;i<vattribute.length;i++){
let atr = vattribute[i].split("~!*^*!~")
hemb.ekkattributes.push(atr)
let f = atr[0]
let ood = atr[1]
hemb[f] = ood
}

if(hemb.entrytype == hema.type){
if(hema.sort=="Upcoming"){

let nowdate = Date.now()
let onShowotron = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
let daysbefore = parseInt(hemb.DaysBeforeReleaseAddToGalleryAndShowotron) * 24 * 60 * 60 * 1000
if(day-daysbefore < now && day > now - (24*60*60*1000)){
onShowotron = "o"
}
if(onShowotron == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}

}

}
if(hema.sort=="Released"){
let nowdate = Date.now()
let onJustReleased = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
if(now > day && now < day +3*(24*60*60*1000)){
onJustReleased = "o"
}
if(onJustReleased == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}
}//Released


}


}//Dab
if(sen == vsen-1 && hema.slides.length > 0){hema.CreateSlide(hema.SunHemb,hema.SunTime,"o")}


}.bind(this))
 }


hema.slideHolder.add = function(hem,hemlink,last){
if(last=="l"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hemlink.lo(0,(1/10)+(1/5)*hema.slides.length,1,1/10)
hemlink.slidesen = hema.slides.length
hemlink.eshe(function(){
if(hema.autoplaying=="l"){
hema.autoplaying = "o"
}


if(Math.floor(hema.slidewidth*hemlink.slidesen) != Math.floor(hema.slideHolder.scrollLeft)){
hema.autoplaying = "l"
hema.slideHolder.scroll({
left: hema.slidewidth*hemlink.slidesen,
top:0,
behavior: "smooth",
})
}




}.bind(this))
hem.eshe(function(){
alert("hi")

}.bind(this))
hema.vli.ano(hemlink)
hema.slides.push(hem)
}
if(last=="o"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hem.eshe(function(){
alert("hi")

}.bind(this))
//hema.slides.push(hem)
}
}.bind(this)



hema.vli = Crystalline.maaelle('div',16/18,0,2/18,1,hema).dalcorsa("0,0,0,0.8").flow("o").front("5")
hema.getSlidesFromServer()


return hema
}.bind(this)


















Creatures.RTree = function(x,y,w,h,ano,leafsia,leaferen){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.MyRefCode = Crystalline.maaelle('div',1/2,0,1/2,1,hema)
hema.vLeaf = Crystalline.maaelle('div',0,0,1/2,1,hema)

hema.getLeafDalcorsa = function(){
let lf = Crystalline.fate(leaferen)
let lc = leafsia+lf+".png"
return lc
}.bind(this)

hema.vLeaf.leaf0 = Crystalline.maaelle('div',0,0/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(leafsia+"X.png").dalcorsalsen().dalcorsavcenter()
let ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf1 = Crystalline.maaelle('div',0,1/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf2 = Crystalline.maaelle('div',0,2/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf3 = Crystalline.maaelle('div',0,3/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf4 = Crystalline.maaelle('div',0,4/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()

return hema
}.bind(this)














let previewshadow = Crystalline.maaelle('div',0,0,1,1).sunano().front("2").dalcorsa("0,0,0,0.5")
previewshadow.words = Crystalline.maaelle('div',2/10,2/10,6/10,6/10,previewshadow).rhaprele("24").dalcorsa("0,0,0,1")

previewshadow.wordsNo = Crystalline.maaelle('div',2/10,2/10,6/10,6/10,previewshadow).rhaprele("24").dalcorsa("0,0,0,1").invis()

previewshadow.wordsNo.a = Crystalline.maaelle('div',0,1/10,1,1/10,previewshadow.wordsNo).ray("Then grow up faster!").vcenter()
previewshadow.wordsNo.img = Crystalline.maaelle('div',2/10,3/10,6/10,4/10,previewshadow.wordsNo).dalcorsascroll().dalcorsaloeren().dalcorsa("https://user-uploads.perchance.org/file/d42266b55a7ffe049f3f308a14eba813.png").dalcorsalsen()
previewshadow.wordsNo.n = Crystalline.maaelle('div',1/5,8/10,3/5,1/10,previewshadow.wordsNo).corsaera("255,0,0,1").ray("Back").eshe(function(){
previewshadow.words.vis()
previewshadow.wordsNo.invis()
}.bind(this)).vcenter().rhap("25","255,0,0,1","1","solid")

previewshadow.words.a = Crystalline.maaelle('div',0,1/10,1,1/10,previewshadow.words).ray("Are you 21+ ?").vcenter()
previewshadow.words.img = Crystalline.maaelle('div',2/10,3/10,6/10,4/10,previewshadow.words).dalcorsascroll().dalcorsaloeren().dalcorsa("https://user-uploads.perchance.org/file/52320f048f093d23a738eaa4cb74a33a.png").dalcorsalsen()
previewshadow.words.y = Crystalline.maaelle('div',1/5,8/10,1/5,1/10,previewshadow.words).corsaera("0,255,0,1").ray("Yes").eshe(function(){
previewshadow.invis()
}.bind(this)).vcenter().rhap("25","0,255,0,1","1","solid")
previewshadow.words.n = Crystalline.maaelle('div',3/5,8/10,1/5,1/10,previewshadow.words).corsaera("255,0,0,1").ray("No").eshe(function(){
previewshadow.wordsNo.vis()
previewshadow.words.invis()
}.bind(this)).vcenter().rhap("25","255,0,0,1","1","solid")
Users.amISignedInInvis(previewshadow)
Creatures.addUpdatesBottomBar()


//Store.createStore()

Users.viewUp()



Creatures.Bulletin.maa(0,5/12,1,7/12,SunMohka.Aera)

Creatures.maaLleslai("Dab","Upcoming","Left",40,0,0,1,5/12,SunMohka.Aera,"https://allolovespower.github.io/RosinVault/Corsa/2.png","Nothing coming soon at all!")





let homeli = Crystalline.maaelle('div',0,0,1,1).ray("Home").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","home")
}.bind(this))
SunMohka.TopBar.Add(homeli)

let galleryli = Crystalline.maaelle('div',0,0,1,1).ray("Vault").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","vault")
}.bind(this))
SunMohka.TopBar.Add(galleryli)

let gambleli = Crystalline.maaelle('div',0,0,1,1).ray("Gamble").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))
SunMohka.TopBar.Add(gambleli)

Users.createSignInBar("S")

let referalli = Crystalline.maaelle('div',0,0,1,1).ray("Referal").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","refer")
}.bind(this))
SunMohka.TopBar.Add(referalli)
</script></body>
</html>&&&&&&<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RosinVault</title>
   <script src="three.min.js"></script>
   <script src="GLTFLoader.js"></script>
  </head>
  <body><script>window.siartani = "gamble"

window.siartanilo = "RosinVault"

window.Crystalline = {

raphos: function(hem){
 





hem.aeralign = function(hema){if(hema=="o" || hema==undefined){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }



















hem.vcenter = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
hem.style.alignItems = "center"
         return hem
         }

hem.vcenterles = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
         return hem
         }

hem.vcenterphel = function(){hem.style.display = "flex"
hem.style.alignItems = "center"
         return hem
         }

hem.vsel = function(){hem.style.display = "flex"
hem.style.justifyContent = "left"
hem.style.textAlign = "left"
         return hem
         }

hem.vles = function(){hem.style.display = "flex"
hem.style.textAlign = "right"
hem.style.justifyContent = "right"
         return hem
         }



hem.eshe = function(hema){
if(hem.hematype == "select"){
hem.onchange = hema}else{
hem.onclick = hema
}
          return hem
          }



















































































hem.dalcorsalsen = function(){hem.style.backgroundRepeat = "no-repeat"
                                      
         return hem
         }





hem.dalcorsavcenter = function(){hem.style.backgroundPosition = "center"
                                     
         return hem
         }















hem.dalcorsa = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.Background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

         hem.corsadal = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"} 
         return hem
         }

















hem.noselect = function(hema){
               hema.style.userSelect = "none"
          return hem}

hem.border = function(radius,color,width,style){
          hem.style.borderRadius = "7px"
          hem.style.borderColor = "rgba(255,255,255,1)"
          hem.style.borderWidth = "3px"
          hem.style.borderStyle = "double"
          if(arguments.length>0){hem.style.borderRadius = radius}
           if(arguments.length>1){hem.style.borderColor = "rgba("+color+")"}
           if(arguments.length>2){hem.style.borderWidth = width}
           if(arguments.length>3){hem.style.borderStyle = style}
           return hem
         }

         

         

         

         hem.ona = function(){
         for(this.iuuuui=0;this.iuuuui<arguments.length;this.iuuuui++){
           hem.removeChild(arguments[this.iuuuui]) 
          }
          return hem
         }

         hem.font = function(hema){hem.style.fontFamily = hema
          return hem
          }

          
         
         
         
         
         
         
         
         


         
      
         
         
         




  hem.dalcorsascroll = function(){hem.style.backgroundAttachment = "scroll"
                                     
         return hem
         }

hem.white = function(){hem.style.whiteSpace = "pre"
                                     
         return hem
         }


hem.dalcorsalscroll = function(){hem.style.backgroundAttachment = "fixed"
                                      
         return hem
         }


hem.dalcorsaliscroll = function(){hem.style.backgroundAttachment = "local"
                                      
         return hem
         }


hem.dalcorsasen = function(){hem.style.backgroundRepeat = "repeat"
                                      
         return hem
         }



hem.dalcorsaeren = function(){hem.style.backgroundSize = "cover"
                                      
         return hem
         }



hem.dalcorsaloeren = function(){hem.style.backgroundSize = "contain"
                                      
         return hem
         }

hem.dalcorsahem = function(){hem.style.backgroundSize = "100% 100%"
                                      
         return hem
         }



         hem.textEdge = function(hema){if(hema=="o"){hem.style.whiteSpace = "wrap"}
                                       if(hema=="l"){hem.style.whiteSpace = "nowrap"}
         return hem
         }
              



hem.koil = function(){hem.style.userSelect = "none"
                                      
         return hem
         }



hem.front = function(hemb){hem.style.zIndex = hemb
                                      
         return hem
         }

hem.dal = function(hemb){hem.type = hemb
                                      
         return hem
         }





































































































































hem.ray = function(hema){












let hn = ""
if(hema != undefined){hn=hema}
         if(hem.hematype == "textarea"){hem.value = hn}
if(hem.hematype == "aera"){hem.value = hn}
if(hem.hematype == "notaera"){hem.value = hn}
if(hem.hematype == "select"){hem.value = hn}
if(hem.hematype == "input"){hem.value = hn}
if(hem.hematype == "div"){hem.innerHTML = hn}
if(hem.hematype == "button"){hem.textContent = hn}
if(hem.hematype == "option"){hem.textContent = hn
hem.value = hn}
         return hem
         }







hem.aeraeren = function(hema){hem.style.fontSize = hema+"px"
         return hem
         }
hem.textSize = function(hema){hem.style.fontSize = hema 
         return hem
         }



















hem.sunano = function(hema){
               document.body.appendChild(hem)
          return hem}

















hem.ano = function(){
         for(this.iuuui=0;this.iuuui<arguments.length;this.iuuui++){
           hem.appendChild(arguments[this.iuuui]) 
          }
          return hem
         }

























hem.vis = function(){hem.style.display = "flex"
                                      
         return hem
         }

hem.visible = function(){hem.style.display = "flex"
                                      
         return hem
         }







hem.invis = function(){hem.style.display = "none"
                                      
         return hem
         }
hem.invisible = function(){hem.style.display = "none"
                                      
         return hem
         }




















hem.sunaera = function(){
if(arguments.length == 1){hem.innerHTML = arguments[0]
         return hem
         }
if(arguments.length == 0 && hem.hematype == "textarea"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "select"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "input"){
return hem.value
}
if(arguments.length == 0 && hem.hematype != "textarea"){
         return hem.innerHTML
         }
}





hem.aeradal = function(hema){hem.style.fontFamily = hema
         return hem
         }


hem.aeraeshe = function(hema){hem.oninput = hema
          return hem
          }





hem.aeracorsa = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }
hem.textColor = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }









         










hem.aeraglow = function(hema){hem.style.textShadow = "0px 0px 4px rgba(" + hema +")"
         return hem
         }











hem.ama = function(hema){hem.placeholder = hema 
         return hem
         }

hem.hint = function(hema){hem.placeholder = hema 
         return hem
         }



















hem.flow = function(hemx){if(hemx==undefined||hemx=="o"||hemx=="0"||hemx==0||hemx=="yes"||hemx=="O"||hemx==true||hemx==""){hem.style.overflow = "auto"}
if(hemx=="l"||hemx=="L"||hemx==1||hemx=="no"||hemx==false){hem.style.overflow = "hidden"}
if(hemx!=undefined){

if(hemx.toLowerCase()=="lleslai"){hem.style.overflowX = "auto"}
if(hemx.toLowerCase()=="phellai"){hem.style.overflowY = "auto"}



}

hem.style.scrollBehavior = "smooth"
          return hem}











hem.aerasun = function(hema){hem.style.textShadow = "0 0 8px rgba("+hema+")"
         return hem
         }





hem.aeraAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }

hem.textAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }




































hem.corsaera = function(hema){
hem.style.color = "rgba("+hema+")"
         return hem
         }




hem.lo = function(x,y,w,h){
          this.lo(hem,x,y,w,h)
return hem
         }.bind(this)

hem.loles = function(x){
          this.loles(hem,x)
return hem
         }.bind(this)

hem.losel = function(x){
          this.losel(hem,x)
return hem
         }.bind(this)

hem.lophel = function(x){
          this.lophel(hem,x)
return hem
         }.bind(this)

hem.lolehp = function(x){
          this.lolehp(hem,x)
return hem
         }.bind(this)

hem.getWidth = function(){
let hema = hem.getBoundingClientRect()

return hema.width
}.bind(this)


hem.getHeight = function(){
let hema = hem.getBoundingClientRect()

return hema.height
}.bind(this)












































hem.rai = function(hema){hem.style.opacity = hema
         return hem
         }



























































hem.rhap = function(radius,color,width,style){
          hem.style.borderRadius = radius + "px"
          hem.style.borderColor = "rgba("+color+")"
          hem.style.borderWidth = width+"px"
          hem.style.borderStyle = style
           return hem
         }





hem.rhapdal = function(hema){hem.style.borderStyle = hema 
         return hem
         }
         hem.rhapcorsa = function(hema){hem.style.borderColor = "rgba("+hema+")" 
         return hem
         }
         hem.rhaperen = function(hema){hem.style.borderWidth = hema
         return hem
         }

hem.rhaprele = function(hema){hem.style.borderRadius = hema+"px"
         return hem
         }
 





hem.borderradiuses = function(tl,tr,br,bl){
hem.style.borderTopLeftRadius = tl+"px"
hem.style.borderTopRightRadius = tr+"px"
hem.style.borderBottomRightRadius = br+"px"
hem.style.borderBottomLeftRadius = bl+"px"
return hem
}


hem.borhap = function(padding){
          hem.style.padding = padding + "px"
           return hem
         }





























































































return hem
        },


seall: function(aera,siar){Kt.seall(aera,siar)},











melosiar: function(siar,hemfun){
    var client = new XMLHttpRequest()
     client.open('GET',siar)
   client.onreadystatechange = function(){
if(client.readyState == 4 && client.status == 200){hemfun(client.responseText)}}
client.send()
   },



















copyAssets: function(aera){Kt.copyAssets(aera)},


hCopyAssets: function(aera){Kt.hCopyAssets(aera)},

copyAssetsCal: function(aera){Kt.copyAssetsCal(aera)},


hCopyAssetsCal: function(aera){Kt.hCopyAssetsCal(aera)},

reloadprogramcal: function(){Kt.reloadprogramcal()},





say: function(hem){Kt.say(hem)},











lseall: function(siar){return Kt.lseall(siar)},






















maaRaynotaera: function(aeralo,x,y,w,h,ano){
let hema = Crystalline.maaelle('aera',x,y,w,h,ano).aeraeshe(function(){
Crystalline.seall(hema.sunaera(),hema.siar)

}.bind(this))

hema.siar = aeralo
hema.ray(Crystalline.lseall(hema.siar))

























},








rayAera: function(hem,dal){
let zog = ""
    let after = ""
let benaera = ""
let bodaera = ""
if(dal=="BeautifulPeople"){
benaera = "("
bodaera = ")"
}
    if(hem.indexOf("in the styles of the artists")!=-1){
    zog = hem.substring(0,hem.indexOf("in the styles of the artists"))
    after = hem.substring(hem.indexOf("in the styles of the artists"),hem.length)
    }else{
      zog = hem
    }
  let maera = hem.split(" ")
  let which = Crystalline.fate(maera.length)
let sen = Crystalline.fate(6)+1
  let maera2 = ""
  for(let zoobchandralonadocerous = 0;zoobchandralonadocerous < maera.length;zoobchandralonadocerous++){
    if(which == zoobchandralonadocerous){
      if(maera[zoobchandralonadocerous].substring(0,2)=="((" || maera[zoobchandralonadocerous].substring(maera[zoobchandralonadocerous].length-2,maera[zoobchandralonadocerous].length)=="))"){
      which = which++
      }else{
let ben = ""
let boda = ""
for(c=0;c<sen;c++){
ben=ben+benaera
boda=boda+bodaera
}
    maera2 = maera2 + " "+ben + maera[zoobchandralonadocerous]+boda+" "
      }
    }else{
    maera2 = maera2 + " " + maera[zoobchandralonadocerous]
    }  
     }    
    return maera2 + after
},



generateSeed: function(){
   let seed = Crystalline.fate(4294967295)+1
   return seed
  },


BeautifulGallery: function(x,y,w,h,ano){
let galleria = Crystalline.maaelle('div',x,y,w,h,ano)
galleria.settings = {}
  galleria.settings.gallery = true
  galleria.settings.sort = "recent"
  galleria.settings.adaptiveHeight = true
  galleria.settings.style = "background-color:rgba(0,0,0,0)"
  galleria.settings.forceColorScheme = "dark"
let c = image(galleria.settings).evaluateItem
  galleria.ray(c)
},

BeautifulStory: function(ask,x,y,w,h,ano){
let textia = Crystalline.maaelle('div',x,y,w,h,ano)
textia.settings = {}
 textia.settings.instruction = ask  
let c = aitext(textia.settings)
  textia.ray(c)
},

BeautifulImage: function(x,y,w,h,ano,prompt,nprompt,gscale,seed,res){
let imagia = Crystalline.maaelle('div',x,y,w,h,ano)
imagia.settings = {}
  imagia.settings.prompt = prompt
  imagia.settings.negativePrompt = nprompt
 imagia.settings.guidanceScale = gscale
 imagia.settings.seed = seed
 imagia.settings.resolution = res
let c = image(imagia.settings).evaluateItem
  imagia.ray(c)
//YTILIBATAPMOC
},




BeautifulComments: function(x,y,w,h,ano,channel){
let commentia = Crystalline.maaelle('div',x,y,w,h,ano)
commentia.settings = {}
  commentia.settings.spiritguides = true
  commentia.settings.loadFonts = "Emilys Candy"
 commentia.settings.channel = channel
 commentia.settings.commentPlaceholderText = "meow"
 commentia.settings.submitButtonText = "meow"
commentia.settings.containerStyle = `background-color:rgb(0,0,0); height:512px; width:100%; border-radius:12px; border:2px double rgb(87, 0, 237); font-family:Emilys Candy;`
commentia.settings.messageBubbleStyle = `background:rgba(255,255,255,0.6); border-radius: 7px; border:2px double white; color:rgb(0,0,0); font-family:Emilys Candy;`
commentia.settings.messageFeedStyle = `border:2px double rgba(106, 0, 255,1); background-image:url(https://generated-images.perchance.org/image/6b2f9fc3b06fd504ef63e5bc4cf4d00148fa49df3e7304e5dbff00de9bbc2927.jpeg); border-radius: 7px; font-family:Emilys Candy;`
commentia.settings.inputAreaStyle = `background-color:rgb(0,0,0); font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(255,255,255);`
commentia.settings.submitButtonStyle = `width:100%;background-color: rgba(61, 242, 255,1); border:none; font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(0,0,0)`
commentia.settings.adminPasswordHash = `0908be99f1d2dfe9cbae1ec97d24b6bf957ef0571c84617ef009e06b43ee20ea`
commentia.settings.adminFlair = `meow`
commentia.settings.width = `400`
commentia.settings.bannedWords = "cbat"
//commentia.settings.customEmojis = {import:allos-emoji-list}
commentia.settings.loneCustomEmojiSizeMultiplier = "3"
commentia.settings.customEmojiSize = "1.2"
let c = comments(commentia.settings).evaluateItem
  commentia.ray(c)
//YTILIBATAPMOC
},





  
  
  
  
  
  
  

  
  
  
  
  
    
  
  


  

  
  
  


melosia: function(hem){return Kt.melosia(hem).split(",")},
















downloadassets: function(hemlo,hemtani){Kt.downloadassets(hemlo,hemtani)},
hseall: function(aera,siar){Kt.hseall(aera,siar)},
hlseall: function(siar){return Kt.hlseall(siar)},
        seallsiar: function(siabe,siabo){Kt.seallsiar(siabe,siabo)},
        rasiar: function(siabe){return Kt.rasiar(siabe)},
hrasiar: function(siabe){return Kt.hrasiar(siabe)},
rasia: function(siabe){return Kt.rasia(siabe)},
        seallsia: function(siabe,siabo){Kt.seallsia(siabe,siabo)},
celestiall: function(siabe,siabo){Kt.celestiall(siabe,siabo)},
        seallver: function(siabe,siabo){Kt.seallver(siabe,siabo)},
        kortanisia: function(siabe,siabo){Kt.kortanisia(siabe,siabo)},
hkortanisia: function(siabe,siabo){Kt.hkortanisia(siabe,siabo)},
        
maasia: function(hem){Kt.maasia(hem)},
hmelosia: function(hem){return Kt.hmelosia(hem).split(",")},
sunseall: function(aera,siar){Kt.sunseall(aera,siar)},
sunlseall: function(siar){return Kt.sunlseall(siar)},
        sunmelosia: function(hem){return Kt.sunmelosia(hem).split(",")},






















ekklinere: function(hemaera,hemekk){
let sen = hemekk.indexOf(hemaera)
if(sen != -1){
  hemekk.splice(sen, 1)
}
return hemekk
},
ekklieren: function(hemaera,hemekk){
hemekk.push(hemaera)
return hemekk
},
ekklira: function(hemaera,hemekk){
if(hemekk.includes(hemaera)){return "o"}else{return "l"}
},











componentToHex: function(c) {
  var hex = c.toString(16)
  return hex.length == 1 ? "0" + hex : hex
},

 rgbToHex: function(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b)
},



hemThree: function(tthen,tanimate,x,y,w,h,hemano){
let hema = Crystalline.maaelle('div',x,y,w,h,hemano)

Crystalline.Corsan = hema
hema.threescript = tanimate
hema.threeobjects = []
hema.threeactive = false
hema.Textures = []
hema.animate = function(){ 	
                      	if(hema.threeactive == true){
for(i=0;i<hema.threeobjects.length;i++){
hema.threeobjects[i]()
}
hema.threescript()
//hema.ORBITCONTROLS.update()
hema.RENDERER.render( hema.SCENE, hema.CAMERA )
}
let ani = hema.animate.bind(this)
requestAnimationFrame( ani )
}.bind(this)

hema.THREE = THREE

hema.TextureLoader = new hema.THREE.TextureLoader()
//hema.GLTFLoader = new this.THREE.GLTFLoader()

let vww = Math.round(w*hemano.clientWidth)
let vhh = Math.round(h*hemano.clientHeight)

     hema.SCENE = new hema.THREE.Scene()

hema.LIGHT = new hema.THREE.AmbientLight(0xffffff,0.3)
hema.SCENE.add(hema.LIGHT)

hema.SUN = new hema.THREE.PointLight( 0xffffff, 1, 70 )
hema.SUN.position.set( 13, 20, 13 )
hema.SUN.castShadow = true
hema.SUN.shadow.mapSize.width = 26
hema.SUN.shadow.mapSize.height = 26
hema.SUN.shadow.camera.near = 1
hema.SUN.shadow.camera.far = 50
hema.SCENE.add( hema.SUN )

    hema.CAMERA = new hema.THREE.PerspectiveCamera( 90, vww/ vhh, 0.1, 1000 )
hema.cameraX = 0
hema.cameraY = 0
hema.cameraZ = 0
hema.CAMERA.position.set(0, 0, 0)



     hema.RENDERER = new hema.THREE.WebGLRenderer()
hema.RENDERER.shadowMap.enabled = true
      hema.RENDERER.setSize(vww, vhh)
hema.RENDERER.setPixelRatio(window.devicePixelRatio)

hema.ORBITCONTROLS = new hema.THREE.OrbitControls(hema.CAMERA,hema.RENDERER.domElement)
hema.ORBITCONTROLS.enabled = false
//hema.ORBITCONTROLS.enableDamping = true
//hema.ORBITCONTROLS.dampingFactor = 0.05
hema.ORBITCONTROLS.screenSpacePanning = false
hema.ORBITCONTROLS.minDistance = 30
hema.ORBITCONTROLS.maxDistance = 100

hema.T = hema.RENDERER.domElement
Crystalline.raphos(hema.T)
hema.T.lo(0,0,1,1)
hema.front(999999999999)
 hema.ano( hema.T )


















hema.createUnit = function(x,y,z,who){

let hemb = {}
hemb.represents = who
hema.tani = who
hemb.x = x
hemb.y = y
hemb.z = z
hemb.variant = ""
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hema.b,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)



hemb.removeFromMap = function(){
this.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)


hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)
}
return hemb
}.bind(this)









hema.SunRaphos = function(hemb){
























































































































































































































hemb.lookAtMe = function(){
hema.CameraLookAtObject(hemb)
return hemb
}.bind(this)














































































































hemb.position = function(rx,ry,rz){
hemb.x = rx
hemb.y = ry
hemb.z = rz
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)



hemb.wireframe = function(hem){
if(hem=="o"){
hemb.materi1.wireframe = true
}else{
hemb.materi1.wireframe = false
}
}.bind(this)



hemb.texturewrap  = function(img){
      
                   
           let mewta = new hema.THREE.TextureLoader().load(img)
                    mewta.wrapS = mewta.wrapT = hema.THREE.RepeatWrapping
                    
                    hemb.materi1.map = mewta         
                    hemb.materi1.needsUpdate = true
                  }.bind(this)




return hemb
}.bind(this)
















































































































































































































hema.maaTree = function(x,y,z){

let hemb = hema.maaS(x,y,z,2,90,2)
hema.maaS(x+6,y+14,z,10,2,2)
hema.maaS(x,y+20,z+6,2,2,10)
hema.maaS(x-6,y+26,z,10,2,2)
hema.maaS(x,y+32,z-6,2,2,10)
hema.maaS(x+6,y+38,z,10,2,2)
return hemb
}.bind(this)



hema.maaS = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(xp, yp, zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
return hemb
}.bind(this)









Crystalline.Corsan.maaLight = function(x,y,z,strength){
let light = new THREE.PointLight(0xffffff,strength)
light.position.set(x,y,z)
hema.SCENE.add(light)
}.bind(this)


Crystalline.Corsan.maaInvisithing = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(255,255,255)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(hemb.xp, hemb.yp, hemb.zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hemb.aaM()
return hemb
}.bind(this)






















































hema.cameraSpin = function(tani){
hema.ORBITCONTROLS.enabled = true
return hema
}.bind(this)




hema.cameraNonspin = function(tani){
hema.ORBITCONTROLS.enabled = false
return hema
}.bind(this)









hema.maaMaven = function(x,z,type,who){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.variant = type
hemb.present = "o"
if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{
let hm = Crystalline.melosia(type+"/Maven/Corsa")
let wm = Crystalline.fate(hm.length)
let whoo = hm[wm].replace(".png","") +"Maven"
let tew = hema.Textures[whoo]
hemb.variant = hm[wm]

if(type != "Nif"){
hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)

hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
}else{

let whooo = who +"Hazel"
let tew2 = hema.Textures[whooo]

hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })
hemb.materi2 = new hema.THREE.SpriteMaterial({ 
	map: tew2,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)
hemb.mesh2 = new hema.THREE.Sprite(hemb.materi2)
hemb.mesh2.scale.set(0.3,0.3,0.3)
hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
hema.SCENE.remove(hemb.mesh2)
hemb.materi2.dispose()
hemb.mesh2 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hemb.mesh2.position.set(hemb.x,hemb.y+1,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hema.SCENE.add(hemb.mesh2)
}

}


return hemb
}.bind(this)


































































hema.maaEditSphere = function(x,z){

let hemb = {}
hemb.x = x
hemb.y = 3
hemb.z = z

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.SphereGeometry(0.35)

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){

hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.rotatia = function(){
hemb.mesh1.rotation.x = hemb.mesh1.rotation.x+0.01
}.bind(this)
hema.threeobjects.push(hemb.rotatia)



return hemb
}.bind(this)

























































































hema.CameraLookAtPosition = function(x,y,z){
let weW = new hema.THREE.Vector3(x,y,z)
hema.CAMERA.lookAt(weW)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraPosition = function(x,y,z){
hema.cameraX = x
hema.cameraY = y
hema.cameraZ = z
hema.CAMERA.position.set(x,y,z)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraTopDown = function(){
//hema.CAMERA
}.bind(this)

hema.CameraVFov = function(hem){
hema.CAMERA.fov = hem
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraLookAtObject = function(hemc){
hema.CAMERA.lookAt(hemc.mesh1.position)
}.bind(this)

hema.cameraright = function(hem){
hema.cameraX = hema.cameraX+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraleft = function(hem){
hema.cameraX = hema.cameraX-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameradown = function(hem){
hema.cameraZ = hema.cameraZ+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraup = function(hem){
hema.cameraZ = hema.cameraZ-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)



hema.CameraAutoTurnaround = function(hemb){
if(arguments.length == 1){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtObject(hemb)
}.bind(this)
hema.threeobjects.push(rotatia)
}
if(arguments.length == 3){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtPosition(arguments[0],arguments[1],arguments[2])
}.bind(this)
hema.threeobjects.push(rotatia)
}


}.bind(this)











hema.maaConversion = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.variant = who
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)






















hema.maaHazel = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z

if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let whoo = who +"Hazel"

let tew = hema.Textures[whoo]



hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)





























hema.maaSen = function(x,z,type){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 1
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.materi1 = ""
if(type.substring(0,4)=="Wall"){
hemb.y=2
hemb.ctype = hemb.ctype.replace("Wall","")
}
if(type.substring(0,9)=="Superwall"){
hemb.y=3
hemb.ctype = hemb.ctype.replace("Superwall","")
}
if(type.substring(0,3)=="Pit"){
hemb.y=0
hemb.ctype = hemb.ctype.replace("Pit","")
}

if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

if(type.substring(0,7)!="Culture"){
let whoo = hemb.ctype +"Sen"
let tew = hema.Textures[whoo]

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	map: tew,
transparent: true
 })
}else{
let hcolor = type.substring(7,type.length)
hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: hcolor,
transparent: true,
wireframe: true
 })

}


hemb.shape1  = new hema.THREE.BoxGeometry( hemb.xw, hemb.yw, hemb.zw )
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){





hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.shape1.dispose()
hemb.mesh1 = undefined

}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)



}

return hemb
}.bind(this)



















































      tthen()
    
hema.threeactive = true
hema.animate()

return hema
},











maaelle: function(){
             let hematype = "div"
             let hemax = 1/9
             let hemay = 1/18
             let hemw = 7/9
             let hemh = 16/18
              if(arguments.length>0){hematype = arguments[0]
              if(arguments[0]=="aera"){hematype = "textarea"}}
              if(arguments.length>1){hemax = arguments[1]}
              if(arguments.length>2){hemay = arguments[2]}
              if(arguments.length>3){hemw = arguments[3]}
              if(arguments.length>4){hemh = arguments[4]}
              let hema = document.createElement(hematype)
              hema.hematype = hematype
              if(hema.hematype == "div"){
               hema.style.userSelect = "none"
              }
             this.raphos(hema)
hema.style.fontFamily = "EmilysCandy"
if(hematype == "option"){
arguments[1].ano(hema)
}else{
             this.lo(hema,hemax,hemay,hemw,hemh)
}
         
             if(arguments.length>5){arguments[5].ano(hema)}
             
hema.dalcorsa("0,0,0,0.0").aeracorsa("255,255,255,1").aeraglow("255,255,255,1")


             return hema
            },




















kiDelete: function(){Kt.kieh(1,0)},
            ki: function(hem){Kt.ki(hem)},
            kiPaste: function(){Kt.kiPaste()},
            kiCopy: function(){Kt.kiCopy()},
            kiCut: function(){Kt.kiCut()},
            kiSelectAll: function(){Kt.kiSelectAll()},
            kiSelect: function(hemben,hemboda){Kt.kiSelect(hemben,hemboda)},
            kiboda: function(hemdistance){return Kt.kiboda(hemdistance)},
            kiben: function(hemdistance){return Kt.kiben(hemdistance)},
            kieh: function(hemben,hemboda){Kt.kieh(hemben,hemboda)},
            kiUp: function(){Kt.kiUp()},
            kiDown: function(){Kt.kiDown()},
            kiLeft: function(){Kt.kiLeft()},
            kiRight: function(){Kt.kiRight()},
            kiUndo: function(){Kt.kiUndo()},
            kiRedo: function(){Kt.kiRedo()},
    
kiSelection: function(){return Kt.kiSelection()},
      


gotowebpage: function(hem){Kt.gotowebpage(hem)},


     readasset: function(hem){
return Kt.readasset(hem)
}, 
exportasset: function(hem,boda){
Kt.exportasset(hem,boda)
}, 
        
        
 














veskaLo: function(tani,hem){
document.location.href = "https://"+tani+".glitch.me/"+hem
},


sensia: function(aera,sia){
let w = Crystalline.melosia(sia)
let an = w.length
if(w[0]==""){an=0}
let re = an.toString()
Crystalline.seall(aera,sia+"/"+re)
},

lo: function(hem,x,y,w,h){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)
                        hem.style.right = this.conversion.percentstring(1-(x+w))
                        hem.style.top = this.conversion.percentstring(y)
                        hem.style.bottom = this.conversion.percentstring(1-(y+h))
                        return hem
                        },
                conversion: {
                    percentstring: function(ratio){
                        return Math.round(ratio*100).toString()+"%"
                    },
                },



loles: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)   
                        return hem
                        },

losel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.right = this.conversion.percentstring(x)   
                        return hem
                        },

lophel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.top = this.conversion.percentstring(x)   
                        return hem
                        },
         
lolehp: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.bottom = this.conversion.percentstring(x)   
                        return hem
                        },










   





lohem: function(hem){
let hema = document.getElementById(hem)

this.raphos(hema)
return hema
},



























fate: function(hsen){
let hema = Math.floor(Math.random()*hsen)
return hema
},



SenNow: function(){
let hema = Date.now()
hema = hema.toString()
return hema
},

Senminutessince: function(since){
let hema = this.SenNow()
let hemaaa = parseInt(hema)-parseInt(since)
return hemaaa
},

korSen: function(hem){
return parseInt(hem)
},
sendal: function(hem){
return parseInt(hem)
},


maaHemSen: function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.year
hema.month
hema.day
hema.hour
hema.minute
hema.second
hema.millisecond
return hema
},

























}

let Kt = {
say: function(hem){alert(hem)},



hseall: function(aera,siar){
localStorage.setItem(siar,aera)
},
hlseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
seall: function(aera,siar){
localStorage.setItem(siar,aera)
},
lseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
        seallsiar: function(siabe,siabo){},
        rasiar: function(siabe){},
rasia: function(siabe){},
        seallsia: function(siabe,siabo){},
        seallver: function(siabe,siabo){},
        kortanisia: function(siabe,siabo){},
        melosia: function(hem){},
hmelosia: function(hem){},
sunseall: function(aera,siar){},
sunlseall: function(siar){},
        sunmelosia: function(hem){},




}






window.mode = ""
if(innerWidth > innerHeight){window.mode = "computer"}else{window.mode = "phone"}

window.SunMohka = Crystalline.maaelle('div',0,0,1,1).sunano().front("1").dalcorsa("0,0,0,1")
SunMohka.Aera = Crystalline.maaelle('div',0,0,1,1,SunMohka).dalcorsa("0,0,0,1")
SunMohka.TopBar = Crystalline.maaelle('div',0,0,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.TopBar.Entries = []
SunMohka.TopBar.Add = function(hem){
SunMohka.Aera.lophel(1/24)
SunMohka.TopBar.vis()
hem.lo((1/5)*SunMohka.TopBar.Entries.length,0,1/5,1)
SunMohka.TopBar.ano(hem)
SunMohka.TopBar.Entries.push(hem)
}.bind(this)
SunMohka.BottomBar = Crystalline.maaelle('div',0,23/24,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.BottomBar.Entries = []
SunMohka.BottomBar.Add = function(hem){
SunMohka.Aera.lolehp(1/24)
SunMohka.BottomBar.vis()
hem.lo((1/5)*SunMohka.BottomBar.Entries.length,0,1/5,1)
SunMohka.BottomBar.ano(hem)
SunMohka.BottomBar.Entries.push(hem)
}.bind(this)



window.Users = {}





Users.coinCorsa = ""






Users.viewUp = async function(){
await Creatures.magicspell("viewUp",{},function(data){})  
  }

Users.refreshMoney = async function(){
await Creatures.magicspell("getMoney",{},function(data){
SunMohka.SignInBar.coinamount.ray(data.money)
})
}.bind(this)



Users.amISignedInvInvis = []
Users.amISignedInInvis = function(hem){
Users.amISignedInvInvis.push(hem)
}.bind(this)

Users.amISignedIn = async function(){
await Creatures.magicspell("amISignedIn",{},function(data){
if(data.signedIn == "o"){
SunMohka.SignInBar.signinliORusername.mode = "Account"
SunMohka.SignInBar.signinliORusername.ray(data.name)
for(i=0;i<Users.amISignedInvInvis.length;i++){
Users.amISignedInvInvis[i].invis()
}
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
}
})
}



Users.signOut = async function(){
await Creatures.magicspell("signOut",{},function(data){
if(siartani == "gamble"){Zogladorium()}
SunMohka.SignInBar.coinamount.ray("0")
alert(data.say)})
}

Users.signIn = async function(hname,hpass,hreferer){
await Creatures.magicspell("signIn",{name:hname,pass:hpass,referer:hreferer},function(data){alert(data.say)
if(data.say == "Account Created.  You are Signed In." || data.say == "You are Signed In."){
SunMohka.SignInBar.signinliORusername.ray(data.name)
SunMohka.SignInBar.signinliORusername.mode = "Account"
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
SunMohka.SignInBar.abovepopupsignin.invis()
}
})
}

Users.createSignInBar = function(cointype){
SunMohka.SignInBar = Crystalline.maaelle('div',0,0,1,1)
SunMohka.TopBar.Add(SunMohka.SignInBar)
SunMohka.SignInBar.cointype = cointype

SunMohka.SignInBar.coin = Crystalline.maaelle('div',0,0,1/4,1,SunMohka.SignInBar).dalcorsascroll().dalcorsaeren().dalcorsalsen().eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}
}.bind(this))

SunMohka.SignInBar.coinamount = Crystalline.maaelle('div',1/4,0,1/4,1,SunMohka.SignInBar).vcenter().ray("0").eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}

}.bind(this))

if(SunMohka.SignInBar.cointype.toUpperCase() == "S"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/5107474554438d57be7152605ea67a78.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}
if(SunMohka.SignInBar.cointype.toUpperCase() == "PERSON"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/837189de985fa03e9fb36adfbabf8c29.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}

SunMohka.SignInBar.signinliORusername = Crystalline.maaelle('div',2/4,0,2/4,1,SunMohka.SignInBar).dalcorsa("0,0,0,1").corsaera("255,255,255").rhap("7","255,255,255,1","1","solid").ray("SignIn").vcenter().eshe(function(){
if(SunMohka.SignInBar.signinliORusername.mode == "SignIn"){
SunMohka.SignInBar.abovepopupsignin.visible()
}
if(SunMohka.SignInBar.signinliORusername.mode == "Account"){
if(Users.AccountMohka.on=="l"){
Users.AccountMohka.on = "o"
Users.AccountMohka.visible()
SunMohka.SignInBar.signinliORusername.corsaera("0,255,0,1").rhap("7","0,255,0,1","1","solid")
}else{
Users.AccountMohka.on = "l"
Users.AccountMohka.invisible()
SunMohka.SignInBar.signinliORusername.corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid")
}

}
}.bind(this))
SunMohka.SignInBar.signinliORusername.mode = "SignIn"

Users.amISignedIn()

SunMohka.SignInBar.abovepopupsignin = Crystalline.maaelle('div',0,0,1,1).sunano().invis().front("100").dalcorsa("0,0,0,0.5")

SunMohka.SignInBar.popupsignin = Crystalline.maaelle('div',0,0,1,1,SunMohka.SignInBar.abovepopupsignin).front("101").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

SunMohka.SignInBar.popupsignin.login = Crystalline.maaelle('aera',1/9,1/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Name").borhap("12")

SunMohka.SignInBar.popupsignin.pass = Crystalline.maaelle('aera',1/9,3/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Password").borhap("12")

SunMohka.SignInBar.popupsignin.referer = Crystalline.maaelle('aera',1/9,5/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("referer").borhap("12")

SunMohka.SignInBar.popupsignin.signinli = Crystalline.maaelle('div',1/9,7/18,7/9,1/18,SunMohka.SignInBar.popupsignin).eshe(function(){
Users.in = SunMohka.SignInBar.popupsignin.login.value
Users.signIn(SunMohka.SignInBar.popupsignin.login.value,SunMohka.SignInBar.popupsignin.pass.value,SunMohka.SignInBar.popupsignin.referer.value)
}.bind(this)).ray("Enter").rhap("7","255,255,255,1","1","solid").borhap("12")
return SunMohka.SignInBar
}









Users.AccountMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).invis().front("201").dalcorsa("0,0,0,1")

Users.AccountMohka.on = "l"

Users.AccountMohka.unlogLi = Crystalline.maaelle('div',0,0,1/9,1/12,Users.AccountMohka).ray("LogOut").eshe(function(){
SunMohka.SignInBar.signinliORusername.ray("SignIn")
SunMohka.SignInBar.signinliORusername.mode = "SignIn"
Users.AccountMohka.invis()
Users.signOut()
}.bind(this)).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

Users.Inventory = Crystalline.maaelle('div',0,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")
Users.Inventory.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Inventory).ray("Inventory").vcenter()
Users.Inventory.Items = Crystalline.maaelle('div',0,1/8,1,7/8,Users.Inventory).rhap("7","255,255,255,1","1","solid").flow("o")
Users.Inventory.Items.vItem = []

Users.Inventory.Items.erenlupe = function(tani,corsa,sen){

let hema = Crystalline.maaelle('div',0,0,1,1)

return hema

}.bind(this)




Users.Friends = Crystalline.maaelle('div',1/2,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.Friends.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Friends).ray("Friends").vcenter()




Users.History = Crystalline.maaelle('div',0,5/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.History.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.History).ray("History").vcenter()

Users.History.Melo = Crystalline.maaelle('div',0,1/8,1/9,7/8,Users.History).rhap("0","255,255,255,1","1","solid")

Users.History.Melo.liItems = Crystalline.maaelle('div',0,0,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Items")

Users.History.Melo.liComments = Crystalline.maaelle('div',0,1/6,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Comments")

//bottom bar of page to be a generic banner until person ranks on a leaderboard, at which point upgrades to 'where u are on leaderboard'








window.Creatures = {}



Creatures.magicspell = async function(what,thing,next){ 
    await fetch('https://rosinvault.glitch.me/'+what, { method: 'POST', headers: { 'Content-Type': 'application/json'}, body: JSON.stringify(thing)}).then(response => response.json()).then(data => next(data)).catch(error => alert(error))  
  }


Creatures.getUpdates = async function(){ 
await Creatures.magicspell("getUpdates",{},function(data){
Creatures.UpdatesMohka.aera.ray("")
Creatures.UpdatesMohka.aera.entries = []
let entries = data.entries.split(`:;:

`)
for(i=0;i<entries.length;i++){
let ha = entries[i].split(`:::

`)
if(ha[1].indexOf("RosinVault, ") != -1){
ha[1] = ha[1].replace("Allotopia, ","")
ha[1] = ha[1].replace("RosinVault, ","")
ha[1] = ha[1].replace("GrowingHome, ","")
ha[1] = ha[1].replace("BeautifulPeople2, ","")
Creatures.UpdatesMohka.aera.entries[i] = Crystalline.maaelle('div',0,(1/6)*i,1,1/6,Creatures.UpdatesMohka.aera)
Crystalline.maaelle('div',0,0,1/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[0]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
 Crystalline.maaelle('div',1/4,0,3/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[1]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
}
}
    })
  }
  








Creatures.UpdatesMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).dalcorsa("0,0,0,1").sunano().invis().front("50")

Creatures.UpdatesMohka.supdate = ""

Creatures.UpdatesMohka.getViewUpdates = async function(){
Creatures.magicspell("getViewUpdates",{},function(data){
Creatures.UpdatesMohka.viewcount.ray("Views: "+data.views)
})
  }
  




Creatures.UpdatesMohka.aera = Crystalline.maaelle('div',0,1/12,1,11/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").flow("o")

Creatures.UpdatesMohka.returnli = Crystalline.maaelle('div',0,0,1/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter().ray("Return").eshe(function(){
clearInterval(Creatures.UpdatesMohka.supdate)
Creatures.UpdatesMohka.invis()
}.bind(this))

Creatures.UpdatesMohka.viewcount = Crystalline.maaelle('div',5/8,0,3/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter()



Creatures.addUpdatesBottomBar = function(){
let hema = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
Creatures.UpdatesMohka.getViewUpdates()
Creatures.UpdatesMohka.supdate = setInterval(function(){
Creatures.UpdatesMohka.getViewUpdates()
}.bind(this),5000)
Creatures.getUpdates()
Creatures.UpdatesMohka.visible()
}.bind(this)).ray("Updates")
SunMohka.BottomBar.Add(hema)
}.bind(this)







//////////////////////////////////////////////////

































































































let Comments = {}
Comments.submit = function(hem,hsen){
let ish = Crystalline.lseall("in")
if(ish == "o"){
let thing = {}
thing.aera = hem
thing.when = Date.now()
thing.which = hsen
thing.name = SunMohka.SignInBar.signinliORusername.sunaera()
Creatures.magicspell("askToComment",function(data){
Crystalline.say("Comment Submitted")
})
}
}.bind(this)















Profile ={}
Profile.referer = ""
Profile.refercount = ""
Profile.refercode = ""
Profile.Comments = {}
Profile.Comments.History = {}
Profile.Comments.History.topRanked = function(){
let hema = {}

return hema
}.bind(this)

// (leaf rating system)








































































let Store = {}
Store.createStore = function(){
SunMohka.StoreLi = Crystalline.maaelle('div',0,0,1,1).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").vcenter().corsaera("255,255,255,1").ray("Store").eshe(function(){
SunMohka.StoreMohka.vis()
}.bind(this))
SunMohka.StoreMohka = Crystalline.maaelle('div',0,0,1,1).sunano().dalcorsa("0,0,0,1").corsaera("255,255,255,1").front("203").invis()
SunMohka.StoreMohka.returnLi = Crystalline.maaelle('div',0,0,1/9,1/12,SunMohka.StoreMohka).ray("return").vcenter().dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").eshe(function(){
SunMohka.StoreMohka.invis()
}.bind(this))


SunMohka.TopBar.Add(SunMohka.StoreLi)
return SunMohka.StoreLi
}.bind(this)






























Creatures.createTimeBar = function(x,y,w,h,ano){
let hema = {}
hema.TimeBar = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.TimeBar.heartdrum = setInterval(function(){
if(hema.time != ""){
let timesofar = Date.now() - hema.time
let days = (((timesofar/1000)/60)/60)/24
let hours = ((timesofar/1000)/60)/60
let minutes = (timesofar/1000)/60
let seconds = timesofar/1000

if(hours < 1){
hema.TimeBar.barhourm.lo(0,0,hours,1)
hema.TimeBar.bartwohoursm.lo(0,0,0,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 1 && hours < 2){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,hours-1,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 2 && hours < 3){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,hours-2,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 3 && hours < 6){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,(hours-3)/3,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 6 && hours < 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,(hours-6)/6,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,1,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,(hours-12)/6,1)
}

}

}.bind(this),1000)

hema.TimeBar.maa = function(){
Creatures.magicspell("getTimeAndCollects",{},function(data){
if(data.signedIn != "l"){
hema.time = data.timesofar
}
}.bind(this))
}.bind(this)

window.Zogladorium = hema.TimeBar.maa
hema.TimeBar.betKoCollect = Crystalline.maaelle('div',1/4,1/16,2/4,1/8,hema.TimeBar).invis().corsaera("0,255,0,1").rai(0).vcenter().aerasun("0,255,0,1")
hema.TimeBar.timeshow = Crystalline.maaelle('div',0,1/4,1,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").dalcorsa("42,18,59,1")
hema.TimeBar.barhour = Crystalline.maaelle('div',0,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("1 Hour")
hema.TimeBar.bartwohours = Crystalline.maaelle('div',1/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("2 Hours")
hema.TimeBar.barthreehours = Crystalline.maaelle('div',2/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("3 Hours")
hema.TimeBar.barsixhours = Crystalline.maaelle('div',3/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("6 Hours")
hema.TimeBar.bartwelvehours = Crystalline.maaelle('div',4/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("12 Hours")
hema.TimeBar.bartwentyfourhours = Crystalline.maaelle('div',5/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("24 Hours")

hema.TimeBar.barhourm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barhour).dalcorsa("0,255,0,1")
hema.TimeBar.bartwohoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwohours).dalcorsa("0,255,0,1")
hema.TimeBar.barthreehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barthreehours).dalcorsa("0,255,0,1")
hema.TimeBar.barsixhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barsixhours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwelvehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwelvehours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwentyfourhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwentyfourhours).dalcorsa("0,255,0,1")

hema.TimeBar.reward = {}
hema.TimeBar.reward.claimli = Crystalline.maaelle('div',3/9,2/4,3/9,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").vcenter().ray("Collect your points!").eshe(function(){
Creatures.magicspell("timebarCollect",{},function(data){
Users.refreshMoney()
hema.TimeBar.maa()
hema.TimeBar.betCollect(data.amountCollected)
})

}.bind(this))

hema.TimeBar.reward.first = Crystalline.maaelle('div',0,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.second = Crystalline.maaelle('div',1/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.third = Crystalline.maaelle('div',2/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fourth = Crystalline.maaelle('div',3/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fifth = Crystalline.maaelle('div',4/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.sixth = Crystalline.maaelle('div',5/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")




hema.TimeBar.reward.corsahourc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.first).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwohoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.second).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsathreehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.third).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsasixhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fourth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwelvehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fifth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwentyfourhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.sixth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()

hema.TimeBar.reward.corsahour = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.first).vcenter().ray("+ 5")
hema.TimeBar.reward.corsatwohours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.second).vcenter().ray("+ 4")
hema.TimeBar.reward.corsathreehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.third).vcenter().ray("+ 2")
hema.TimeBar.reward.corsasixhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fourth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwelvehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fifth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwentyfourhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.sixth).vcenter().ray("+ 0")

hema.TimeBar.betCollect = function(hemsen){
let raera = ""
if(hemsen == undefined){
raera = "An hour has not passed yet."
}else{
raera = hemsen + " points collected!"
}
hema.TimeBar.betKoCollect.ray(raera)
hema.TimeBar.betKoCollect.rai(0)
let op = 0
let dalo = "p"
hema.TimeBar.betKoCollect.vis()
let hx = setInterval(function(){
let opp = op
if(op>1){opp=1}
hema.TimeBar.betKoCollect.rai(opp)
if(dalo=="p"){op=op+0.02}
if(op>=2){op=1
dalo="l"}
if(dalo=="l"){op=op-0.01}
if(op<0){hema.TimeBar.betKoCollect.invis()
clearInterval(hx)}

}.bind(this),10)
}.bind(this)


hema.TimeBar.maa()
return hema.TimeBar
}.bind(this)




//10 questions per day






















Creatures.Gamble = {}

Creatures.Gamble.maa = function(x,y,w,h,ano){
Creatures.Gamble.Mohka = Crystalline.maaelle('div',x,y,w,h,ano)

Creatures.Gamble.getQuestions = async function(){
await Creatures.magicspell("getMyDailyQuestions",{},function(hem){
if(hem.q1aera != ""){
let q = hem.q1aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question1.ray(q[0]+" vs "+q[1])
Creatures.Gamble.Mohka.q1t1.sen = hem.q1
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.vis()
Creatures.Gamble.Mohka.question1.vis()
Creatures.Gamble.Mohka.q1t1.vis()
Creatures.Gamble.Mohka.q1t1.ray(q[0])
Creatures.Gamble.Mohka.q1t2.vis()
Creatures.Gamble.Mohka.q1t2.ray(q[1])
}else{
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.invis()
Creatures.Gamble.Mohka.question1.invis()
Creatures.Gamble.Mohka.q1t1.invis()
Creatures.Gamble.Mohka.q1t1.ray("")
Creatures.Gamble.Mohka.q1t2.invis()
Creatures.Gamble.Mohka.q1t2.ray("")
}

if(hem.q2aera != ""){
let qb = hem.q2aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question2.ray(qb[0]+" vs "+qb[1])
Creatures.Gamble.Mohka.q2t1.sen = hem.q2
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.vis()
Creatures.Gamble.Mohka.question2.vis()
Creatures.Gamble.Mohka.q2t1.vis()
Creatures.Gamble.Mohka.q2t1.ray(qb[0])
Creatures.Gamble.Mohka.q2t2.vis()
Creatures.Gamble.Mohka.q2t2.ray(qb[1])
}else{
Creatures.Gamble.Mohka.q2t1.sen = ""
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.invis()
Creatures.Gamble.Mohka.question2.invis()
Creatures.Gamble.Mohka.q2t1.invis()
Creatures.Gamble.Mohka.q2t1.ray("")
Creatures.Gamble.Mohka.q2t2.invis()
Creatures.Gamble.Mohka.q2t2.ray("")
}

}.bind(this))
}.bind(this)
Creatures.Gamble.answerQuestion = async function(questionsen,answer,amount){
await Creatures.magicspell("gambleAnswerQuestion",{questionsen:questionsen,answer:answer,amount:amount},function(hem){if(hem.answered == "o"){
Users.refreshMoney()
Creatures.Gamble.getQuestions()
}}.bind(this))
}.bind(this)

Creatures.Gamble.Mohka.streak = Crystalline.maaelle('div',0,1/2,1/2,1/2,Creatures.Gamble.Mohka).ray("Enable Streak").vcenter().rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1").eshe(function(){
if(Creatures.Gamble.Mohka.streak.on == "l"){
Creatures.Gamble.Mohka.streak.on = "o"
Creatures.Gamble.Mohka.streak.ray("Streak Enabled!")
Creatures.Gamble.Mohka.streak.rhap("7","0,0,0,1","1","solid").dalcorsa("0,255,0,1").corsaera("0,0,0,1")
Creatures.Gamble.Mohka.Amount1.ray("5")
Creatures.Gamble.Mohka.Amount2.ray("5")
}else{
Creatures.Gamble.Mohka.streak.on = "l"
Creatures.Gamble.Mohka.streak.ray("Enable Streak")
Creatures.Gamble.Mohka.streak.rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")
}

}.bind(this))
Creatures.Gamble.Mohka.streak.on = "l"

Creatures.Gamble.Mohka.questiongetnext = Crystalline.maaelle('div',0,0,1/2,1/2,Creatures.Gamble.Mohka).ray("Get new questions").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){


}.bind(this))

Creatures.Gamble.Mohka.Questions = Crystalline.maaelle('div',1/2,0,1/2,1,Creatures.Gamble.Mohka)


Creatures.Gamble.Mohka.question1 = Crystalline.maaelle('div',0,0,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q1t1 = Crystalline.maaelle('div',2/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t1.sunaera(),amt)

}.bind(this)).invis()
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.q1t2 = Crystalline.maaelle('div',5/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount1 = Crystalline.maaelle("aera",2/7,1/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


Creatures.Gamble.Mohka.question2 = Crystalline.maaelle('div',0,4/7,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q2t1 = Crystalline.maaelle('div',2/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t1.sunaera(),amt)
Creatures.Gamble.Mohka.q2t1.sen = ""

}.bind(this)).invis()
Creatures.Gamble.Mohka.q2t2 = Crystalline.maaelle('div',5/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount2 = Crystalline.maaelle("aera",2/7,5/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


return Creatures.Gamble.Mohka
}.bind(this)

Creatures.Gamble.Aerakormaa = function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)

return hema
}.bind(this)





























Creatures.Leaderboard = {}
Creatures.Leaderboard.maa = function(hem,x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.type = hem
hema.Tani = Crystalline.maaelle('div',0,0,1,1/7,hema).ray(hem).vcenter().rhap("7","255,255,255,1","1","solid")
return hema
}.bind(this)










































Creatures.Bulletin = {}
Creatures.Bulletin.maa = function(x,y,w,h,ano){
Creatures.Bulletin.Mohka = Crystalline.maaelle('div',x,y,w,h,ano).rhap("7","255,255,255,1","1","solid")
Creatures.Bulletin.Mohka.JustReleasedItemsTani = Crystalline.maaelle('div',0,0,1,1/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid").ray("Just Released! (within 72hours)").vcenter()

Creatures.Bulletin.Mohka.JustReleasedItems = Crystalline.maaelle('div',0,1/9,1,4/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid")
Creatures.maaLleslai("Dab","Released","Left",100,0,0,1,1,Creatures.Bulletin.Mohka.JustReleasedItems,"","Nothing in the last 72 hours.")

Creatures.Bulletin.Mohka.WelcomeNewMembers = Crystalline.maaelle('div',0,5/9,1,2/9,Creatures.Bulletin.Mohka).ray("Welcome New Members").vcenter().rhap("0","255,255,255,1","1","solid")

Creatures.Bulletin.Mohka.RememberYourPoints = Crystalline.maaelle('div',0,7/9,1,2/9,Creatures.Bulletin.Mohka).ray("Remember Your Points").vcenter().rhap("0","255,255,255,1","1","solid").eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))

return Creatures.Bulletin.Mohka
}.bind(this)































Creatures.maaLleslai = function(hemdal,hemsort,slideway,slidespeed,x,y,w,h,ano,mcorsa,mtani){
let hema = Crystalline.maaelle('div',x,y,w,h,ano).rhap("0","255,255,255,1","1","solid")
hema.type = hemdal
hema.sort = hemsort
hema.slideway = slideway
hema.slidespeed = slidespeed

hema.slideHolder = Crystalline.maaelle('div',0,0,16/18,1,hema).dalcorsa("255,255,255,1").front("3").flow("o").dalcorsa(mcorsa)
hema.slides = []

hema.slideHolderEmpty = Crystalline.maaelle('div',0,0,1,1,hema.slideHolder).vcenter().ray(mtani).invis().aeraAlign("center").aeraeren(28).dalcorsa("0,0,0,0.8")



hema.onSlide = 0
hema.autoplaying = "o"


hema.sliderele = []
hema.seconds = 0

hema.rele = setInterval(function(){
if(hema.slides.length > 0){
hema.slideHolderEmpty.invis()
}else{hema.slideHolderEmpty.vis()}
for(i=0;i<hema.sliderele.length;i++){
hema.sliderele[i]()
}},1000)
hema.slidewidth = 1000
hema.heartdrumsen = 0
hema.heartdrum = setInterval(function(){
if(hema.autoplaying == "o" && hema.slides.length > 0){
hema.heartdrumsen++
if(hema.heartdrumsen>hema.slides.length*hema.slidewidth){
hema.heartdrumsen=0
hema.slideHolder.scroll({
left: hema.heartdrumsen,
top:0,
behavior: "instant",
})
}else{
hema.slideHolder.scroll(hema.heartdrumsen,0)
}
}
}.bind(this),hema.slidespeed)

hema.CreateSlide = function(hemb,time,last){
hemb.Mohka = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1")
hemb.Mohka.Title = Crystalline.maaelle('div',1/9,0,7/9,1/7,hemb.Mohka).ray(hemb.ShowotronTitle).vcenter()
hemb.Mohka.Image = Crystalline.maaelle('div',0,1/7,1,4/7,hemb.Mohka).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hemb.Mohka.Countdown = Crystalline.maaelle('div',1/9,2/7,7/9,2/7,hemb.Mohka).vcenter()



if(hema.sort=="Upcoming"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = time-now
if(when > 0){
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)

}else{
hemb.Mohka.Countdown.ray(`<span style='color:rgb(255,215,105)'>Just Released!</span>`)

}
})
}

if(hema.sort=="Released"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = now-time
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)
})
}





hemb.Mohka.Description = Crystalline.maaelle('div',0,5/7,1,2/7,hemb.Mohka).ray(hemb.ShowotronDescription).vcenter()
let hemlink = Crystalline.maaelle('div',0,0,1,1).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hema.slideHolder.add(hemb.Mohka,hemlink,last)
}.bind(this)

hema.getSlidesFromServer = async function(){
await Creatures.magicspell("getEntries",{},hema.getSlidesFromServerXX)   
  }

hema.getSlidesFromServerXX = async function(hem){
let vslides = hem.entries.split(",")
for(i=0;i<vslides.length;i++){
hema.getSlideFromServer(vslides[i],"l",i,vslides.length)
}
}.bind(this)





hema.getSlideFromServer = async function(hemx,last,sen,vsen){
await Creatures.magicspell("loadEntry",{entrylocation:hemx},function(hem){
let datas = hem.entry.split("~*^*~")
let hemb = {}
hemb.entrynumber = datas[0]
hemb.entryname = datas[1]
hemb.entryimage = datas[2]
hemb.entrydescription = datas[3]
hemb.entryattributes = datas[4]
hemb.entrytype = datas[5]
hemb.ekkattributes = [] 
let vattribute = hemb.entryattributes.split("~x*^*x~")
for(i=0;i<vattribute.length;i++){
let atr = vattribute[i].split("~!*^*!~")
hemb.ekkattributes.push(atr)
let f = atr[0]
let ood = atr[1]
hemb[f] = ood
}

if(hemb.entrytype == hema.type){
if(hema.sort=="Upcoming"){

let nowdate = Date.now()
let onShowotron = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
let daysbefore = parseInt(hemb.DaysBeforeReleaseAddToGalleryAndShowotron) * 24 * 60 * 60 * 1000
if(day-daysbefore < now && day > now - (24*60*60*1000)){
onShowotron = "o"
}
if(onShowotron == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}

}

}
if(hema.sort=="Released"){
let nowdate = Date.now()
let onJustReleased = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
if(now > day && now < day +3*(24*60*60*1000)){
onJustReleased = "o"
}
if(onJustReleased == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}
}//Released


}


}//Dab
if(sen == vsen-1 && hema.slides.length > 0){hema.CreateSlide(hema.SunHemb,hema.SunTime,"o")}


}.bind(this))
 }


hema.slideHolder.add = function(hem,hemlink,last){
if(last=="l"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hemlink.lo(0,(1/10)+(1/5)*hema.slides.length,1,1/10)
hemlink.slidesen = hema.slides.length
hemlink.eshe(function(){
if(hema.autoplaying=="l"){
hema.autoplaying = "o"
}


if(Math.floor(hema.slidewidth*hemlink.slidesen) != Math.floor(hema.slideHolder.scrollLeft)){
hema.autoplaying = "l"
hema.slideHolder.scroll({
left: hema.slidewidth*hemlink.slidesen,
top:0,
behavior: "smooth",
})
}




}.bind(this))
hem.eshe(function(){
alert("hi")

}.bind(this))
hema.vli.ano(hemlink)
hema.slides.push(hem)
}
if(last=="o"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hem.eshe(function(){
alert("hi")

}.bind(this))
//hema.slides.push(hem)
}
}.bind(this)



hema.vli = Crystalline.maaelle('div',16/18,0,2/18,1,hema).dalcorsa("0,0,0,0.8").flow("o").front("5")
hema.getSlidesFromServer()


return hema
}.bind(this)


















Creatures.RTree = function(x,y,w,h,ano,leafsia,leaferen){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.MyRefCode = Crystalline.maaelle('div',1/2,0,1/2,1,hema)
hema.vLeaf = Crystalline.maaelle('div',0,0,1/2,1,hema)

hema.getLeafDalcorsa = function(){
let lf = Crystalline.fate(leaferen)
let lc = leafsia+lf+".png"
return lc
}.bind(this)

hema.vLeaf.leaf0 = Crystalline.maaelle('div',0,0/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(leafsia+"X.png").dalcorsalsen().dalcorsavcenter()
let ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf1 = Crystalline.maaelle('div',0,1/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf2 = Crystalline.maaelle('div',0,2/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf3 = Crystalline.maaelle('div',0,3/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf4 = Crystalline.maaelle('div',0,4/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()

return hema
}.bind(this)













Creatures.addUpdatesBottomBar()


Creatures.createTimeBar(0,0,1,1/2,SunMohka.Aera)
Creatures.Gamble.maa(0,1/2,1,1/2,SunMohka.Aera)








let homeli = Crystalline.maaelle('div',0,0,1,1).ray("Home").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","home")
}.bind(this))
SunMohka.TopBar.Add(homeli)

let galleryli = Crystalline.maaelle('div',0,0,1,1).ray("Vault").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","vault")
}.bind(this))
SunMohka.TopBar.Add(galleryli)

let gambleli = Crystalline.maaelle('div',0,0,1,1).ray("Gamble").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))
SunMohka.TopBar.Add(gambleli)
Users.createSignInBar("S")
let referalli = Crystalline.maaelle('div',0,0,1,1).ray("Referal").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","refer")
}.bind(this))
SunMohka.TopBar.Add(referalli)
</script></body>
</html>&&&&&&<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RosinVault</title>
   <script src="three.min.js"></script>
   <script src="GLTFLoader.js"></script>
  </head>
  <body><script>window.siartani = "alchemy"

window.siartanilo = "RosinVault"

window.Crystalline = {

raphos: function(hem){
 





hem.aeralign = function(hema){if(hema=="o" || hema==undefined){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }



















hem.vcenter = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
hem.style.alignItems = "center"
         return hem
         }

hem.vcenterles = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
         return hem
         }

hem.vcenterphel = function(){hem.style.display = "flex"
hem.style.alignItems = "center"
         return hem
         }

hem.vsel = function(){hem.style.display = "flex"
hem.style.justifyContent = "left"
hem.style.textAlign = "left"
         return hem
         }

hem.vles = function(){hem.style.display = "flex"
hem.style.textAlign = "right"
hem.style.justifyContent = "right"
         return hem
         }



hem.eshe = function(hema){
if(hem.hematype == "select"){
hem.onchange = hema}else{
hem.onclick = hema
}
          return hem
          }



















































































hem.dalcorsalsen = function(){hem.style.backgroundRepeat = "no-repeat"
                                      
         return hem
         }





hem.dalcorsavcenter = function(){hem.style.backgroundPosition = "center"
                                     
         return hem
         }















hem.dalcorsa = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.Background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

         hem.corsadal = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"} 
         return hem
         }

















hem.noselect = function(hema){
               hema.style.userSelect = "none"
          return hem}

hem.border = function(radius,color,width,style){
          hem.style.borderRadius = "7px"
          hem.style.borderColor = "rgba(255,255,255,1)"
          hem.style.borderWidth = "3px"
          hem.style.borderStyle = "double"
          if(arguments.length>0){hem.style.borderRadius = radius}
           if(arguments.length>1){hem.style.borderColor = "rgba("+color+")"}
           if(arguments.length>2){hem.style.borderWidth = width}
           if(arguments.length>3){hem.style.borderStyle = style}
           return hem
         }

         

         

         

         hem.ona = function(){
         for(this.iuuuui=0;this.iuuuui<arguments.length;this.iuuuui++){
           hem.removeChild(arguments[this.iuuuui]) 
          }
          return hem
         }

         hem.font = function(hema){hem.style.fontFamily = hema
          return hem
          }

          
         
         
         
         
         
         
         
         


         
      
         
         
         




  hem.dalcorsascroll = function(){hem.style.backgroundAttachment = "scroll"
                                     
         return hem
         }

hem.white = function(){hem.style.whiteSpace = "pre"
                                     
         return hem
         }


hem.dalcorsalscroll = function(){hem.style.backgroundAttachment = "fixed"
                                      
         return hem
         }


hem.dalcorsaliscroll = function(){hem.style.backgroundAttachment = "local"
                                      
         return hem
         }


hem.dalcorsasen = function(){hem.style.backgroundRepeat = "repeat"
                                      
         return hem
         }



hem.dalcorsaeren = function(){hem.style.backgroundSize = "cover"
                                      
         return hem
         }



hem.dalcorsaloeren = function(){hem.style.backgroundSize = "contain"
                                      
         return hem
         }

hem.dalcorsahem = function(){hem.style.backgroundSize = "100% 100%"
                                      
         return hem
         }



         hem.textEdge = function(hema){if(hema=="o"){hem.style.whiteSpace = "wrap"}
                                       if(hema=="l"){hem.style.whiteSpace = "nowrap"}
         return hem
         }
              



hem.koil = function(){hem.style.userSelect = "none"
                                      
         return hem
         }



hem.front = function(hemb){hem.style.zIndex = hemb
                                      
         return hem
         }

hem.dal = function(hemb){hem.type = hemb
                                      
         return hem
         }





































































































































hem.ray = function(hema){












let hn = ""
if(hema != undefined){hn=hema}
         if(hem.hematype == "textarea"){hem.value = hn}
if(hem.hematype == "aera"){hem.value = hn}
if(hem.hematype == "notaera"){hem.value = hn}
if(hem.hematype == "select"){hem.value = hn}
if(hem.hematype == "input"){hem.value = hn}
if(hem.hematype == "div"){hem.innerHTML = hn}
if(hem.hematype == "button"){hem.textContent = hn}
if(hem.hematype == "option"){hem.textContent = hn
hem.value = hn}
         return hem
         }







hem.aeraeren = function(hema){hem.style.fontSize = hema+"px"
         return hem
         }
hem.textSize = function(hema){hem.style.fontSize = hema 
         return hem
         }



















hem.sunano = function(hema){
               document.body.appendChild(hem)
          return hem}

















hem.ano = function(){
         for(this.iuuui=0;this.iuuui<arguments.length;this.iuuui++){
           hem.appendChild(arguments[this.iuuui]) 
          }
          return hem
         }

























hem.vis = function(){hem.style.display = "flex"
                                      
         return hem
         }

hem.visible = function(){hem.style.display = "flex"
                                      
         return hem
         }







hem.invis = function(){hem.style.display = "none"
                                      
         return hem
         }
hem.invisible = function(){hem.style.display = "none"
                                      
         return hem
         }




















hem.sunaera = function(){
if(arguments.length == 1){hem.innerHTML = arguments[0]
         return hem
         }
if(arguments.length == 0 && hem.hematype == "textarea"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "select"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "input"){
return hem.value
}
if(arguments.length == 0 && hem.hematype != "textarea"){
         return hem.innerHTML
         }
}





hem.aeradal = function(hema){hem.style.fontFamily = hema
         return hem
         }


hem.aeraeshe = function(hema){hem.oninput = hema
          return hem
          }





hem.aeracorsa = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }
hem.textColor = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }









         










hem.aeraglow = function(hema){hem.style.textShadow = "0px 0px 4px rgba(" + hema +")"
         return hem
         }











hem.ama = function(hema){hem.placeholder = hema 
         return hem
         }

hem.hint = function(hema){hem.placeholder = hema 
         return hem
         }



















hem.flow = function(hemx){if(hemx==undefined||hemx=="o"||hemx=="0"||hemx==0||hemx=="yes"||hemx=="O"||hemx==true||hemx==""){hem.style.overflow = "auto"}
if(hemx=="l"||hemx=="L"||hemx==1||hemx=="no"||hemx==false){hem.style.overflow = "hidden"}
if(hemx!=undefined){

if(hemx.toLowerCase()=="lleslai"){hem.style.overflowX = "auto"}
if(hemx.toLowerCase()=="phellai"){hem.style.overflowY = "auto"}



}

hem.style.scrollBehavior = "smooth"
          return hem}











hem.aerasun = function(hema){hem.style.textShadow = "0 0 8px rgba("+hema+")"
         return hem
         }





hem.aeraAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }

hem.textAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }




































hem.corsaera = function(hema){
hem.style.color = "rgba("+hema+")"
         return hem
         }




hem.lo = function(x,y,w,h){
          this.lo(hem,x,y,w,h)
return hem
         }.bind(this)

hem.loles = function(x){
          this.loles(hem,x)
return hem
         }.bind(this)

hem.losel = function(x){
          this.losel(hem,x)
return hem
         }.bind(this)

hem.lophel = function(x){
          this.lophel(hem,x)
return hem
         }.bind(this)

hem.lolehp = function(x){
          this.lolehp(hem,x)
return hem
         }.bind(this)

hem.getWidth = function(){
let hema = hem.getBoundingClientRect()

return hema.width
}.bind(this)


hem.getHeight = function(){
let hema = hem.getBoundingClientRect()

return hema.height
}.bind(this)












































hem.rai = function(hema){hem.style.opacity = hema
         return hem
         }



























































hem.rhap = function(radius,color,width,style){
          hem.style.borderRadius = radius + "px"
          hem.style.borderColor = "rgba("+color+")"
          hem.style.borderWidth = width+"px"
          hem.style.borderStyle = style
           return hem
         }





hem.rhapdal = function(hema){hem.style.borderStyle = hema 
         return hem
         }
         hem.rhapcorsa = function(hema){hem.style.borderColor = "rgba("+hema+")" 
         return hem
         }
         hem.rhaperen = function(hema){hem.style.borderWidth = hema
         return hem
         }

hem.rhaprele = function(hema){hem.style.borderRadius = hema+"px"
         return hem
         }
 





hem.borderradiuses = function(tl,tr,br,bl){
hem.style.borderTopLeftRadius = tl+"px"
hem.style.borderTopRightRadius = tr+"px"
hem.style.borderBottomRightRadius = br+"px"
hem.style.borderBottomLeftRadius = bl+"px"
return hem
}


hem.borhap = function(padding){
          hem.style.padding = padding + "px"
           return hem
         }





























































































return hem
        },


seall: function(aera,siar){Kt.seall(aera,siar)},











melosiar: function(siar,hemfun){
    var client = new XMLHttpRequest()
     client.open('GET',siar)
   client.onreadystatechange = function(){
if(client.readyState == 4 && client.status == 200){hemfun(client.responseText)}}
client.send()
   },



















copyAssets: function(aera){Kt.copyAssets(aera)},


hCopyAssets: function(aera){Kt.hCopyAssets(aera)},

copyAssetsCal: function(aera){Kt.copyAssetsCal(aera)},


hCopyAssetsCal: function(aera){Kt.hCopyAssetsCal(aera)},

reloadprogramcal: function(){Kt.reloadprogramcal()},





say: function(hem){Kt.say(hem)},











lseall: function(siar){return Kt.lseall(siar)},






















maaRaynotaera: function(aeralo,x,y,w,h,ano){
let hema = Crystalline.maaelle('aera',x,y,w,h,ano).aeraeshe(function(){
Crystalline.seall(hema.sunaera(),hema.siar)

}.bind(this))

hema.siar = aeralo
hema.ray(Crystalline.lseall(hema.siar))

























},








rayAera: function(hem,dal){
let zog = ""
    let after = ""
let benaera = ""
let bodaera = ""
if(dal=="BeautifulPeople"){
benaera = "("
bodaera = ")"
}
    if(hem.indexOf("in the styles of the artists")!=-1){
    zog = hem.substring(0,hem.indexOf("in the styles of the artists"))
    after = hem.substring(hem.indexOf("in the styles of the artists"),hem.length)
    }else{
      zog = hem
    }
  let maera = hem.split(" ")
  let which = Crystalline.fate(maera.length)
let sen = Crystalline.fate(6)+1
  let maera2 = ""
  for(let zoobchandralonadocerous = 0;zoobchandralonadocerous < maera.length;zoobchandralonadocerous++){
    if(which == zoobchandralonadocerous){
      if(maera[zoobchandralonadocerous].substring(0,2)=="((" || maera[zoobchandralonadocerous].substring(maera[zoobchandralonadocerous].length-2,maera[zoobchandralonadocerous].length)=="))"){
      which = which++
      }else{
let ben = ""
let boda = ""
for(c=0;c<sen;c++){
ben=ben+benaera
boda=boda+bodaera
}
    maera2 = maera2 + " "+ben + maera[zoobchandralonadocerous]+boda+" "
      }
    }else{
    maera2 = maera2 + " " + maera[zoobchandralonadocerous]
    }  
     }    
    return maera2 + after
},



generateSeed: function(){
   let seed = Crystalline.fate(4294967295)+1
   return seed
  },


BeautifulGallery: function(x,y,w,h,ano){
let galleria = Crystalline.maaelle('div',x,y,w,h,ano)
galleria.settings = {}
  galleria.settings.gallery = true
  galleria.settings.sort = "recent"
  galleria.settings.adaptiveHeight = true
  galleria.settings.style = "background-color:rgba(0,0,0,0)"
  galleria.settings.forceColorScheme = "dark"
let c = image(galleria.settings).evaluateItem
  galleria.ray(c)
},

BeautifulStory: function(ask,x,y,w,h,ano){
let textia = Crystalline.maaelle('div',x,y,w,h,ano)
textia.settings = {}
 textia.settings.instruction = ask  
let c = aitext(textia.settings)
  textia.ray(c)
},

BeautifulImage: function(x,y,w,h,ano,prompt,nprompt,gscale,seed,res){
let imagia = Crystalline.maaelle('div',x,y,w,h,ano)
imagia.settings = {}
  imagia.settings.prompt = prompt
  imagia.settings.negativePrompt = nprompt
 imagia.settings.guidanceScale = gscale
 imagia.settings.seed = seed
 imagia.settings.resolution = res
let c = image(imagia.settings).evaluateItem
  imagia.ray(c)
//YTILIBATAPMOC
},




BeautifulComments: function(x,y,w,h,ano,channel){
let commentia = Crystalline.maaelle('div',x,y,w,h,ano)
commentia.settings = {}
  commentia.settings.spiritguides = true
  commentia.settings.loadFonts = "Emilys Candy"
 commentia.settings.channel = channel
 commentia.settings.commentPlaceholderText = "meow"
 commentia.settings.submitButtonText = "meow"
commentia.settings.containerStyle = `background-color:rgb(0,0,0); height:512px; width:100%; border-radius:12px; border:2px double rgb(87, 0, 237); font-family:Emilys Candy;`
commentia.settings.messageBubbleStyle = `background:rgba(255,255,255,0.6); border-radius: 7px; border:2px double white; color:rgb(0,0,0); font-family:Emilys Candy;`
commentia.settings.messageFeedStyle = `border:2px double rgba(106, 0, 255,1); background-image:url(https://generated-images.perchance.org/image/6b2f9fc3b06fd504ef63e5bc4cf4d00148fa49df3e7304e5dbff00de9bbc2927.jpeg); border-radius: 7px; font-family:Emilys Candy;`
commentia.settings.inputAreaStyle = `background-color:rgb(0,0,0); font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(255,255,255);`
commentia.settings.submitButtonStyle = `width:100%;background-color: rgba(61, 242, 255,1); border:none; font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(0,0,0)`
commentia.settings.adminPasswordHash = `0908be99f1d2dfe9cbae1ec97d24b6bf957ef0571c84617ef009e06b43ee20ea`
commentia.settings.adminFlair = `meow`
commentia.settings.width = `400`
commentia.settings.bannedWords = "cbat"
//commentia.settings.customEmojis = {import:allos-emoji-list}
commentia.settings.loneCustomEmojiSizeMultiplier = "3"
commentia.settings.customEmojiSize = "1.2"
let c = comments(commentia.settings).evaluateItem
  commentia.ray(c)
//YTILIBATAPMOC
},





  
  
  
  
  
  
  

  
  
  
  
  
    
  
  


  

  
  
  


melosia: function(hem){return Kt.melosia(hem).split(",")},
















downloadassets: function(hemlo,hemtani){Kt.downloadassets(hemlo,hemtani)},
hseall: function(aera,siar){Kt.hseall(aera,siar)},
hlseall: function(siar){return Kt.hlseall(siar)},
        seallsiar: function(siabe,siabo){Kt.seallsiar(siabe,siabo)},
        rasiar: function(siabe){return Kt.rasiar(siabe)},
hrasiar: function(siabe){return Kt.hrasiar(siabe)},
rasia: function(siabe){return Kt.rasia(siabe)},
        seallsia: function(siabe,siabo){Kt.seallsia(siabe,siabo)},
celestiall: function(siabe,siabo){Kt.celestiall(siabe,siabo)},
        seallver: function(siabe,siabo){Kt.seallver(siabe,siabo)},
        kortanisia: function(siabe,siabo){Kt.kortanisia(siabe,siabo)},
hkortanisia: function(siabe,siabo){Kt.hkortanisia(siabe,siabo)},
        
maasia: function(hem){Kt.maasia(hem)},
hmelosia: function(hem){return Kt.hmelosia(hem).split(",")},
sunseall: function(aera,siar){Kt.sunseall(aera,siar)},
sunlseall: function(siar){return Kt.sunlseall(siar)},
        sunmelosia: function(hem){return Kt.sunmelosia(hem).split(",")},






















ekklinere: function(hemaera,hemekk){
let sen = hemekk.indexOf(hemaera)
if(sen != -1){
  hemekk.splice(sen, 1)
}
return hemekk
},
ekklieren: function(hemaera,hemekk){
hemekk.push(hemaera)
return hemekk
},
ekklira: function(hemaera,hemekk){
if(hemekk.includes(hemaera)){return "o"}else{return "l"}
},











componentToHex: function(c) {
  var hex = c.toString(16)
  return hex.length == 1 ? "0" + hex : hex
},

 rgbToHex: function(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b)
},



hemThree: function(tthen,tanimate,x,y,w,h,hemano){
let hema = Crystalline.maaelle('div',x,y,w,h,hemano)

Crystalline.Corsan = hema
hema.threescript = tanimate
hema.threeobjects = []
hema.threeactive = false
hema.Textures = []
hema.animate = function(){ 	
                      	if(hema.threeactive == true){
for(i=0;i<hema.threeobjects.length;i++){
hema.threeobjects[i]()
}
hema.threescript()
//hema.ORBITCONTROLS.update()
hema.RENDERER.render( hema.SCENE, hema.CAMERA )
}
let ani = hema.animate.bind(this)
requestAnimationFrame( ani )
}.bind(this)

hema.THREE = THREE

hema.TextureLoader = new hema.THREE.TextureLoader()
//hema.GLTFLoader = new this.THREE.GLTFLoader()

let vww = Math.round(w*hemano.clientWidth)
let vhh = Math.round(h*hemano.clientHeight)

     hema.SCENE = new hema.THREE.Scene()

hema.LIGHT = new hema.THREE.AmbientLight(0xffffff,0.3)
hema.SCENE.add(hema.LIGHT)

hema.SUN = new hema.THREE.PointLight( 0xffffff, 1, 70 )
hema.SUN.position.set( 13, 20, 13 )
hema.SUN.castShadow = true
hema.SUN.shadow.mapSize.width = 26
hema.SUN.shadow.mapSize.height = 26
hema.SUN.shadow.camera.near = 1
hema.SUN.shadow.camera.far = 50
hema.SCENE.add( hema.SUN )

    hema.CAMERA = new hema.THREE.PerspectiveCamera( 90, vww/ vhh, 0.1, 1000 )
hema.cameraX = 0
hema.cameraY = 0
hema.cameraZ = 0
hema.CAMERA.position.set(0, 0, 0)



     hema.RENDERER = new hema.THREE.WebGLRenderer()
hema.RENDERER.shadowMap.enabled = true
      hema.RENDERER.setSize(vww, vhh)
hema.RENDERER.setPixelRatio(window.devicePixelRatio)

hema.ORBITCONTROLS = new hema.THREE.OrbitControls(hema.CAMERA,hema.RENDERER.domElement)
hema.ORBITCONTROLS.enabled = false
//hema.ORBITCONTROLS.enableDamping = true
//hema.ORBITCONTROLS.dampingFactor = 0.05
hema.ORBITCONTROLS.screenSpacePanning = false
hema.ORBITCONTROLS.minDistance = 30
hema.ORBITCONTROLS.maxDistance = 100

hema.T = hema.RENDERER.domElement
Crystalline.raphos(hema.T)
hema.T.lo(0,0,1,1)
hema.front(999999999999)
 hema.ano( hema.T )


















hema.createUnit = function(x,y,z,who){

let hemb = {}
hemb.represents = who
hema.tani = who
hemb.x = x
hemb.y = y
hemb.z = z
hemb.variant = ""
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hema.b,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)



hemb.removeFromMap = function(){
this.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)


hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)
}
return hemb
}.bind(this)









hema.SunRaphos = function(hemb){
























































































































































































































hemb.lookAtMe = function(){
hema.CameraLookAtObject(hemb)
return hemb
}.bind(this)














































































































hemb.position = function(rx,ry,rz){
hemb.x = rx
hemb.y = ry
hemb.z = rz
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)



hemb.wireframe = function(hem){
if(hem=="o"){
hemb.materi1.wireframe = true
}else{
hemb.materi1.wireframe = false
}
}.bind(this)



hemb.texturewrap  = function(img){
      
                   
           let mewta = new hema.THREE.TextureLoader().load(img)
                    mewta.wrapS = mewta.wrapT = hema.THREE.RepeatWrapping
                    
                    hemb.materi1.map = mewta         
                    hemb.materi1.needsUpdate = true
                  }.bind(this)




return hemb
}.bind(this)
















































































































































































































hema.maaTree = function(x,y,z){

let hemb = hema.maaS(x,y,z,2,90,2)
hema.maaS(x+6,y+14,z,10,2,2)
hema.maaS(x,y+20,z+6,2,2,10)
hema.maaS(x-6,y+26,z,10,2,2)
hema.maaS(x,y+32,z-6,2,2,10)
hema.maaS(x+6,y+38,z,10,2,2)
return hemb
}.bind(this)



hema.maaS = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(xp, yp, zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
return hemb
}.bind(this)









Crystalline.Corsan.maaLight = function(x,y,z,strength){
let light = new THREE.PointLight(0xffffff,strength)
light.position.set(x,y,z)
hema.SCENE.add(light)
}.bind(this)


Crystalline.Corsan.maaInvisithing = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(255,255,255)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(hemb.xp, hemb.yp, hemb.zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hemb.aaM()
return hemb
}.bind(this)






















































hema.cameraSpin = function(tani){
hema.ORBITCONTROLS.enabled = true
return hema
}.bind(this)




hema.cameraNonspin = function(tani){
hema.ORBITCONTROLS.enabled = false
return hema
}.bind(this)









hema.maaMaven = function(x,z,type,who){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.variant = type
hemb.present = "o"
if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{
let hm = Crystalline.melosia(type+"/Maven/Corsa")
let wm = Crystalline.fate(hm.length)
let whoo = hm[wm].replace(".png","") +"Maven"
let tew = hema.Textures[whoo]
hemb.variant = hm[wm]

if(type != "Nif"){
hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)

hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
}else{

let whooo = who +"Hazel"
let tew2 = hema.Textures[whooo]

hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })
hemb.materi2 = new hema.THREE.SpriteMaterial({ 
	map: tew2,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)
hemb.mesh2 = new hema.THREE.Sprite(hemb.materi2)
hemb.mesh2.scale.set(0.3,0.3,0.3)
hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
hema.SCENE.remove(hemb.mesh2)
hemb.materi2.dispose()
hemb.mesh2 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hemb.mesh2.position.set(hemb.x,hemb.y+1,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hema.SCENE.add(hemb.mesh2)
}

}


return hemb
}.bind(this)


































































hema.maaEditSphere = function(x,z){

let hemb = {}
hemb.x = x
hemb.y = 3
hemb.z = z

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.SphereGeometry(0.35)

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){

hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.rotatia = function(){
hemb.mesh1.rotation.x = hemb.mesh1.rotation.x+0.01
}.bind(this)
hema.threeobjects.push(hemb.rotatia)



return hemb
}.bind(this)

























































































hema.CameraLookAtPosition = function(x,y,z){
let weW = new hema.THREE.Vector3(x,y,z)
hema.CAMERA.lookAt(weW)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraPosition = function(x,y,z){
hema.cameraX = x
hema.cameraY = y
hema.cameraZ = z
hema.CAMERA.position.set(x,y,z)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraTopDown = function(){
//hema.CAMERA
}.bind(this)

hema.CameraVFov = function(hem){
hema.CAMERA.fov = hem
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraLookAtObject = function(hemc){
hema.CAMERA.lookAt(hemc.mesh1.position)
}.bind(this)

hema.cameraright = function(hem){
hema.cameraX = hema.cameraX+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraleft = function(hem){
hema.cameraX = hema.cameraX-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameradown = function(hem){
hema.cameraZ = hema.cameraZ+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraup = function(hem){
hema.cameraZ = hema.cameraZ-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)



hema.CameraAutoTurnaround = function(hemb){
if(arguments.length == 1){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtObject(hemb)
}.bind(this)
hema.threeobjects.push(rotatia)
}
if(arguments.length == 3){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtPosition(arguments[0],arguments[1],arguments[2])
}.bind(this)
hema.threeobjects.push(rotatia)
}


}.bind(this)











hema.maaConversion = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.variant = who
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)






















hema.maaHazel = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z

if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let whoo = who +"Hazel"

let tew = hema.Textures[whoo]



hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)





























hema.maaSen = function(x,z,type){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 1
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.materi1 = ""
if(type.substring(0,4)=="Wall"){
hemb.y=2
hemb.ctype = hemb.ctype.replace("Wall","")
}
if(type.substring(0,9)=="Superwall"){
hemb.y=3
hemb.ctype = hemb.ctype.replace("Superwall","")
}
if(type.substring(0,3)=="Pit"){
hemb.y=0
hemb.ctype = hemb.ctype.replace("Pit","")
}

if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

if(type.substring(0,7)!="Culture"){
let whoo = hemb.ctype +"Sen"
let tew = hema.Textures[whoo]

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	map: tew,
transparent: true
 })
}else{
let hcolor = type.substring(7,type.length)
hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: hcolor,
transparent: true,
wireframe: true
 })

}


hemb.shape1  = new hema.THREE.BoxGeometry( hemb.xw, hemb.yw, hemb.zw )
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){





hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.shape1.dispose()
hemb.mesh1 = undefined

}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)



}

return hemb
}.bind(this)



















































      tthen()
    
hema.threeactive = true
hema.animate()

return hema
},











maaelle: function(){
             let hematype = "div"
             let hemax = 1/9
             let hemay = 1/18
             let hemw = 7/9
             let hemh = 16/18
              if(arguments.length>0){hematype = arguments[0]
              if(arguments[0]=="aera"){hematype = "textarea"}}
              if(arguments.length>1){hemax = arguments[1]}
              if(arguments.length>2){hemay = arguments[2]}
              if(arguments.length>3){hemw = arguments[3]}
              if(arguments.length>4){hemh = arguments[4]}
              let hema = document.createElement(hematype)
              hema.hematype = hematype
              if(hema.hematype == "div"){
               hema.style.userSelect = "none"
              }
             this.raphos(hema)
hema.style.fontFamily = "EmilysCandy"
if(hematype == "option"){
arguments[1].ano(hema)
}else{
             this.lo(hema,hemax,hemay,hemw,hemh)
}
         
             if(arguments.length>5){arguments[5].ano(hema)}
             
hema.dalcorsa("0,0,0,0.0").aeracorsa("255,255,255,1").aeraglow("255,255,255,1")


             return hema
            },




















kiDelete: function(){Kt.kieh(1,0)},
            ki: function(hem){Kt.ki(hem)},
            kiPaste: function(){Kt.kiPaste()},
            kiCopy: function(){Kt.kiCopy()},
            kiCut: function(){Kt.kiCut()},
            kiSelectAll: function(){Kt.kiSelectAll()},
            kiSelect: function(hemben,hemboda){Kt.kiSelect(hemben,hemboda)},
            kiboda: function(hemdistance){return Kt.kiboda(hemdistance)},
            kiben: function(hemdistance){return Kt.kiben(hemdistance)},
            kieh: function(hemben,hemboda){Kt.kieh(hemben,hemboda)},
            kiUp: function(){Kt.kiUp()},
            kiDown: function(){Kt.kiDown()},
            kiLeft: function(){Kt.kiLeft()},
            kiRight: function(){Kt.kiRight()},
            kiUndo: function(){Kt.kiUndo()},
            kiRedo: function(){Kt.kiRedo()},
    
kiSelection: function(){return Kt.kiSelection()},
      


gotowebpage: function(hem){Kt.gotowebpage(hem)},


     readasset: function(hem){
return Kt.readasset(hem)
}, 
exportasset: function(hem,boda){
Kt.exportasset(hem,boda)
}, 
        
        
 














veskaLo: function(tani,hem){
document.location.href = "https://"+tani+".glitch.me/"+hem
},


sensia: function(aera,sia){
let w = Crystalline.melosia(sia)
let an = w.length
if(w[0]==""){an=0}
let re = an.toString()
Crystalline.seall(aera,sia+"/"+re)
},

lo: function(hem,x,y,w,h){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)
                        hem.style.right = this.conversion.percentstring(1-(x+w))
                        hem.style.top = this.conversion.percentstring(y)
                        hem.style.bottom = this.conversion.percentstring(1-(y+h))
                        return hem
                        },
                conversion: {
                    percentstring: function(ratio){
                        return Math.round(ratio*100).toString()+"%"
                    },
                },



loles: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)   
                        return hem
                        },

losel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.right = this.conversion.percentstring(x)   
                        return hem
                        },

lophel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.top = this.conversion.percentstring(x)   
                        return hem
                        },
         
lolehp: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.bottom = this.conversion.percentstring(x)   
                        return hem
                        },










   





lohem: function(hem){
let hema = document.getElementById(hem)

this.raphos(hema)
return hema
},



























fate: function(hsen){
let hema = Math.floor(Math.random()*hsen)
return hema
},



SenNow: function(){
let hema = Date.now()
hema = hema.toString()
return hema
},

Senminutessince: function(since){
let hema = this.SenNow()
let hemaaa = parseInt(hema)-parseInt(since)
return hemaaa
},

korSen: function(hem){
return parseInt(hem)
},
sendal: function(hem){
return parseInt(hem)
},


maaHemSen: function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.year
hema.month
hema.day
hema.hour
hema.minute
hema.second
hema.millisecond
return hema
},

























}

let Kt = {
say: function(hem){alert(hem)},



hseall: function(aera,siar){
localStorage.setItem(siar,aera)
},
hlseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
seall: function(aera,siar){
localStorage.setItem(siar,aera)
},
lseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
        seallsiar: function(siabe,siabo){},
        rasiar: function(siabe){},
rasia: function(siabe){},
        seallsia: function(siabe,siabo){},
        seallver: function(siabe,siabo){},
        kortanisia: function(siabe,siabo){},
        melosia: function(hem){},
hmelosia: function(hem){},
sunseall: function(aera,siar){},
sunlseall: function(siar){},
        sunmelosia: function(hem){},




}






window.mode = ""
if(innerWidth > innerHeight){window.mode = "computer"}else{window.mode = "phone"}

window.SunMohka = Crystalline.maaelle('div',0,0,1,1).sunano().front("1").dalcorsa("0,0,0,1")
SunMohka.Aera = Crystalline.maaelle('div',0,0,1,1,SunMohka).dalcorsa("0,0,0,1")
SunMohka.TopBar = Crystalline.maaelle('div',0,0,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.TopBar.Entries = []
SunMohka.TopBar.Add = function(hem){
SunMohka.Aera.lophel(1/24)
SunMohka.TopBar.vis()
hem.lo((1/5)*SunMohka.TopBar.Entries.length,0,1/5,1)
SunMohka.TopBar.ano(hem)
SunMohka.TopBar.Entries.push(hem)
}.bind(this)
SunMohka.BottomBar = Crystalline.maaelle('div',0,23/24,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.BottomBar.Entries = []
SunMohka.BottomBar.Add = function(hem){
SunMohka.Aera.lolehp(1/24)
SunMohka.BottomBar.vis()
hem.lo((1/5)*SunMohka.BottomBar.Entries.length,0,1/5,1)
SunMohka.BottomBar.ano(hem)
SunMohka.BottomBar.Entries.push(hem)
}.bind(this)



window.Users = {}





Users.coinCorsa = ""






Users.viewUp = async function(){
await Creatures.magicspell("viewUp",{},function(data){})  
  }

Users.refreshMoney = async function(){
await Creatures.magicspell("getMoney",{},function(data){
SunMohka.SignInBar.coinamount.ray(data.money)
})
}.bind(this)



Users.amISignedInvInvis = []
Users.amISignedInInvis = function(hem){
Users.amISignedInvInvis.push(hem)
}.bind(this)

Users.amISignedIn = async function(){
await Creatures.magicspell("amISignedIn",{},function(data){
if(data.signedIn == "o"){
SunMohka.SignInBar.signinliORusername.mode = "Account"
SunMohka.SignInBar.signinliORusername.ray(data.name)
for(i=0;i<Users.amISignedInvInvis.length;i++){
Users.amISignedInvInvis[i].invis()
}
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
}
})
}



Users.signOut = async function(){
await Creatures.magicspell("signOut",{},function(data){
if(siartani == "gamble"){Zogladorium()}
SunMohka.SignInBar.coinamount.ray("0")
alert(data.say)})
}

Users.signIn = async function(hname,hpass,hreferer){
await Creatures.magicspell("signIn",{name:hname,pass:hpass,referer:hreferer},function(data){alert(data.say)
if(data.say == "Account Created.  You are Signed In." || data.say == "You are Signed In."){
SunMohka.SignInBar.signinliORusername.ray(data.name)
SunMohka.SignInBar.signinliORusername.mode = "Account"
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
SunMohka.SignInBar.abovepopupsignin.invis()
}
})
}

Users.createSignInBar = function(cointype){
SunMohka.SignInBar = Crystalline.maaelle('div',0,0,1,1)
SunMohka.TopBar.Add(SunMohka.SignInBar)
SunMohka.SignInBar.cointype = cointype

SunMohka.SignInBar.coin = Crystalline.maaelle('div',0,0,1/4,1,SunMohka.SignInBar).dalcorsascroll().dalcorsaeren().dalcorsalsen().eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}
}.bind(this))

SunMohka.SignInBar.coinamount = Crystalline.maaelle('div',1/4,0,1/4,1,SunMohka.SignInBar).vcenter().ray("0").eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}

}.bind(this))

if(SunMohka.SignInBar.cointype.toUpperCase() == "S"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/5107474554438d57be7152605ea67a78.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}
if(SunMohka.SignInBar.cointype.toUpperCase() == "PERSON"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/837189de985fa03e9fb36adfbabf8c29.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}

SunMohka.SignInBar.signinliORusername = Crystalline.maaelle('div',2/4,0,2/4,1,SunMohka.SignInBar).dalcorsa("0,0,0,1").corsaera("255,255,255").rhap("7","255,255,255,1","1","solid").ray("SignIn").vcenter().eshe(function(){
if(SunMohka.SignInBar.signinliORusername.mode == "SignIn"){
SunMohka.SignInBar.abovepopupsignin.visible()
}
if(SunMohka.SignInBar.signinliORusername.mode == "Account"){
if(Users.AccountMohka.on=="l"){
Users.AccountMohka.on = "o"
Users.AccountMohka.visible()
SunMohka.SignInBar.signinliORusername.corsaera("0,255,0,1").rhap("7","0,255,0,1","1","solid")
}else{
Users.AccountMohka.on = "l"
Users.AccountMohka.invisible()
SunMohka.SignInBar.signinliORusername.corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid")
}

}
}.bind(this))
SunMohka.SignInBar.signinliORusername.mode = "SignIn"

Users.amISignedIn()

SunMohka.SignInBar.abovepopupsignin = Crystalline.maaelle('div',0,0,1,1).sunano().invis().front("100").dalcorsa("0,0,0,0.5")

SunMohka.SignInBar.popupsignin = Crystalline.maaelle('div',0,0,1,1,SunMohka.SignInBar.abovepopupsignin).front("101").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

SunMohka.SignInBar.popupsignin.login = Crystalline.maaelle('aera',1/9,1/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Name").borhap("12")

SunMohka.SignInBar.popupsignin.pass = Crystalline.maaelle('aera',1/9,3/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Password").borhap("12")

SunMohka.SignInBar.popupsignin.referer = Crystalline.maaelle('aera',1/9,5/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("referer").borhap("12")

SunMohka.SignInBar.popupsignin.signinli = Crystalline.maaelle('div',1/9,7/18,7/9,1/18,SunMohka.SignInBar.popupsignin).eshe(function(){
Users.in = SunMohka.SignInBar.popupsignin.login.value
Users.signIn(SunMohka.SignInBar.popupsignin.login.value,SunMohka.SignInBar.popupsignin.pass.value,SunMohka.SignInBar.popupsignin.referer.value)
}.bind(this)).ray("Enter").rhap("7","255,255,255,1","1","solid").borhap("12")
return SunMohka.SignInBar
}









Users.AccountMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).invis().front("201").dalcorsa("0,0,0,1")

Users.AccountMohka.on = "l"

Users.AccountMohka.unlogLi = Crystalline.maaelle('div',0,0,1/9,1/12,Users.AccountMohka).ray("LogOut").eshe(function(){
SunMohka.SignInBar.signinliORusername.ray("SignIn")
SunMohka.SignInBar.signinliORusername.mode = "SignIn"
Users.AccountMohka.invis()
Users.signOut()
}.bind(this)).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

Users.Inventory = Crystalline.maaelle('div',0,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")
Users.Inventory.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Inventory).ray("Inventory").vcenter()
Users.Inventory.Items = Crystalline.maaelle('div',0,1/8,1,7/8,Users.Inventory).rhap("7","255,255,255,1","1","solid").flow("o")
Users.Inventory.Items.vItem = []

Users.Inventory.Items.erenlupe = function(tani,corsa,sen){

let hema = Crystalline.maaelle('div',0,0,1,1)

return hema

}.bind(this)




Users.Friends = Crystalline.maaelle('div',1/2,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.Friends.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Friends).ray("Friends").vcenter()




Users.History = Crystalline.maaelle('div',0,5/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.History.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.History).ray("History").vcenter()

Users.History.Melo = Crystalline.maaelle('div',0,1/8,1/9,7/8,Users.History).rhap("0","255,255,255,1","1","solid")

Users.History.Melo.liItems = Crystalline.maaelle('div',0,0,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Items")

Users.History.Melo.liComments = Crystalline.maaelle('div',0,1/6,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Comments")

//bottom bar of page to be a generic banner until person ranks on a leaderboard, at which point upgrades to 'where u are on leaderboard'








window.Creatures = {}



Creatures.magicspell = async function(what,thing,next){ 
    await fetch('https://rosinvault.glitch.me/'+what, { method: 'POST', headers: { 'Content-Type': 'application/json'}, body: JSON.stringify(thing)}).then(response => response.json()).then(data => next(data)).catch(error => alert(error))  
  }


Creatures.getUpdates = async function(){ 
await Creatures.magicspell("getUpdates",{},function(data){
Creatures.UpdatesMohka.aera.ray("")
Creatures.UpdatesMohka.aera.entries = []
let entries = data.entries.split(`:;:

`)
for(i=0;i<entries.length;i++){
let ha = entries[i].split(`:::

`)
if(ha[1].indexOf("RosinVault, ") != -1){
ha[1] = ha[1].replace("Allotopia, ","")
ha[1] = ha[1].replace("RosinVault, ","")
ha[1] = ha[1].replace("GrowingHome, ","")
ha[1] = ha[1].replace("BeautifulPeople2, ","")
Creatures.UpdatesMohka.aera.entries[i] = Crystalline.maaelle('div',0,(1/6)*i,1,1/6,Creatures.UpdatesMohka.aera)
Crystalline.maaelle('div',0,0,1/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[0]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
 Crystalline.maaelle('div',1/4,0,3/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[1]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
}
}
    })
  }
  








Creatures.UpdatesMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).dalcorsa("0,0,0,1").sunano().invis().front("50")

Creatures.UpdatesMohka.supdate = ""

Creatures.UpdatesMohka.getViewUpdates = async function(){
Creatures.magicspell("getViewUpdates",{},function(data){
Creatures.UpdatesMohka.viewcount.ray("Views: "+data.views)
})
  }
  




Creatures.UpdatesMohka.aera = Crystalline.maaelle('div',0,1/12,1,11/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").flow("o")

Creatures.UpdatesMohka.returnli = Crystalline.maaelle('div',0,0,1/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter().ray("Return").eshe(function(){
clearInterval(Creatures.UpdatesMohka.supdate)
Creatures.UpdatesMohka.invis()
}.bind(this))

Creatures.UpdatesMohka.viewcount = Crystalline.maaelle('div',5/8,0,3/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter()



Creatures.addUpdatesBottomBar = function(){
let hema = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
Creatures.UpdatesMohka.getViewUpdates()
Creatures.UpdatesMohka.supdate = setInterval(function(){
Creatures.UpdatesMohka.getViewUpdates()
}.bind(this),5000)
Creatures.getUpdates()
Creatures.UpdatesMohka.visible()
}.bind(this)).ray("Updates")
SunMohka.BottomBar.Add(hema)
}.bind(this)







//////////////////////////////////////////////////

































































































let Comments = {}
Comments.submit = function(hem,hsen){
let ish = Crystalline.lseall("in")
if(ish == "o"){
let thing = {}
thing.aera = hem
thing.when = Date.now()
thing.which = hsen
thing.name = SunMohka.SignInBar.signinliORusername.sunaera()
Creatures.magicspell("askToComment",function(data){
Crystalline.say("Comment Submitted")
})
}
}.bind(this)















Profile ={}
Profile.referer = ""
Profile.refercount = ""
Profile.refercode = ""
Profile.Comments = {}
Profile.Comments.History = {}
Profile.Comments.History.topRanked = function(){
let hema = {}

return hema
}.bind(this)

// (leaf rating system)








































































let Store = {}
Store.createStore = function(){
SunMohka.StoreLi = Crystalline.maaelle('div',0,0,1,1).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").vcenter().corsaera("255,255,255,1").ray("Store").eshe(function(){
SunMohka.StoreMohka.vis()
}.bind(this))
SunMohka.StoreMohka = Crystalline.maaelle('div',0,0,1,1).sunano().dalcorsa("0,0,0,1").corsaera("255,255,255,1").front("203").invis()
SunMohka.StoreMohka.returnLi = Crystalline.maaelle('div',0,0,1/9,1/12,SunMohka.StoreMohka).ray("return").vcenter().dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").eshe(function(){
SunMohka.StoreMohka.invis()
}.bind(this))


SunMohka.TopBar.Add(SunMohka.StoreLi)
return SunMohka.StoreLi
}.bind(this)






























Creatures.createTimeBar = function(x,y,w,h,ano){
let hema = {}
hema.TimeBar = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.TimeBar.heartdrum = setInterval(function(){
if(hema.time != ""){
let timesofar = Date.now() - hema.time
let days = (((timesofar/1000)/60)/60)/24
let hours = ((timesofar/1000)/60)/60
let minutes = (timesofar/1000)/60
let seconds = timesofar/1000

if(hours < 1){
hema.TimeBar.barhourm.lo(0,0,hours,1)
hema.TimeBar.bartwohoursm.lo(0,0,0,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 1 && hours < 2){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,hours-1,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 2 && hours < 3){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,hours-2,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 3 && hours < 6){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,(hours-3)/3,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 6 && hours < 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,(hours-6)/6,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,1,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,(hours-12)/6,1)
}

}

}.bind(this),1000)

hema.TimeBar.maa = function(){
Creatures.magicspell("getTimeAndCollects",{},function(data){
if(data.signedIn != "l"){
hema.time = data.timesofar
}
}.bind(this))
}.bind(this)

window.Zogladorium = hema.TimeBar.maa
hema.TimeBar.betKoCollect = Crystalline.maaelle('div',1/4,1/16,2/4,1/8,hema.TimeBar).invis().corsaera("0,255,0,1").rai(0).vcenter().aerasun("0,255,0,1")
hema.TimeBar.timeshow = Crystalline.maaelle('div',0,1/4,1,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").dalcorsa("42,18,59,1")
hema.TimeBar.barhour = Crystalline.maaelle('div',0,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("1 Hour")
hema.TimeBar.bartwohours = Crystalline.maaelle('div',1/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("2 Hours")
hema.TimeBar.barthreehours = Crystalline.maaelle('div',2/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("3 Hours")
hema.TimeBar.barsixhours = Crystalline.maaelle('div',3/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("6 Hours")
hema.TimeBar.bartwelvehours = Crystalline.maaelle('div',4/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("12 Hours")
hema.TimeBar.bartwentyfourhours = Crystalline.maaelle('div',5/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("24 Hours")

hema.TimeBar.barhourm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barhour).dalcorsa("0,255,0,1")
hema.TimeBar.bartwohoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwohours).dalcorsa("0,255,0,1")
hema.TimeBar.barthreehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barthreehours).dalcorsa("0,255,0,1")
hema.TimeBar.barsixhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barsixhours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwelvehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwelvehours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwentyfourhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwentyfourhours).dalcorsa("0,255,0,1")

hema.TimeBar.reward = {}
hema.TimeBar.reward.claimli = Crystalline.maaelle('div',3/9,2/4,3/9,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").vcenter().ray("Collect your points!").eshe(function(){
Creatures.magicspell("timebarCollect",{},function(data){
Users.refreshMoney()
hema.TimeBar.maa()
hema.TimeBar.betCollect(data.amountCollected)
})

}.bind(this))

hema.TimeBar.reward.first = Crystalline.maaelle('div',0,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.second = Crystalline.maaelle('div',1/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.third = Crystalline.maaelle('div',2/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fourth = Crystalline.maaelle('div',3/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fifth = Crystalline.maaelle('div',4/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.sixth = Crystalline.maaelle('div',5/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")




hema.TimeBar.reward.corsahourc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.first).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwohoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.second).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsathreehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.third).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsasixhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fourth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwelvehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fifth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwentyfourhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.sixth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()

hema.TimeBar.reward.corsahour = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.first).vcenter().ray("+ 5")
hema.TimeBar.reward.corsatwohours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.second).vcenter().ray("+ 4")
hema.TimeBar.reward.corsathreehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.third).vcenter().ray("+ 2")
hema.TimeBar.reward.corsasixhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fourth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwelvehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fifth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwentyfourhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.sixth).vcenter().ray("+ 0")

hema.TimeBar.betCollect = function(hemsen){
let raera = ""
if(hemsen == undefined){
raera = "An hour has not passed yet."
}else{
raera = hemsen + " points collected!"
}
hema.TimeBar.betKoCollect.ray(raera)
hema.TimeBar.betKoCollect.rai(0)
let op = 0
let dalo = "p"
hema.TimeBar.betKoCollect.vis()
let hx = setInterval(function(){
let opp = op
if(op>1){opp=1}
hema.TimeBar.betKoCollect.rai(opp)
if(dalo=="p"){op=op+0.02}
if(op>=2){op=1
dalo="l"}
if(dalo=="l"){op=op-0.01}
if(op<0){hema.TimeBar.betKoCollect.invis()
clearInterval(hx)}

}.bind(this),10)
}.bind(this)


hema.TimeBar.maa()
return hema.TimeBar
}.bind(this)




//10 questions per day






















Creatures.Gamble = {}

Creatures.Gamble.maa = function(x,y,w,h,ano){
Creatures.Gamble.Mohka = Crystalline.maaelle('div',x,y,w,h,ano)

Creatures.Gamble.getQuestions = async function(){
await Creatures.magicspell("getMyDailyQuestions",{},function(hem){
if(hem.q1aera != ""){
let q = hem.q1aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question1.ray(q[0]+" vs "+q[1])
Creatures.Gamble.Mohka.q1t1.sen = hem.q1
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.vis()
Creatures.Gamble.Mohka.question1.vis()
Creatures.Gamble.Mohka.q1t1.vis()
Creatures.Gamble.Mohka.q1t1.ray(q[0])
Creatures.Gamble.Mohka.q1t2.vis()
Creatures.Gamble.Mohka.q1t2.ray(q[1])
}else{
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.invis()
Creatures.Gamble.Mohka.question1.invis()
Creatures.Gamble.Mohka.q1t1.invis()
Creatures.Gamble.Mohka.q1t1.ray("")
Creatures.Gamble.Mohka.q1t2.invis()
Creatures.Gamble.Mohka.q1t2.ray("")
}

if(hem.q2aera != ""){
let qb = hem.q2aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question2.ray(qb[0]+" vs "+qb[1])
Creatures.Gamble.Mohka.q2t1.sen = hem.q2
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.vis()
Creatures.Gamble.Mohka.question2.vis()
Creatures.Gamble.Mohka.q2t1.vis()
Creatures.Gamble.Mohka.q2t1.ray(qb[0])
Creatures.Gamble.Mohka.q2t2.vis()
Creatures.Gamble.Mohka.q2t2.ray(qb[1])
}else{
Creatures.Gamble.Mohka.q2t1.sen = ""
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.invis()
Creatures.Gamble.Mohka.question2.invis()
Creatures.Gamble.Mohka.q2t1.invis()
Creatures.Gamble.Mohka.q2t1.ray("")
Creatures.Gamble.Mohka.q2t2.invis()
Creatures.Gamble.Mohka.q2t2.ray("")
}

}.bind(this))
}.bind(this)
Creatures.Gamble.answerQuestion = async function(questionsen,answer,amount){
await Creatures.magicspell("gambleAnswerQuestion",{questionsen:questionsen,answer:answer,amount:amount},function(hem){if(hem.answered == "o"){
Users.refreshMoney()
Creatures.Gamble.getQuestions()
}}.bind(this))
}.bind(this)

Creatures.Gamble.Mohka.streak = Crystalline.maaelle('div',0,1/2,1/2,1/2,Creatures.Gamble.Mohka).ray("Enable Streak").vcenter().rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1").eshe(function(){
if(Creatures.Gamble.Mohka.streak.on == "l"){
Creatures.Gamble.Mohka.streak.on = "o"
Creatures.Gamble.Mohka.streak.ray("Streak Enabled!")
Creatures.Gamble.Mohka.streak.rhap("7","0,0,0,1","1","solid").dalcorsa("0,255,0,1").corsaera("0,0,0,1")
Creatures.Gamble.Mohka.Amount1.ray("5")
Creatures.Gamble.Mohka.Amount2.ray("5")
}else{
Creatures.Gamble.Mohka.streak.on = "l"
Creatures.Gamble.Mohka.streak.ray("Enable Streak")
Creatures.Gamble.Mohka.streak.rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")
}

}.bind(this))
Creatures.Gamble.Mohka.streak.on = "l"

Creatures.Gamble.Mohka.questiongetnext = Crystalline.maaelle('div',0,0,1/2,1/2,Creatures.Gamble.Mohka).ray("Get new questions").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){


}.bind(this))

Creatures.Gamble.Mohka.Questions = Crystalline.maaelle('div',1/2,0,1/2,1,Creatures.Gamble.Mohka)


Creatures.Gamble.Mohka.question1 = Crystalline.maaelle('div',0,0,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q1t1 = Crystalline.maaelle('div',2/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t1.sunaera(),amt)

}.bind(this)).invis()
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.q1t2 = Crystalline.maaelle('div',5/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount1 = Crystalline.maaelle("aera",2/7,1/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


Creatures.Gamble.Mohka.question2 = Crystalline.maaelle('div',0,4/7,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q2t1 = Crystalline.maaelle('div',2/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t1.sunaera(),amt)
Creatures.Gamble.Mohka.q2t1.sen = ""

}.bind(this)).invis()
Creatures.Gamble.Mohka.q2t2 = Crystalline.maaelle('div',5/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount2 = Crystalline.maaelle("aera",2/7,5/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


return Creatures.Gamble.Mohka
}.bind(this)

Creatures.Gamble.Aerakormaa = function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)

return hema
}.bind(this)





























Creatures.Leaderboard = {}
Creatures.Leaderboard.maa = function(hem,x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.type = hem
hema.Tani = Crystalline.maaelle('div',0,0,1,1/7,hema).ray(hem).vcenter().rhap("7","255,255,255,1","1","solid")
return hema
}.bind(this)










































Creatures.Bulletin = {}
Creatures.Bulletin.maa = function(x,y,w,h,ano){
Creatures.Bulletin.Mohka = Crystalline.maaelle('div',x,y,w,h,ano).rhap("7","255,255,255,1","1","solid")
Creatures.Bulletin.Mohka.JustReleasedItemsTani = Crystalline.maaelle('div',0,0,1,1/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid").ray("Just Released! (within 72hours)").vcenter()

Creatures.Bulletin.Mohka.JustReleasedItems = Crystalline.maaelle('div',0,1/9,1,4/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid")
Creatures.maaLleslai("Dab","Released","Left",100,0,0,1,1,Creatures.Bulletin.Mohka.JustReleasedItems,"","Nothing in the last 72 hours.")

Creatures.Bulletin.Mohka.WelcomeNewMembers = Crystalline.maaelle('div',0,5/9,1,2/9,Creatures.Bulletin.Mohka).ray("Welcome New Members").vcenter().rhap("0","255,255,255,1","1","solid")

Creatures.Bulletin.Mohka.RememberYourPoints = Crystalline.maaelle('div',0,7/9,1,2/9,Creatures.Bulletin.Mohka).ray("Remember Your Points").vcenter().rhap("0","255,255,255,1","1","solid").eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))

return Creatures.Bulletin.Mohka
}.bind(this)































Creatures.maaLleslai = function(hemdal,hemsort,slideway,slidespeed,x,y,w,h,ano,mcorsa,mtani){
let hema = Crystalline.maaelle('div',x,y,w,h,ano).rhap("0","255,255,255,1","1","solid")
hema.type = hemdal
hema.sort = hemsort
hema.slideway = slideway
hema.slidespeed = slidespeed

hema.slideHolder = Crystalline.maaelle('div',0,0,16/18,1,hema).dalcorsa("255,255,255,1").front("3").flow("o").dalcorsa(mcorsa)
hema.slides = []

hema.slideHolderEmpty = Crystalline.maaelle('div',0,0,1,1,hema.slideHolder).vcenter().ray(mtani).invis().aeraAlign("center").aeraeren(28).dalcorsa("0,0,0,0.8")



hema.onSlide = 0
hema.autoplaying = "o"


hema.sliderele = []
hema.seconds = 0

hema.rele = setInterval(function(){
if(hema.slides.length > 0){
hema.slideHolderEmpty.invis()
}else{hema.slideHolderEmpty.vis()}
for(i=0;i<hema.sliderele.length;i++){
hema.sliderele[i]()
}},1000)
hema.slidewidth = 1000
hema.heartdrumsen = 0
hema.heartdrum = setInterval(function(){
if(hema.autoplaying == "o" && hema.slides.length > 0){
hema.heartdrumsen++
if(hema.heartdrumsen>hema.slides.length*hema.slidewidth){
hema.heartdrumsen=0
hema.slideHolder.scroll({
left: hema.heartdrumsen,
top:0,
behavior: "instant",
})
}else{
hema.slideHolder.scroll(hema.heartdrumsen,0)
}
}
}.bind(this),hema.slidespeed)

hema.CreateSlide = function(hemb,time,last){
hemb.Mohka = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1")
hemb.Mohka.Title = Crystalline.maaelle('div',1/9,0,7/9,1/7,hemb.Mohka).ray(hemb.ShowotronTitle).vcenter()
hemb.Mohka.Image = Crystalline.maaelle('div',0,1/7,1,4/7,hemb.Mohka).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hemb.Mohka.Countdown = Crystalline.maaelle('div',1/9,2/7,7/9,2/7,hemb.Mohka).vcenter()



if(hema.sort=="Upcoming"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = time-now
if(when > 0){
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)

}else{
hemb.Mohka.Countdown.ray(`<span style='color:rgb(255,215,105)'>Just Released!</span>`)

}
})
}

if(hema.sort=="Released"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = now-time
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)
})
}





hemb.Mohka.Description = Crystalline.maaelle('div',0,5/7,1,2/7,hemb.Mohka).ray(hemb.ShowotronDescription).vcenter()
let hemlink = Crystalline.maaelle('div',0,0,1,1).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hema.slideHolder.add(hemb.Mohka,hemlink,last)
}.bind(this)

hema.getSlidesFromServer = async function(){
await Creatures.magicspell("getEntries",{},hema.getSlidesFromServerXX)   
  }

hema.getSlidesFromServerXX = async function(hem){
let vslides = hem.entries.split(",")
for(i=0;i<vslides.length;i++){
hema.getSlideFromServer(vslides[i],"l",i,vslides.length)
}
}.bind(this)





hema.getSlideFromServer = async function(hemx,last,sen,vsen){
await Creatures.magicspell("loadEntry",{entrylocation:hemx},function(hem){
let datas = hem.entry.split("~*^*~")
let hemb = {}
hemb.entrynumber = datas[0]
hemb.entryname = datas[1]
hemb.entryimage = datas[2]
hemb.entrydescription = datas[3]
hemb.entryattributes = datas[4]
hemb.entrytype = datas[5]
hemb.ekkattributes = [] 
let vattribute = hemb.entryattributes.split("~x*^*x~")
for(i=0;i<vattribute.length;i++){
let atr = vattribute[i].split("~!*^*!~")
hemb.ekkattributes.push(atr)
let f = atr[0]
let ood = atr[1]
hemb[f] = ood
}

if(hemb.entrytype == hema.type){
if(hema.sort=="Upcoming"){

let nowdate = Date.now()
let onShowotron = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
let daysbefore = parseInt(hemb.DaysBeforeReleaseAddToGalleryAndShowotron) * 24 * 60 * 60 * 1000
if(day-daysbefore < now && day > now - (24*60*60*1000)){
onShowotron = "o"
}
if(onShowotron == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}

}

}
if(hema.sort=="Released"){
let nowdate = Date.now()
let onJustReleased = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
if(now > day && now < day +3*(24*60*60*1000)){
onJustReleased = "o"
}
if(onJustReleased == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}
}//Released


}


}//Dab
if(sen == vsen-1 && hema.slides.length > 0){hema.CreateSlide(hema.SunHemb,hema.SunTime,"o")}


}.bind(this))
 }


hema.slideHolder.add = function(hem,hemlink,last){
if(last=="l"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hemlink.lo(0,(1/10)+(1/5)*hema.slides.length,1,1/10)
hemlink.slidesen = hema.slides.length
hemlink.eshe(function(){
if(hema.autoplaying=="l"){
hema.autoplaying = "o"
}


if(Math.floor(hema.slidewidth*hemlink.slidesen) != Math.floor(hema.slideHolder.scrollLeft)){
hema.autoplaying = "l"
hema.slideHolder.scroll({
left: hema.slidewidth*hemlink.slidesen,
top:0,
behavior: "smooth",
})
}




}.bind(this))
hem.eshe(function(){
alert("hi")

}.bind(this))
hema.vli.ano(hemlink)
hema.slides.push(hem)
}
if(last=="o"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hem.eshe(function(){
alert("hi")

}.bind(this))
//hema.slides.push(hem)
}
}.bind(this)



hema.vli = Crystalline.maaelle('div',16/18,0,2/18,1,hema).dalcorsa("0,0,0,0.8").flow("o").front("5")
hema.getSlidesFromServer()


return hema
}.bind(this)


















Creatures.RTree = function(x,y,w,h,ano,leafsia,leaferen){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.MyRefCode = Crystalline.maaelle('div',1/2,0,1/2,1,hema)
hema.vLeaf = Crystalline.maaelle('div',0,0,1/2,1,hema)

hema.getLeafDalcorsa = function(){
let lf = Crystalline.fate(leaferen)
let lc = leafsia+lf+".png"
return lc
}.bind(this)

hema.vLeaf.leaf0 = Crystalline.maaelle('div',0,0/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(leafsia+"X.png").dalcorsalsen().dalcorsavcenter()
let ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf1 = Crystalline.maaelle('div',0,1/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf2 = Crystalline.maaelle('div',0,2/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf3 = Crystalline.maaelle('div',0,3/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf4 = Crystalline.maaelle('div',0,4/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()

return hema
}.bind(this)













Creatures.addUpdatesBottomBar()


let homeli = Crystalline.maaelle('div',0,0,1,1).ray("Home").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","home")
}.bind(this))
SunMohka.TopBar.Add(homeli)

let galleryli = Crystalline.maaelle('div',0,0,1,1).ray("Vault").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","vault")
}.bind(this))
SunMohka.TopBar.Add(galleryli)

let gambleli = Crystalline.maaelle('div',0,0,1,1).ray("Gamble").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))
SunMohka.TopBar.Add(gambleli)
Users.createSignInBar("S")
let referalli = Crystalline.maaelle('div',0,0,1,1).ray("Referal").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","refer")
}.bind(this))
SunMohka.TopBar.Add(referalli)
</script></body>
</html>&&&&&&<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RosinVault</title>
   <script src="three.min.js"></script>
   <script src="GLTFLoader.js"></script>
  </head>
  <body><script>window.siartani = "refer"

window.siartanilo = "RosinVault"

window.Crystalline = {

raphos: function(hem){
 





hem.aeralign = function(hema){if(hema=="o" || hema==undefined){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }



















hem.vcenter = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
hem.style.alignItems = "center"
         return hem
         }

hem.vcenterles = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
         return hem
         }

hem.vcenterphel = function(){hem.style.display = "flex"
hem.style.alignItems = "center"
         return hem
         }

hem.vsel = function(){hem.style.display = "flex"
hem.style.justifyContent = "left"
hem.style.textAlign = "left"
         return hem
         }

hem.vles = function(){hem.style.display = "flex"
hem.style.textAlign = "right"
hem.style.justifyContent = "right"
         return hem
         }



hem.eshe = function(hema){
if(hem.hematype == "select"){
hem.onchange = hema}else{
hem.onclick = hema
}
          return hem
          }



















































































hem.dalcorsalsen = function(){hem.style.backgroundRepeat = "no-repeat"
                                      
         return hem
         }





hem.dalcorsavcenter = function(){hem.style.backgroundPosition = "center"
                                     
         return hem
         }















hem.dalcorsa = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.Background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

         hem.corsadal = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"} 
         return hem
         }

















hem.noselect = function(hema){
               hema.style.userSelect = "none"
          return hem}

hem.border = function(radius,color,width,style){
          hem.style.borderRadius = "7px"
          hem.style.borderColor = "rgba(255,255,255,1)"
          hem.style.borderWidth = "3px"
          hem.style.borderStyle = "double"
          if(arguments.length>0){hem.style.borderRadius = radius}
           if(arguments.length>1){hem.style.borderColor = "rgba("+color+")"}
           if(arguments.length>2){hem.style.borderWidth = width}
           if(arguments.length>3){hem.style.borderStyle = style}
           return hem
         }

         

         

         

         hem.ona = function(){
         for(this.iuuuui=0;this.iuuuui<arguments.length;this.iuuuui++){
           hem.removeChild(arguments[this.iuuuui]) 
          }
          return hem
         }

         hem.font = function(hema){hem.style.fontFamily = hema
          return hem
          }

          
         
         
         
         
         
         
         
         


         
      
         
         
         




  hem.dalcorsascroll = function(){hem.style.backgroundAttachment = "scroll"
                                     
         return hem
         }

hem.white = function(){hem.style.whiteSpace = "pre"
                                     
         return hem
         }


hem.dalcorsalscroll = function(){hem.style.backgroundAttachment = "fixed"
                                      
         return hem
         }


hem.dalcorsaliscroll = function(){hem.style.backgroundAttachment = "local"
                                      
         return hem
         }


hem.dalcorsasen = function(){hem.style.backgroundRepeat = "repeat"
                                      
         return hem
         }



hem.dalcorsaeren = function(){hem.style.backgroundSize = "cover"
                                      
         return hem
         }



hem.dalcorsaloeren = function(){hem.style.backgroundSize = "contain"
                                      
         return hem
         }

hem.dalcorsahem = function(){hem.style.backgroundSize = "100% 100%"
                                      
         return hem
         }



         hem.textEdge = function(hema){if(hema=="o"){hem.style.whiteSpace = "wrap"}
                                       if(hema=="l"){hem.style.whiteSpace = "nowrap"}
         return hem
         }
              



hem.koil = function(){hem.style.userSelect = "none"
                                      
         return hem
         }



hem.front = function(hemb){hem.style.zIndex = hemb
                                      
         return hem
         }

hem.dal = function(hemb){hem.type = hemb
                                      
         return hem
         }





































































































































hem.ray = function(hema){












let hn = ""
if(hema != undefined){hn=hema}
         if(hem.hematype == "textarea"){hem.value = hn}
if(hem.hematype == "aera"){hem.value = hn}
if(hem.hematype == "notaera"){hem.value = hn}
if(hem.hematype == "select"){hem.value = hn}
if(hem.hematype == "input"){hem.value = hn}
if(hem.hematype == "div"){hem.innerHTML = hn}
if(hem.hematype == "button"){hem.textContent = hn}
if(hem.hematype == "option"){hem.textContent = hn
hem.value = hn}
         return hem
         }







hem.aeraeren = function(hema){hem.style.fontSize = hema+"px"
         return hem
         }
hem.textSize = function(hema){hem.style.fontSize = hema 
         return hem
         }



















hem.sunano = function(hema){
               document.body.appendChild(hem)
          return hem}

















hem.ano = function(){
         for(this.iuuui=0;this.iuuui<arguments.length;this.iuuui++){
           hem.appendChild(arguments[this.iuuui]) 
          }
          return hem
         }

























hem.vis = function(){hem.style.display = "flex"
                                      
         return hem
         }

hem.visible = function(){hem.style.display = "flex"
                                      
         return hem
         }







hem.invis = function(){hem.style.display = "none"
                                      
         return hem
         }
hem.invisible = function(){hem.style.display = "none"
                                      
         return hem
         }




















hem.sunaera = function(){
if(arguments.length == 1){hem.innerHTML = arguments[0]
         return hem
         }
if(arguments.length == 0 && hem.hematype == "textarea"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "select"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "input"){
return hem.value
}
if(arguments.length == 0 && hem.hematype != "textarea"){
         return hem.innerHTML
         }
}





hem.aeradal = function(hema){hem.style.fontFamily = hema
         return hem
         }


hem.aeraeshe = function(hema){hem.oninput = hema
          return hem
          }





hem.aeracorsa = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }
hem.textColor = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }









         










hem.aeraglow = function(hema){hem.style.textShadow = "0px 0px 4px rgba(" + hema +")"
         return hem
         }











hem.ama = function(hema){hem.placeholder = hema 
         return hem
         }

hem.hint = function(hema){hem.placeholder = hema 
         return hem
         }



















hem.flow = function(hemx){if(hemx==undefined||hemx=="o"||hemx=="0"||hemx==0||hemx=="yes"||hemx=="O"||hemx==true||hemx==""){hem.style.overflow = "auto"}
if(hemx=="l"||hemx=="L"||hemx==1||hemx=="no"||hemx==false){hem.style.overflow = "hidden"}
if(hemx!=undefined){

if(hemx.toLowerCase()=="lleslai"){hem.style.overflowX = "auto"}
if(hemx.toLowerCase()=="phellai"){hem.style.overflowY = "auto"}



}

hem.style.scrollBehavior = "smooth"
          return hem}











hem.aerasun = function(hema){hem.style.textShadow = "0 0 8px rgba("+hema+")"
         return hem
         }





hem.aeraAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }

hem.textAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }




































hem.corsaera = function(hema){
hem.style.color = "rgba("+hema+")"
         return hem
         }




hem.lo = function(x,y,w,h){
          this.lo(hem,x,y,w,h)
return hem
         }.bind(this)

hem.loles = function(x){
          this.loles(hem,x)
return hem
         }.bind(this)

hem.losel = function(x){
          this.losel(hem,x)
return hem
         }.bind(this)

hem.lophel = function(x){
          this.lophel(hem,x)
return hem
         }.bind(this)

hem.lolehp = function(x){
          this.lolehp(hem,x)
return hem
         }.bind(this)

hem.getWidth = function(){
let hema = hem.getBoundingClientRect()

return hema.width
}.bind(this)


hem.getHeight = function(){
let hema = hem.getBoundingClientRect()

return hema.height
}.bind(this)












































hem.rai = function(hema){hem.style.opacity = hema
         return hem
         }



























































hem.rhap = function(radius,color,width,style){
          hem.style.borderRadius = radius + "px"
          hem.style.borderColor = "rgba("+color+")"
          hem.style.borderWidth = width+"px"
          hem.style.borderStyle = style
           return hem
         }





hem.rhapdal = function(hema){hem.style.borderStyle = hema 
         return hem
         }
         hem.rhapcorsa = function(hema){hem.style.borderColor = "rgba("+hema+")" 
         return hem
         }
         hem.rhaperen = function(hema){hem.style.borderWidth = hema
         return hem
         }

hem.rhaprele = function(hema){hem.style.borderRadius = hema+"px"
         return hem
         }
 





hem.borderradiuses = function(tl,tr,br,bl){
hem.style.borderTopLeftRadius = tl+"px"
hem.style.borderTopRightRadius = tr+"px"
hem.style.borderBottomRightRadius = br+"px"
hem.style.borderBottomLeftRadius = bl+"px"
return hem
}


hem.borhap = function(padding){
          hem.style.padding = padding + "px"
           return hem
         }





























































































return hem
        },


seall: function(aera,siar){Kt.seall(aera,siar)},











melosiar: function(siar,hemfun){
    var client = new XMLHttpRequest()
     client.open('GET',siar)
   client.onreadystatechange = function(){
if(client.readyState == 4 && client.status == 200){hemfun(client.responseText)}}
client.send()
   },



















copyAssets: function(aera){Kt.copyAssets(aera)},


hCopyAssets: function(aera){Kt.hCopyAssets(aera)},

copyAssetsCal: function(aera){Kt.copyAssetsCal(aera)},


hCopyAssetsCal: function(aera){Kt.hCopyAssetsCal(aera)},

reloadprogramcal: function(){Kt.reloadprogramcal()},





say: function(hem){Kt.say(hem)},











lseall: function(siar){return Kt.lseall(siar)},






















maaRaynotaera: function(aeralo,x,y,w,h,ano){
let hema = Crystalline.maaelle('aera',x,y,w,h,ano).aeraeshe(function(){
Crystalline.seall(hema.sunaera(),hema.siar)

}.bind(this))

hema.siar = aeralo
hema.ray(Crystalline.lseall(hema.siar))

























},








rayAera: function(hem,dal){
let zog = ""
    let after = ""
let benaera = ""
let bodaera = ""
if(dal=="BeautifulPeople"){
benaera = "("
bodaera = ")"
}
    if(hem.indexOf("in the styles of the artists")!=-1){
    zog = hem.substring(0,hem.indexOf("in the styles of the artists"))
    after = hem.substring(hem.indexOf("in the styles of the artists"),hem.length)
    }else{
      zog = hem
    }
  let maera = hem.split(" ")
  let which = Crystalline.fate(maera.length)
let sen = Crystalline.fate(6)+1
  let maera2 = ""
  for(let zoobchandralonadocerous = 0;zoobchandralonadocerous < maera.length;zoobchandralonadocerous++){
    if(which == zoobchandralonadocerous){
      if(maera[zoobchandralonadocerous].substring(0,2)=="((" || maera[zoobchandralonadocerous].substring(maera[zoobchandralonadocerous].length-2,maera[zoobchandralonadocerous].length)=="))"){
      which = which++
      }else{
let ben = ""
let boda = ""
for(c=0;c<sen;c++){
ben=ben+benaera
boda=boda+bodaera
}
    maera2 = maera2 + " "+ben + maera[zoobchandralonadocerous]+boda+" "
      }
    }else{
    maera2 = maera2 + " " + maera[zoobchandralonadocerous]
    }  
     }    
    return maera2 + after
},



generateSeed: function(){
   let seed = Crystalline.fate(4294967295)+1
   return seed
  },


BeautifulGallery: function(x,y,w,h,ano){
let galleria = Crystalline.maaelle('div',x,y,w,h,ano)
galleria.settings = {}
  galleria.settings.gallery = true
  galleria.settings.sort = "recent"
  galleria.settings.adaptiveHeight = true
  galleria.settings.style = "background-color:rgba(0,0,0,0)"
  galleria.settings.forceColorScheme = "dark"
let c = image(galleria.settings).evaluateItem
  galleria.ray(c)
},

BeautifulStory: function(ask,x,y,w,h,ano){
let textia = Crystalline.maaelle('div',x,y,w,h,ano)
textia.settings = {}
 textia.settings.instruction = ask  
let c = aitext(textia.settings)
  textia.ray(c)
},

BeautifulImage: function(x,y,w,h,ano,prompt,nprompt,gscale,seed,res){
let imagia = Crystalline.maaelle('div',x,y,w,h,ano)
imagia.settings = {}
  imagia.settings.prompt = prompt
  imagia.settings.negativePrompt = nprompt
 imagia.settings.guidanceScale = gscale
 imagia.settings.seed = seed
 imagia.settings.resolution = res
let c = image(imagia.settings).evaluateItem
  imagia.ray(c)
//YTILIBATAPMOC
},




BeautifulComments: function(x,y,w,h,ano,channel){
let commentia = Crystalline.maaelle('div',x,y,w,h,ano)
commentia.settings = {}
  commentia.settings.spiritguides = true
  commentia.settings.loadFonts = "Emilys Candy"
 commentia.settings.channel = channel
 commentia.settings.commentPlaceholderText = "meow"
 commentia.settings.submitButtonText = "meow"
commentia.settings.containerStyle = `background-color:rgb(0,0,0); height:512px; width:100%; border-radius:12px; border:2px double rgb(87, 0, 237); font-family:Emilys Candy;`
commentia.settings.messageBubbleStyle = `background:rgba(255,255,255,0.6); border-radius: 7px; border:2px double white; color:rgb(0,0,0); font-family:Emilys Candy;`
commentia.settings.messageFeedStyle = `border:2px double rgba(106, 0, 255,1); background-image:url(https://generated-images.perchance.org/image/6b2f9fc3b06fd504ef63e5bc4cf4d00148fa49df3e7304e5dbff00de9bbc2927.jpeg); border-radius: 7px; font-family:Emilys Candy;`
commentia.settings.inputAreaStyle = `background-color:rgb(0,0,0); font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(255,255,255);`
commentia.settings.submitButtonStyle = `width:100%;background-color: rgba(61, 242, 255,1); border:none; font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(0,0,0)`
commentia.settings.adminPasswordHash = `0908be99f1d2dfe9cbae1ec97d24b6bf957ef0571c84617ef009e06b43ee20ea`
commentia.settings.adminFlair = `meow`
commentia.settings.width = `400`
commentia.settings.bannedWords = "cbat"
//commentia.settings.customEmojis = {import:allos-emoji-list}
commentia.settings.loneCustomEmojiSizeMultiplier = "3"
commentia.settings.customEmojiSize = "1.2"
let c = comments(commentia.settings).evaluateItem
  commentia.ray(c)
//YTILIBATAPMOC
},





  
  
  
  
  
  
  

  
  
  
  
  
    
  
  


  

  
  
  


melosia: function(hem){return Kt.melosia(hem).split(",")},
















downloadassets: function(hemlo,hemtani){Kt.downloadassets(hemlo,hemtani)},
hseall: function(aera,siar){Kt.hseall(aera,siar)},
hlseall: function(siar){return Kt.hlseall(siar)},
        seallsiar: function(siabe,siabo){Kt.seallsiar(siabe,siabo)},
        rasiar: function(siabe){return Kt.rasiar(siabe)},
hrasiar: function(siabe){return Kt.hrasiar(siabe)},
rasia: function(siabe){return Kt.rasia(siabe)},
        seallsia: function(siabe,siabo){Kt.seallsia(siabe,siabo)},
celestiall: function(siabe,siabo){Kt.celestiall(siabe,siabo)},
        seallver: function(siabe,siabo){Kt.seallver(siabe,siabo)},
        kortanisia: function(siabe,siabo){Kt.kortanisia(siabe,siabo)},
hkortanisia: function(siabe,siabo){Kt.hkortanisia(siabe,siabo)},
        
maasia: function(hem){Kt.maasia(hem)},
hmelosia: function(hem){return Kt.hmelosia(hem).split(",")},
sunseall: function(aera,siar){Kt.sunseall(aera,siar)},
sunlseall: function(siar){return Kt.sunlseall(siar)},
        sunmelosia: function(hem){return Kt.sunmelosia(hem).split(",")},






















ekklinere: function(hemaera,hemekk){
let sen = hemekk.indexOf(hemaera)
if(sen != -1){
  hemekk.splice(sen, 1)
}
return hemekk
},
ekklieren: function(hemaera,hemekk){
hemekk.push(hemaera)
return hemekk
},
ekklira: function(hemaera,hemekk){
if(hemekk.includes(hemaera)){return "o"}else{return "l"}
},











componentToHex: function(c) {
  var hex = c.toString(16)
  return hex.length == 1 ? "0" + hex : hex
},

 rgbToHex: function(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b)
},



hemThree: function(tthen,tanimate,x,y,w,h,hemano){
let hema = Crystalline.maaelle('div',x,y,w,h,hemano)

Crystalline.Corsan = hema
hema.threescript = tanimate
hema.threeobjects = []
hema.threeactive = false
hema.Textures = []
hema.animate = function(){ 	
                      	if(hema.threeactive == true){
for(i=0;i<hema.threeobjects.length;i++){
hema.threeobjects[i]()
}
hema.threescript()
//hema.ORBITCONTROLS.update()
hema.RENDERER.render( hema.SCENE, hema.CAMERA )
}
let ani = hema.animate.bind(this)
requestAnimationFrame( ani )
}.bind(this)

hema.THREE = THREE

hema.TextureLoader = new hema.THREE.TextureLoader()
//hema.GLTFLoader = new this.THREE.GLTFLoader()

let vww = Math.round(w*hemano.clientWidth)
let vhh = Math.round(h*hemano.clientHeight)

     hema.SCENE = new hema.THREE.Scene()

hema.LIGHT = new hema.THREE.AmbientLight(0xffffff,0.3)
hema.SCENE.add(hema.LIGHT)

hema.SUN = new hema.THREE.PointLight( 0xffffff, 1, 70 )
hema.SUN.position.set( 13, 20, 13 )
hema.SUN.castShadow = true
hema.SUN.shadow.mapSize.width = 26
hema.SUN.shadow.mapSize.height = 26
hema.SUN.shadow.camera.near = 1
hema.SUN.shadow.camera.far = 50
hema.SCENE.add( hema.SUN )

    hema.CAMERA = new hema.THREE.PerspectiveCamera( 90, vww/ vhh, 0.1, 1000 )
hema.cameraX = 0
hema.cameraY = 0
hema.cameraZ = 0
hema.CAMERA.position.set(0, 0, 0)



     hema.RENDERER = new hema.THREE.WebGLRenderer()
hema.RENDERER.shadowMap.enabled = true
      hema.RENDERER.setSize(vww, vhh)
hema.RENDERER.setPixelRatio(window.devicePixelRatio)

hema.ORBITCONTROLS = new hema.THREE.OrbitControls(hema.CAMERA,hema.RENDERER.domElement)
hema.ORBITCONTROLS.enabled = false
//hema.ORBITCONTROLS.enableDamping = true
//hema.ORBITCONTROLS.dampingFactor = 0.05
hema.ORBITCONTROLS.screenSpacePanning = false
hema.ORBITCONTROLS.minDistance = 30
hema.ORBITCONTROLS.maxDistance = 100

hema.T = hema.RENDERER.domElement
Crystalline.raphos(hema.T)
hema.T.lo(0,0,1,1)
hema.front(999999999999)
 hema.ano( hema.T )


















hema.createUnit = function(x,y,z,who){

let hemb = {}
hemb.represents = who
hema.tani = who
hemb.x = x
hemb.y = y
hemb.z = z
hemb.variant = ""
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hema.b,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)



hemb.removeFromMap = function(){
this.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)


hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)
}
return hemb
}.bind(this)









hema.SunRaphos = function(hemb){
























































































































































































































hemb.lookAtMe = function(){
hema.CameraLookAtObject(hemb)
return hemb
}.bind(this)














































































































hemb.position = function(rx,ry,rz){
hemb.x = rx
hemb.y = ry
hemb.z = rz
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)



hemb.wireframe = function(hem){
if(hem=="o"){
hemb.materi1.wireframe = true
}else{
hemb.materi1.wireframe = false
}
}.bind(this)



hemb.texturewrap  = function(img){
      
                   
           let mewta = new hema.THREE.TextureLoader().load(img)
                    mewta.wrapS = mewta.wrapT = hema.THREE.RepeatWrapping
                    
                    hemb.materi1.map = mewta         
                    hemb.materi1.needsUpdate = true
                  }.bind(this)




return hemb
}.bind(this)
















































































































































































































hema.maaTree = function(x,y,z){

let hemb = hema.maaS(x,y,z,2,90,2)
hema.maaS(x+6,y+14,z,10,2,2)
hema.maaS(x,y+20,z+6,2,2,10)
hema.maaS(x-6,y+26,z,10,2,2)
hema.maaS(x,y+32,z-6,2,2,10)
hema.maaS(x+6,y+38,z,10,2,2)
return hemb
}.bind(this)



hema.maaS = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(xp, yp, zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
return hemb
}.bind(this)









Crystalline.Corsan.maaLight = function(x,y,z,strength){
let light = new THREE.PointLight(0xffffff,strength)
light.position.set(x,y,z)
hema.SCENE.add(light)
}.bind(this)


Crystalline.Corsan.maaInvisithing = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(255,255,255)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(hemb.xp, hemb.yp, hemb.zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hemb.aaM()
return hemb
}.bind(this)






















































hema.cameraSpin = function(tani){
hema.ORBITCONTROLS.enabled = true
return hema
}.bind(this)




hema.cameraNonspin = function(tani){
hema.ORBITCONTROLS.enabled = false
return hema
}.bind(this)









hema.maaMaven = function(x,z,type,who){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.variant = type
hemb.present = "o"
if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{
let hm = Crystalline.melosia(type+"/Maven/Corsa")
let wm = Crystalline.fate(hm.length)
let whoo = hm[wm].replace(".png","") +"Maven"
let tew = hema.Textures[whoo]
hemb.variant = hm[wm]

if(type != "Nif"){
hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)

hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
}else{

let whooo = who +"Hazel"
let tew2 = hema.Textures[whooo]

hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })
hemb.materi2 = new hema.THREE.SpriteMaterial({ 
	map: tew2,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)
hemb.mesh2 = new hema.THREE.Sprite(hemb.materi2)
hemb.mesh2.scale.set(0.3,0.3,0.3)
hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
hema.SCENE.remove(hemb.mesh2)
hemb.materi2.dispose()
hemb.mesh2 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hemb.mesh2.position.set(hemb.x,hemb.y+1,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hema.SCENE.add(hemb.mesh2)
}

}


return hemb
}.bind(this)


































































hema.maaEditSphere = function(x,z){

let hemb = {}
hemb.x = x
hemb.y = 3
hemb.z = z

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.SphereGeometry(0.35)

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){

hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.rotatia = function(){
hemb.mesh1.rotation.x = hemb.mesh1.rotation.x+0.01
}.bind(this)
hema.threeobjects.push(hemb.rotatia)



return hemb
}.bind(this)

























































































hema.CameraLookAtPosition = function(x,y,z){
let weW = new hema.THREE.Vector3(x,y,z)
hema.CAMERA.lookAt(weW)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraPosition = function(x,y,z){
hema.cameraX = x
hema.cameraY = y
hema.cameraZ = z
hema.CAMERA.position.set(x,y,z)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraTopDown = function(){
//hema.CAMERA
}.bind(this)

hema.CameraVFov = function(hem){
hema.CAMERA.fov = hem
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraLookAtObject = function(hemc){
hema.CAMERA.lookAt(hemc.mesh1.position)
}.bind(this)

hema.cameraright = function(hem){
hema.cameraX = hema.cameraX+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraleft = function(hem){
hema.cameraX = hema.cameraX-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameradown = function(hem){
hema.cameraZ = hema.cameraZ+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraup = function(hem){
hema.cameraZ = hema.cameraZ-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)



hema.CameraAutoTurnaround = function(hemb){
if(arguments.length == 1){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtObject(hemb)
}.bind(this)
hema.threeobjects.push(rotatia)
}
if(arguments.length == 3){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtPosition(arguments[0],arguments[1],arguments[2])
}.bind(this)
hema.threeobjects.push(rotatia)
}


}.bind(this)











hema.maaConversion = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.variant = who
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)






















hema.maaHazel = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z

if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let whoo = who +"Hazel"

let tew = hema.Textures[whoo]



hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)





























hema.maaSen = function(x,z,type){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 1
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.materi1 = ""
if(type.substring(0,4)=="Wall"){
hemb.y=2
hemb.ctype = hemb.ctype.replace("Wall","")
}
if(type.substring(0,9)=="Superwall"){
hemb.y=3
hemb.ctype = hemb.ctype.replace("Superwall","")
}
if(type.substring(0,3)=="Pit"){
hemb.y=0
hemb.ctype = hemb.ctype.replace("Pit","")
}

if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

if(type.substring(0,7)!="Culture"){
let whoo = hemb.ctype +"Sen"
let tew = hema.Textures[whoo]

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	map: tew,
transparent: true
 })
}else{
let hcolor = type.substring(7,type.length)
hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: hcolor,
transparent: true,
wireframe: true
 })

}


hemb.shape1  = new hema.THREE.BoxGeometry( hemb.xw, hemb.yw, hemb.zw )
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){





hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.shape1.dispose()
hemb.mesh1 = undefined

}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)



}

return hemb
}.bind(this)



















































      tthen()
    
hema.threeactive = true
hema.animate()

return hema
},











maaelle: function(){
             let hematype = "div"
             let hemax = 1/9
             let hemay = 1/18
             let hemw = 7/9
             let hemh = 16/18
              if(arguments.length>0){hematype = arguments[0]
              if(arguments[0]=="aera"){hematype = "textarea"}}
              if(arguments.length>1){hemax = arguments[1]}
              if(arguments.length>2){hemay = arguments[2]}
              if(arguments.length>3){hemw = arguments[3]}
              if(arguments.length>4){hemh = arguments[4]}
              let hema = document.createElement(hematype)
              hema.hematype = hematype
              if(hema.hematype == "div"){
               hema.style.userSelect = "none"
              }
             this.raphos(hema)
hema.style.fontFamily = "EmilysCandy"
if(hematype == "option"){
arguments[1].ano(hema)
}else{
             this.lo(hema,hemax,hemay,hemw,hemh)
}
         
             if(arguments.length>5){arguments[5].ano(hema)}
             
hema.dalcorsa("0,0,0,0.0").aeracorsa("255,255,255,1").aeraglow("255,255,255,1")


             return hema
            },




















kiDelete: function(){Kt.kieh(1,0)},
            ki: function(hem){Kt.ki(hem)},
            kiPaste: function(){Kt.kiPaste()},
            kiCopy: function(){Kt.kiCopy()},
            kiCut: function(){Kt.kiCut()},
            kiSelectAll: function(){Kt.kiSelectAll()},
            kiSelect: function(hemben,hemboda){Kt.kiSelect(hemben,hemboda)},
            kiboda: function(hemdistance){return Kt.kiboda(hemdistance)},
            kiben: function(hemdistance){return Kt.kiben(hemdistance)},
            kieh: function(hemben,hemboda){Kt.kieh(hemben,hemboda)},
            kiUp: function(){Kt.kiUp()},
            kiDown: function(){Kt.kiDown()},
            kiLeft: function(){Kt.kiLeft()},
            kiRight: function(){Kt.kiRight()},
            kiUndo: function(){Kt.kiUndo()},
            kiRedo: function(){Kt.kiRedo()},
    
kiSelection: function(){return Kt.kiSelection()},
      


gotowebpage: function(hem){Kt.gotowebpage(hem)},


     readasset: function(hem){
return Kt.readasset(hem)
}, 
exportasset: function(hem,boda){
Kt.exportasset(hem,boda)
}, 
        
        
 














veskaLo: function(tani,hem){
document.location.href = "https://"+tani+".glitch.me/"+hem
},


sensia: function(aera,sia){
let w = Crystalline.melosia(sia)
let an = w.length
if(w[0]==""){an=0}
let re = an.toString()
Crystalline.seall(aera,sia+"/"+re)
},

lo: function(hem,x,y,w,h){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)
                        hem.style.right = this.conversion.percentstring(1-(x+w))
                        hem.style.top = this.conversion.percentstring(y)
                        hem.style.bottom = this.conversion.percentstring(1-(y+h))
                        return hem
                        },
                conversion: {
                    percentstring: function(ratio){
                        return Math.round(ratio*100).toString()+"%"
                    },
                },



loles: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)   
                        return hem
                        },

losel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.right = this.conversion.percentstring(x)   
                        return hem
                        },

lophel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.top = this.conversion.percentstring(x)   
                        return hem
                        },
         
lolehp: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.bottom = this.conversion.percentstring(x)   
                        return hem
                        },










   





lohem: function(hem){
let hema = document.getElementById(hem)

this.raphos(hema)
return hema
},



























fate: function(hsen){
let hema = Math.floor(Math.random()*hsen)
return hema
},



SenNow: function(){
let hema = Date.now()
hema = hema.toString()
return hema
},

Senminutessince: function(since){
let hema = this.SenNow()
let hemaaa = parseInt(hema)-parseInt(since)
return hemaaa
},

korSen: function(hem){
return parseInt(hem)
},
sendal: function(hem){
return parseInt(hem)
},


maaHemSen: function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.year
hema.month
hema.day
hema.hour
hema.minute
hema.second
hema.millisecond
return hema
},

























}

let Kt = {
say: function(hem){alert(hem)},



hseall: function(aera,siar){
localStorage.setItem(siar,aera)
},
hlseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
seall: function(aera,siar){
localStorage.setItem(siar,aera)
},
lseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
        seallsiar: function(siabe,siabo){},
        rasiar: function(siabe){},
rasia: function(siabe){},
        seallsia: function(siabe,siabo){},
        seallver: function(siabe,siabo){},
        kortanisia: function(siabe,siabo){},
        melosia: function(hem){},
hmelosia: function(hem){},
sunseall: function(aera,siar){},
sunlseall: function(siar){},
        sunmelosia: function(hem){},




}






window.mode = ""
if(innerWidth > innerHeight){window.mode = "computer"}else{window.mode = "phone"}

window.SunMohka = Crystalline.maaelle('div',0,0,1,1).sunano().front("1").dalcorsa("0,0,0,1")
SunMohka.Aera = Crystalline.maaelle('div',0,0,1,1,SunMohka).dalcorsa("0,0,0,1")
SunMohka.TopBar = Crystalline.maaelle('div',0,0,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.TopBar.Entries = []
SunMohka.TopBar.Add = function(hem){
SunMohka.Aera.lophel(1/24)
SunMohka.TopBar.vis()
hem.lo((1/5)*SunMohka.TopBar.Entries.length,0,1/5,1)
SunMohka.TopBar.ano(hem)
SunMohka.TopBar.Entries.push(hem)
}.bind(this)
SunMohka.BottomBar = Crystalline.maaelle('div',0,23/24,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.BottomBar.Entries = []
SunMohka.BottomBar.Add = function(hem){
SunMohka.Aera.lolehp(1/24)
SunMohka.BottomBar.vis()
hem.lo((1/5)*SunMohka.BottomBar.Entries.length,0,1/5,1)
SunMohka.BottomBar.ano(hem)
SunMohka.BottomBar.Entries.push(hem)
}.bind(this)



window.Users = {}





Users.coinCorsa = ""






Users.viewUp = async function(){
await Creatures.magicspell("viewUp",{},function(data){})  
  }

Users.refreshMoney = async function(){
await Creatures.magicspell("getMoney",{},function(data){
SunMohka.SignInBar.coinamount.ray(data.money)
})
}.bind(this)



Users.amISignedInvInvis = []
Users.amISignedInInvis = function(hem){
Users.amISignedInvInvis.push(hem)
}.bind(this)

Users.amISignedIn = async function(){
await Creatures.magicspell("amISignedIn",{},function(data){
if(data.signedIn == "o"){
SunMohka.SignInBar.signinliORusername.mode = "Account"
SunMohka.SignInBar.signinliORusername.ray(data.name)
for(i=0;i<Users.amISignedInvInvis.length;i++){
Users.amISignedInvInvis[i].invis()
}
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
}
})
}



Users.signOut = async function(){
await Creatures.magicspell("signOut",{},function(data){
if(siartani == "gamble"){Zogladorium()}
SunMohka.SignInBar.coinamount.ray("0")
alert(data.say)})
}

Users.signIn = async function(hname,hpass,hreferer){
await Creatures.magicspell("signIn",{name:hname,pass:hpass,referer:hreferer},function(data){alert(data.say)
if(data.say == "Account Created.  You are Signed In." || data.say == "You are Signed In."){
SunMohka.SignInBar.signinliORusername.ray(data.name)
SunMohka.SignInBar.signinliORusername.mode = "Account"
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
SunMohka.SignInBar.abovepopupsignin.invis()
}
})
}

Users.createSignInBar = function(cointype){
SunMohka.SignInBar = Crystalline.maaelle('div',0,0,1,1)
SunMohka.TopBar.Add(SunMohka.SignInBar)
SunMohka.SignInBar.cointype = cointype

SunMohka.SignInBar.coin = Crystalline.maaelle('div',0,0,1/4,1,SunMohka.SignInBar).dalcorsascroll().dalcorsaeren().dalcorsalsen().eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}
}.bind(this))

SunMohka.SignInBar.coinamount = Crystalline.maaelle('div',1/4,0,1/4,1,SunMohka.SignInBar).vcenter().ray("0").eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}

}.bind(this))

if(SunMohka.SignInBar.cointype.toUpperCase() == "S"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/5107474554438d57be7152605ea67a78.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}
if(SunMohka.SignInBar.cointype.toUpperCase() == "PERSON"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/837189de985fa03e9fb36adfbabf8c29.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}

SunMohka.SignInBar.signinliORusername = Crystalline.maaelle('div',2/4,0,2/4,1,SunMohka.SignInBar).dalcorsa("0,0,0,1").corsaera("255,255,255").rhap("7","255,255,255,1","1","solid").ray("SignIn").vcenter().eshe(function(){
if(SunMohka.SignInBar.signinliORusername.mode == "SignIn"){
SunMohka.SignInBar.abovepopupsignin.visible()
}
if(SunMohka.SignInBar.signinliORusername.mode == "Account"){
if(Users.AccountMohka.on=="l"){
Users.AccountMohka.on = "o"
Users.AccountMohka.visible()
SunMohka.SignInBar.signinliORusername.corsaera("0,255,0,1").rhap("7","0,255,0,1","1","solid")
}else{
Users.AccountMohka.on = "l"
Users.AccountMohka.invisible()
SunMohka.SignInBar.signinliORusername.corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid")
}

}
}.bind(this))
SunMohka.SignInBar.signinliORusername.mode = "SignIn"

Users.amISignedIn()

SunMohka.SignInBar.abovepopupsignin = Crystalline.maaelle('div',0,0,1,1).sunano().invis().front("100").dalcorsa("0,0,0,0.5")

SunMohka.SignInBar.popupsignin = Crystalline.maaelle('div',0,0,1,1,SunMohka.SignInBar.abovepopupsignin).front("101").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

SunMohka.SignInBar.popupsignin.login = Crystalline.maaelle('aera',1/9,1/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Name").borhap("12")

SunMohka.SignInBar.popupsignin.pass = Crystalline.maaelle('aera',1/9,3/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Password").borhap("12")

SunMohka.SignInBar.popupsignin.referer = Crystalline.maaelle('aera',1/9,5/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("referer").borhap("12")

SunMohka.SignInBar.popupsignin.signinli = Crystalline.maaelle('div',1/9,7/18,7/9,1/18,SunMohka.SignInBar.popupsignin).eshe(function(){
Users.in = SunMohka.SignInBar.popupsignin.login.value
Users.signIn(SunMohka.SignInBar.popupsignin.login.value,SunMohka.SignInBar.popupsignin.pass.value,SunMohka.SignInBar.popupsignin.referer.value)
}.bind(this)).ray("Enter").rhap("7","255,255,255,1","1","solid").borhap("12")
return SunMohka.SignInBar
}









Users.AccountMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).invis().front("201").dalcorsa("0,0,0,1")

Users.AccountMohka.on = "l"

Users.AccountMohka.unlogLi = Crystalline.maaelle('div',0,0,1/9,1/12,Users.AccountMohka).ray("LogOut").eshe(function(){
SunMohka.SignInBar.signinliORusername.ray("SignIn")
SunMohka.SignInBar.signinliORusername.mode = "SignIn"
Users.AccountMohka.invis()
Users.signOut()
}.bind(this)).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

Users.Inventory = Crystalline.maaelle('div',0,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")
Users.Inventory.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Inventory).ray("Inventory").vcenter()
Users.Inventory.Items = Crystalline.maaelle('div',0,1/8,1,7/8,Users.Inventory).rhap("7","255,255,255,1","1","solid").flow("o")
Users.Inventory.Items.vItem = []

Users.Inventory.Items.erenlupe = function(tani,corsa,sen){

let hema = Crystalline.maaelle('div',0,0,1,1)

return hema

}.bind(this)




Users.Friends = Crystalline.maaelle('div',1/2,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.Friends.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Friends).ray("Friends").vcenter()




Users.History = Crystalline.maaelle('div',0,5/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.History.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.History).ray("History").vcenter()

Users.History.Melo = Crystalline.maaelle('div',0,1/8,1/9,7/8,Users.History).rhap("0","255,255,255,1","1","solid")

Users.History.Melo.liItems = Crystalline.maaelle('div',0,0,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Items")

Users.History.Melo.liComments = Crystalline.maaelle('div',0,1/6,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Comments")

//bottom bar of page to be a generic banner until person ranks on a leaderboard, at which point upgrades to 'where u are on leaderboard'








window.Creatures = {}



Creatures.magicspell = async function(what,thing,next){ 
    await fetch('https://rosinvault.glitch.me/'+what, { method: 'POST', headers: { 'Content-Type': 'application/json'}, body: JSON.stringify(thing)}).then(response => response.json()).then(data => next(data)).catch(error => alert(error))  
  }


Creatures.getUpdates = async function(){ 
await Creatures.magicspell("getUpdates",{},function(data){
Creatures.UpdatesMohka.aera.ray("")
Creatures.UpdatesMohka.aera.entries = []
let entries = data.entries.split(`:;:

`)
for(i=0;i<entries.length;i++){
let ha = entries[i].split(`:::

`)
if(ha[1].indexOf("RosinVault, ") != -1){
ha[1] = ha[1].replace("Allotopia, ","")
ha[1] = ha[1].replace("RosinVault, ","")
ha[1] = ha[1].replace("GrowingHome, ","")
ha[1] = ha[1].replace("BeautifulPeople2, ","")
Creatures.UpdatesMohka.aera.entries[i] = Crystalline.maaelle('div',0,(1/6)*i,1,1/6,Creatures.UpdatesMohka.aera)
Crystalline.maaelle('div',0,0,1/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[0]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
 Crystalline.maaelle('div',1/4,0,3/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[1]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
}
}
    })
  }
  








Creatures.UpdatesMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).dalcorsa("0,0,0,1").sunano().invis().front("50")

Creatures.UpdatesMohka.supdate = ""

Creatures.UpdatesMohka.getViewUpdates = async function(){
Creatures.magicspell("getViewUpdates",{},function(data){
Creatures.UpdatesMohka.viewcount.ray("Views: "+data.views)
})
  }
  




Creatures.UpdatesMohka.aera = Crystalline.maaelle('div',0,1/12,1,11/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").flow("o")

Creatures.UpdatesMohka.returnli = Crystalline.maaelle('div',0,0,1/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter().ray("Return").eshe(function(){
clearInterval(Creatures.UpdatesMohka.supdate)
Creatures.UpdatesMohka.invis()
}.bind(this))

Creatures.UpdatesMohka.viewcount = Crystalline.maaelle('div',5/8,0,3/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter()



Creatures.addUpdatesBottomBar = function(){
let hema = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
Creatures.UpdatesMohka.getViewUpdates()
Creatures.UpdatesMohka.supdate = setInterval(function(){
Creatures.UpdatesMohka.getViewUpdates()
}.bind(this),5000)
Creatures.getUpdates()
Creatures.UpdatesMohka.visible()
}.bind(this)).ray("Updates")
SunMohka.BottomBar.Add(hema)
}.bind(this)







//////////////////////////////////////////////////

































































































let Comments = {}
Comments.submit = function(hem,hsen){
let ish = Crystalline.lseall("in")
if(ish == "o"){
let thing = {}
thing.aera = hem
thing.when = Date.now()
thing.which = hsen
thing.name = SunMohka.SignInBar.signinliORusername.sunaera()
Creatures.magicspell("askToComment",function(data){
Crystalline.say("Comment Submitted")
})
}
}.bind(this)















Profile ={}
Profile.referer = ""
Profile.refercount = ""
Profile.refercode = ""
Profile.Comments = {}
Profile.Comments.History = {}
Profile.Comments.History.topRanked = function(){
let hema = {}

return hema
}.bind(this)

// (leaf rating system)








































































let Store = {}
Store.createStore = function(){
SunMohka.StoreLi = Crystalline.maaelle('div',0,0,1,1).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").vcenter().corsaera("255,255,255,1").ray("Store").eshe(function(){
SunMohka.StoreMohka.vis()
}.bind(this))
SunMohka.StoreMohka = Crystalline.maaelle('div',0,0,1,1).sunano().dalcorsa("0,0,0,1").corsaera("255,255,255,1").front("203").invis()
SunMohka.StoreMohka.returnLi = Crystalline.maaelle('div',0,0,1/9,1/12,SunMohka.StoreMohka).ray("return").vcenter().dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").eshe(function(){
SunMohka.StoreMohka.invis()
}.bind(this))


SunMohka.TopBar.Add(SunMohka.StoreLi)
return SunMohka.StoreLi
}.bind(this)






























Creatures.createTimeBar = function(x,y,w,h,ano){
let hema = {}
hema.TimeBar = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.TimeBar.heartdrum = setInterval(function(){
if(hema.time != ""){
let timesofar = Date.now() - hema.time
let days = (((timesofar/1000)/60)/60)/24
let hours = ((timesofar/1000)/60)/60
let minutes = (timesofar/1000)/60
let seconds = timesofar/1000

if(hours < 1){
hema.TimeBar.barhourm.lo(0,0,hours,1)
hema.TimeBar.bartwohoursm.lo(0,0,0,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 1 && hours < 2){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,hours-1,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 2 && hours < 3){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,hours-2,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 3 && hours < 6){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,(hours-3)/3,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 6 && hours < 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,(hours-6)/6,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,1,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,(hours-12)/6,1)
}

}

}.bind(this),1000)

hema.TimeBar.maa = function(){
Creatures.magicspell("getTimeAndCollects",{},function(data){
if(data.signedIn != "l"){
hema.time = data.timesofar
}
}.bind(this))
}.bind(this)

window.Zogladorium = hema.TimeBar.maa
hema.TimeBar.betKoCollect = Crystalline.maaelle('div',1/4,1/16,2/4,1/8,hema.TimeBar).invis().corsaera("0,255,0,1").rai(0).vcenter().aerasun("0,255,0,1")
hema.TimeBar.timeshow = Crystalline.maaelle('div',0,1/4,1,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").dalcorsa("42,18,59,1")
hema.TimeBar.barhour = Crystalline.maaelle('div',0,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("1 Hour")
hema.TimeBar.bartwohours = Crystalline.maaelle('div',1/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("2 Hours")
hema.TimeBar.barthreehours = Crystalline.maaelle('div',2/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("3 Hours")
hema.TimeBar.barsixhours = Crystalline.maaelle('div',3/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("6 Hours")
hema.TimeBar.bartwelvehours = Crystalline.maaelle('div',4/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("12 Hours")
hema.TimeBar.bartwentyfourhours = Crystalline.maaelle('div',5/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("24 Hours")

hema.TimeBar.barhourm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barhour).dalcorsa("0,255,0,1")
hema.TimeBar.bartwohoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwohours).dalcorsa("0,255,0,1")
hema.TimeBar.barthreehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barthreehours).dalcorsa("0,255,0,1")
hema.TimeBar.barsixhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barsixhours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwelvehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwelvehours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwentyfourhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwentyfourhours).dalcorsa("0,255,0,1")

hema.TimeBar.reward = {}
hema.TimeBar.reward.claimli = Crystalline.maaelle('div',3/9,2/4,3/9,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").vcenter().ray("Collect your points!").eshe(function(){
Creatures.magicspell("timebarCollect",{},function(data){
Users.refreshMoney()
hema.TimeBar.maa()
hema.TimeBar.betCollect(data.amountCollected)
})

}.bind(this))

hema.TimeBar.reward.first = Crystalline.maaelle('div',0,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.second = Crystalline.maaelle('div',1/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.third = Crystalline.maaelle('div',2/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fourth = Crystalline.maaelle('div',3/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fifth = Crystalline.maaelle('div',4/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.sixth = Crystalline.maaelle('div',5/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")




hema.TimeBar.reward.corsahourc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.first).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwohoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.second).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsathreehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.third).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsasixhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fourth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwelvehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fifth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwentyfourhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.sixth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()

hema.TimeBar.reward.corsahour = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.first).vcenter().ray("+ 5")
hema.TimeBar.reward.corsatwohours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.second).vcenter().ray("+ 4")
hema.TimeBar.reward.corsathreehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.third).vcenter().ray("+ 2")
hema.TimeBar.reward.corsasixhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fourth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwelvehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fifth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwentyfourhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.sixth).vcenter().ray("+ 0")

hema.TimeBar.betCollect = function(hemsen){
let raera = ""
if(hemsen == undefined){
raera = "An hour has not passed yet."
}else{
raera = hemsen + " points collected!"
}
hema.TimeBar.betKoCollect.ray(raera)
hema.TimeBar.betKoCollect.rai(0)
let op = 0
let dalo = "p"
hema.TimeBar.betKoCollect.vis()
let hx = setInterval(function(){
let opp = op
if(op>1){opp=1}
hema.TimeBar.betKoCollect.rai(opp)
if(dalo=="p"){op=op+0.02}
if(op>=2){op=1
dalo="l"}
if(dalo=="l"){op=op-0.01}
if(op<0){hema.TimeBar.betKoCollect.invis()
clearInterval(hx)}

}.bind(this),10)
}.bind(this)


hema.TimeBar.maa()
return hema.TimeBar
}.bind(this)




//10 questions per day






















Creatures.Gamble = {}

Creatures.Gamble.maa = function(x,y,w,h,ano){
Creatures.Gamble.Mohka = Crystalline.maaelle('div',x,y,w,h,ano)

Creatures.Gamble.getQuestions = async function(){
await Creatures.magicspell("getMyDailyQuestions",{},function(hem){
if(hem.q1aera != ""){
let q = hem.q1aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question1.ray(q[0]+" vs "+q[1])
Creatures.Gamble.Mohka.q1t1.sen = hem.q1
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.vis()
Creatures.Gamble.Mohka.question1.vis()
Creatures.Gamble.Mohka.q1t1.vis()
Creatures.Gamble.Mohka.q1t1.ray(q[0])
Creatures.Gamble.Mohka.q1t2.vis()
Creatures.Gamble.Mohka.q1t2.ray(q[1])
}else{
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.invis()
Creatures.Gamble.Mohka.question1.invis()
Creatures.Gamble.Mohka.q1t1.invis()
Creatures.Gamble.Mohka.q1t1.ray("")
Creatures.Gamble.Mohka.q1t2.invis()
Creatures.Gamble.Mohka.q1t2.ray("")
}

if(hem.q2aera != ""){
let qb = hem.q2aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question2.ray(qb[0]+" vs "+qb[1])
Creatures.Gamble.Mohka.q2t1.sen = hem.q2
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.vis()
Creatures.Gamble.Mohka.question2.vis()
Creatures.Gamble.Mohka.q2t1.vis()
Creatures.Gamble.Mohka.q2t1.ray(qb[0])
Creatures.Gamble.Mohka.q2t2.vis()
Creatures.Gamble.Mohka.q2t2.ray(qb[1])
}else{
Creatures.Gamble.Mohka.q2t1.sen = ""
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.invis()
Creatures.Gamble.Mohka.question2.invis()
Creatures.Gamble.Mohka.q2t1.invis()
Creatures.Gamble.Mohka.q2t1.ray("")
Creatures.Gamble.Mohka.q2t2.invis()
Creatures.Gamble.Mohka.q2t2.ray("")
}

}.bind(this))
}.bind(this)
Creatures.Gamble.answerQuestion = async function(questionsen,answer,amount){
await Creatures.magicspell("gambleAnswerQuestion",{questionsen:questionsen,answer:answer,amount:amount},function(hem){if(hem.answered == "o"){
Users.refreshMoney()
Creatures.Gamble.getQuestions()
}}.bind(this))
}.bind(this)

Creatures.Gamble.Mohka.streak = Crystalline.maaelle('div',0,1/2,1/2,1/2,Creatures.Gamble.Mohka).ray("Enable Streak").vcenter().rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1").eshe(function(){
if(Creatures.Gamble.Mohka.streak.on == "l"){
Creatures.Gamble.Mohka.streak.on = "o"
Creatures.Gamble.Mohka.streak.ray("Streak Enabled!")
Creatures.Gamble.Mohka.streak.rhap("7","0,0,0,1","1","solid").dalcorsa("0,255,0,1").corsaera("0,0,0,1")
Creatures.Gamble.Mohka.Amount1.ray("5")
Creatures.Gamble.Mohka.Amount2.ray("5")
}else{
Creatures.Gamble.Mohka.streak.on = "l"
Creatures.Gamble.Mohka.streak.ray("Enable Streak")
Creatures.Gamble.Mohka.streak.rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")
}

}.bind(this))
Creatures.Gamble.Mohka.streak.on = "l"

Creatures.Gamble.Mohka.questiongetnext = Crystalline.maaelle('div',0,0,1/2,1/2,Creatures.Gamble.Mohka).ray("Get new questions").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){


}.bind(this))

Creatures.Gamble.Mohka.Questions = Crystalline.maaelle('div',1/2,0,1/2,1,Creatures.Gamble.Mohka)


Creatures.Gamble.Mohka.question1 = Crystalline.maaelle('div',0,0,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q1t1 = Crystalline.maaelle('div',2/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t1.sunaera(),amt)

}.bind(this)).invis()
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.q1t2 = Crystalline.maaelle('div',5/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount1 = Crystalline.maaelle("aera",2/7,1/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


Creatures.Gamble.Mohka.question2 = Crystalline.maaelle('div',0,4/7,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q2t1 = Crystalline.maaelle('div',2/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t1.sunaera(),amt)
Creatures.Gamble.Mohka.q2t1.sen = ""

}.bind(this)).invis()
Creatures.Gamble.Mohka.q2t2 = Crystalline.maaelle('div',5/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount2 = Crystalline.maaelle("aera",2/7,5/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


return Creatures.Gamble.Mohka
}.bind(this)

Creatures.Gamble.Aerakormaa = function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)

return hema
}.bind(this)





























Creatures.Leaderboard = {}
Creatures.Leaderboard.maa = function(hem,x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.type = hem
hema.Tani = Crystalline.maaelle('div',0,0,1,1/7,hema).ray(hem).vcenter().rhap("7","255,255,255,1","1","solid")
return hema
}.bind(this)










































Creatures.Bulletin = {}
Creatures.Bulletin.maa = function(x,y,w,h,ano){
Creatures.Bulletin.Mohka = Crystalline.maaelle('div',x,y,w,h,ano).rhap("7","255,255,255,1","1","solid")
Creatures.Bulletin.Mohka.JustReleasedItemsTani = Crystalline.maaelle('div',0,0,1,1/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid").ray("Just Released! (within 72hours)").vcenter()

Creatures.Bulletin.Mohka.JustReleasedItems = Crystalline.maaelle('div',0,1/9,1,4/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid")
Creatures.maaLleslai("Dab","Released","Left",100,0,0,1,1,Creatures.Bulletin.Mohka.JustReleasedItems,"","Nothing in the last 72 hours.")

Creatures.Bulletin.Mohka.WelcomeNewMembers = Crystalline.maaelle('div',0,5/9,1,2/9,Creatures.Bulletin.Mohka).ray("Welcome New Members").vcenter().rhap("0","255,255,255,1","1","solid")

Creatures.Bulletin.Mohka.RememberYourPoints = Crystalline.maaelle('div',0,7/9,1,2/9,Creatures.Bulletin.Mohka).ray("Remember Your Points").vcenter().rhap("0","255,255,255,1","1","solid").eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))

return Creatures.Bulletin.Mohka
}.bind(this)































Creatures.maaLleslai = function(hemdal,hemsort,slideway,slidespeed,x,y,w,h,ano,mcorsa,mtani){
let hema = Crystalline.maaelle('div',x,y,w,h,ano).rhap("0","255,255,255,1","1","solid")
hema.type = hemdal
hema.sort = hemsort
hema.slideway = slideway
hema.slidespeed = slidespeed

hema.slideHolder = Crystalline.maaelle('div',0,0,16/18,1,hema).dalcorsa("255,255,255,1").front("3").flow("o").dalcorsa(mcorsa)
hema.slides = []

hema.slideHolderEmpty = Crystalline.maaelle('div',0,0,1,1,hema.slideHolder).vcenter().ray(mtani).invis().aeraAlign("center").aeraeren(28).dalcorsa("0,0,0,0.8")



hema.onSlide = 0
hema.autoplaying = "o"


hema.sliderele = []
hema.seconds = 0

hema.rele = setInterval(function(){
if(hema.slides.length > 0){
hema.slideHolderEmpty.invis()
}else{hema.slideHolderEmpty.vis()}
for(i=0;i<hema.sliderele.length;i++){
hema.sliderele[i]()
}},1000)
hema.slidewidth = 1000
hema.heartdrumsen = 0
hema.heartdrum = setInterval(function(){
if(hema.autoplaying == "o" && hema.slides.length > 0){
hema.heartdrumsen++
if(hema.heartdrumsen>hema.slides.length*hema.slidewidth){
hema.heartdrumsen=0
hema.slideHolder.scroll({
left: hema.heartdrumsen,
top:0,
behavior: "instant",
})
}else{
hema.slideHolder.scroll(hema.heartdrumsen,0)
}
}
}.bind(this),hema.slidespeed)

hema.CreateSlide = function(hemb,time,last){
hemb.Mohka = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1")
hemb.Mohka.Title = Crystalline.maaelle('div',1/9,0,7/9,1/7,hemb.Mohka).ray(hemb.ShowotronTitle).vcenter()
hemb.Mohka.Image = Crystalline.maaelle('div',0,1/7,1,4/7,hemb.Mohka).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hemb.Mohka.Countdown = Crystalline.maaelle('div',1/9,2/7,7/9,2/7,hemb.Mohka).vcenter()



if(hema.sort=="Upcoming"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = time-now
if(when > 0){
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)

}else{
hemb.Mohka.Countdown.ray(`<span style='color:rgb(255,215,105)'>Just Released!</span>`)

}
})
}

if(hema.sort=="Released"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = now-time
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)
})
}





hemb.Mohka.Description = Crystalline.maaelle('div',0,5/7,1,2/7,hemb.Mohka).ray(hemb.ShowotronDescription).vcenter()
let hemlink = Crystalline.maaelle('div',0,0,1,1).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hema.slideHolder.add(hemb.Mohka,hemlink,last)
}.bind(this)

hema.getSlidesFromServer = async function(){
await Creatures.magicspell("getEntries",{},hema.getSlidesFromServerXX)   
  }

hema.getSlidesFromServerXX = async function(hem){
let vslides = hem.entries.split(",")
for(i=0;i<vslides.length;i++){
hema.getSlideFromServer(vslides[i],"l",i,vslides.length)
}
}.bind(this)





hema.getSlideFromServer = async function(hemx,last,sen,vsen){
await Creatures.magicspell("loadEntry",{entrylocation:hemx},function(hem){
let datas = hem.entry.split("~*^*~")
let hemb = {}
hemb.entrynumber = datas[0]
hemb.entryname = datas[1]
hemb.entryimage = datas[2]
hemb.entrydescription = datas[3]
hemb.entryattributes = datas[4]
hemb.entrytype = datas[5]
hemb.ekkattributes = [] 
let vattribute = hemb.entryattributes.split("~x*^*x~")
for(i=0;i<vattribute.length;i++){
let atr = vattribute[i].split("~!*^*!~")
hemb.ekkattributes.push(atr)
let f = atr[0]
let ood = atr[1]
hemb[f] = ood
}

if(hemb.entrytype == hema.type){
if(hema.sort=="Upcoming"){

let nowdate = Date.now()
let onShowotron = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
let daysbefore = parseInt(hemb.DaysBeforeReleaseAddToGalleryAndShowotron) * 24 * 60 * 60 * 1000
if(day-daysbefore < now && day > now - (24*60*60*1000)){
onShowotron = "o"
}
if(onShowotron == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}

}

}
if(hema.sort=="Released"){
let nowdate = Date.now()
let onJustReleased = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
if(now > day && now < day +3*(24*60*60*1000)){
onJustReleased = "o"
}
if(onJustReleased == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}
}//Released


}


}//Dab
if(sen == vsen-1 && hema.slides.length > 0){hema.CreateSlide(hema.SunHemb,hema.SunTime,"o")}


}.bind(this))
 }


hema.slideHolder.add = function(hem,hemlink,last){
if(last=="l"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hemlink.lo(0,(1/10)+(1/5)*hema.slides.length,1,1/10)
hemlink.slidesen = hema.slides.length
hemlink.eshe(function(){
if(hema.autoplaying=="l"){
hema.autoplaying = "o"
}


if(Math.floor(hema.slidewidth*hemlink.slidesen) != Math.floor(hema.slideHolder.scrollLeft)){
hema.autoplaying = "l"
hema.slideHolder.scroll({
left: hema.slidewidth*hemlink.slidesen,
top:0,
behavior: "smooth",
})
}




}.bind(this))
hem.eshe(function(){
alert("hi")

}.bind(this))
hema.vli.ano(hemlink)
hema.slides.push(hem)
}
if(last=="o"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hem.eshe(function(){
alert("hi")

}.bind(this))
//hema.slides.push(hem)
}
}.bind(this)



hema.vli = Crystalline.maaelle('div',16/18,0,2/18,1,hema).dalcorsa("0,0,0,0.8").flow("o").front("5")
hema.getSlidesFromServer()


return hema
}.bind(this)


















Creatures.RTree = function(x,y,w,h,ano,leafsia,leaferen){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.MyRefCode = Crystalline.maaelle('div',1/2,0,1/2,1,hema)
hema.vLeaf = Crystalline.maaelle('div',0,0,1/2,1,hema)

hema.getLeafDalcorsa = function(){
let lf = Crystalline.fate(leaferen)
let lc = leafsia+lf+".png"
return lc
}.bind(this)

hema.vLeaf.leaf0 = Crystalline.maaelle('div',0,0/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(leafsia+"X.png").dalcorsalsen().dalcorsavcenter()
let ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf1 = Crystalline.maaelle('div',0,1/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf2 = Crystalline.maaelle('div',0,2/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf3 = Crystalline.maaelle('div',0,3/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf4 = Crystalline.maaelle('div',0,4/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()

return hema
}.bind(this)













Creatures.addUpdatesBottomBar()






let homeli = Crystalline.maaelle('div',0,0,1,1).ray("Home").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","home")
}.bind(this))
SunMohka.TopBar.Add(homeli)

let galleryli = Crystalline.maaelle('div',0,0,1,1).ray("Vault").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","vault")
}.bind(this))
SunMohka.TopBar.Add(galleryli)

let gambleli = Crystalline.maaelle('div',0,0,1,1).ray("Gamble").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))
SunMohka.TopBar.Add(gambleli)
Users.createSignInBar("S")
let referalli = Crystalline.maaelle('div',0,0,1,1).ray("Referal").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","refer")
}.bind(this))
SunMohka.TopBar.Add(referalli)





let tthen = function(){
let ion = Crystalline.Corsan.maaInvisithing(550,0,550)
Crystalline.Corsan.maaTree(627,0,486)
Crystalline.Corsan.maaTree(513,0,457)
Crystalline.Corsan.maaTree(450,0,557)
Crystalline.Corsan.maaTree(526,0,647)
Crystalline.Corsan.maaTree(635,0,603)
Crystalline.Corsan.maaLight(635,91,603,2)
Crystalline.Corsan.CameraPosition(430,0,680)
Crystalline.Corsan.cameraSpin()
Crystalline.Corsan.CameraAutoTurnaround(ion)




}.bind(this)
let ttani = function(){
}.bind(this)
Crystalline.hemThree(tthen,ttani,0,0,1,1,SunMohka.Aera,1,1)





</script></body>
</html>&&&&&&<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RosinVault</title>
   <script src="three.min.js"></script>
   <script src="GLTFLoader.js"></script>
  </head>
  <body><script>window.siartani = "AboutUs"

window.siartanilo = "RosinVault"

window.Crystalline = {

raphos: function(hem){
 





hem.aeralign = function(hema){if(hema=="o" || hema==undefined){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }



















hem.vcenter = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
hem.style.alignItems = "center"
         return hem
         }

hem.vcenterles = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
         return hem
         }

hem.vcenterphel = function(){hem.style.display = "flex"
hem.style.alignItems = "center"
         return hem
         }

hem.vsel = function(){hem.style.display = "flex"
hem.style.justifyContent = "left"
hem.style.textAlign = "left"
         return hem
         }

hem.vles = function(){hem.style.display = "flex"
hem.style.textAlign = "right"
hem.style.justifyContent = "right"
         return hem
         }



hem.eshe = function(hema){
if(hem.hematype == "select"){
hem.onchange = hema}else{
hem.onclick = hema
}
          return hem
          }



















































































hem.dalcorsalsen = function(){hem.style.backgroundRepeat = "no-repeat"
                                      
         return hem
         }





hem.dalcorsavcenter = function(){hem.style.backgroundPosition = "center"
                                     
         return hem
         }















hem.dalcorsa = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.Background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

         hem.corsadal = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"} 
         return hem
         }

















hem.noselect = function(hema){
               hema.style.userSelect = "none"
          return hem}

hem.border = function(radius,color,width,style){
          hem.style.borderRadius = "7px"
          hem.style.borderColor = "rgba(255,255,255,1)"
          hem.style.borderWidth = "3px"
          hem.style.borderStyle = "double"
          if(arguments.length>0){hem.style.borderRadius = radius}
           if(arguments.length>1){hem.style.borderColor = "rgba("+color+")"}
           if(arguments.length>2){hem.style.borderWidth = width}
           if(arguments.length>3){hem.style.borderStyle = style}
           return hem
         }

         

         

         

         hem.ona = function(){
         for(this.iuuuui=0;this.iuuuui<arguments.length;this.iuuuui++){
           hem.removeChild(arguments[this.iuuuui]) 
          }
          return hem
         }

         hem.font = function(hema){hem.style.fontFamily = hema
          return hem
          }

          
         
         
         
         
         
         
         
         


         
      
         
         
         




  hem.dalcorsascroll = function(){hem.style.backgroundAttachment = "scroll"
                                     
         return hem
         }

hem.white = function(){hem.style.whiteSpace = "pre"
                                     
         return hem
         }


hem.dalcorsalscroll = function(){hem.style.backgroundAttachment = "fixed"
                                      
         return hem
         }


hem.dalcorsaliscroll = function(){hem.style.backgroundAttachment = "local"
                                      
         return hem
         }


hem.dalcorsasen = function(){hem.style.backgroundRepeat = "repeat"
                                      
         return hem
         }



hem.dalcorsaeren = function(){hem.style.backgroundSize = "cover"
                                      
         return hem
         }



hem.dalcorsaloeren = function(){hem.style.backgroundSize = "contain"
                                      
         return hem
         }

hem.dalcorsahem = function(){hem.style.backgroundSize = "100% 100%"
                                      
         return hem
         }



         hem.textEdge = function(hema){if(hema=="o"){hem.style.whiteSpace = "wrap"}
                                       if(hema=="l"){hem.style.whiteSpace = "nowrap"}
         return hem
         }
              



hem.koil = function(){hem.style.userSelect = "none"
                                      
         return hem
         }



hem.front = function(hemb){hem.style.zIndex = hemb
                                      
         return hem
         }

hem.dal = function(hemb){hem.type = hemb
                                      
         return hem
         }





































































































































hem.ray = function(hema){












let hn = ""
if(hema != undefined){hn=hema}
         if(hem.hematype == "textarea"){hem.value = hn}
if(hem.hematype == "aera"){hem.value = hn}
if(hem.hematype == "notaera"){hem.value = hn}
if(hem.hematype == "select"){hem.value = hn}
if(hem.hematype == "input"){hem.value = hn}
if(hem.hematype == "div"){hem.innerHTML = hn}
if(hem.hematype == "button"){hem.textContent = hn}
if(hem.hematype == "option"){hem.textContent = hn
hem.value = hn}
         return hem
         }







hem.aeraeren = function(hema){hem.style.fontSize = hema+"px"
         return hem
         }
hem.textSize = function(hema){hem.style.fontSize = hema 
         return hem
         }



















hem.sunano = function(hema){
               document.body.appendChild(hem)
          return hem}

















hem.ano = function(){
         for(this.iuuui=0;this.iuuui<arguments.length;this.iuuui++){
           hem.appendChild(arguments[this.iuuui]) 
          }
          return hem
         }

























hem.vis = function(){hem.style.display = "flex"
                                      
         return hem
         }

hem.visible = function(){hem.style.display = "flex"
                                      
         return hem
         }







hem.invis = function(){hem.style.display = "none"
                                      
         return hem
         }
hem.invisible = function(){hem.style.display = "none"
                                      
         return hem
         }




















hem.sunaera = function(){
if(arguments.length == 1){hem.innerHTML = arguments[0]
         return hem
         }
if(arguments.length == 0 && hem.hematype == "textarea"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "select"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "input"){
return hem.value
}
if(arguments.length == 0 && hem.hematype != "textarea"){
         return hem.innerHTML
         }
}





hem.aeradal = function(hema){hem.style.fontFamily = hema
         return hem
         }


hem.aeraeshe = function(hema){hem.oninput = hema
          return hem
          }





hem.aeracorsa = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }
hem.textColor = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }









         










hem.aeraglow = function(hema){hem.style.textShadow = "0px 0px 4px rgba(" + hema +")"
         return hem
         }











hem.ama = function(hema){hem.placeholder = hema 
         return hem
         }

hem.hint = function(hema){hem.placeholder = hema 
         return hem
         }



















hem.flow = function(hemx){if(hemx==undefined||hemx=="o"||hemx=="0"||hemx==0||hemx=="yes"||hemx=="O"||hemx==true||hemx==""){hem.style.overflow = "auto"}
if(hemx=="l"||hemx=="L"||hemx==1||hemx=="no"||hemx==false){hem.style.overflow = "hidden"}
if(hemx!=undefined){

if(hemx.toLowerCase()=="lleslai"){hem.style.overflowX = "auto"}
if(hemx.toLowerCase()=="phellai"){hem.style.overflowY = "auto"}



}

hem.style.scrollBehavior = "smooth"
          return hem}











hem.aerasun = function(hema){hem.style.textShadow = "0 0 8px rgba("+hema+")"
         return hem
         }





hem.aeraAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }

hem.textAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }




































hem.corsaera = function(hema){
hem.style.color = "rgba("+hema+")"
         return hem
         }




hem.lo = function(x,y,w,h){
          this.lo(hem,x,y,w,h)
return hem
         }.bind(this)

hem.loles = function(x){
          this.loles(hem,x)
return hem
         }.bind(this)

hem.losel = function(x){
          this.losel(hem,x)
return hem
         }.bind(this)

hem.lophel = function(x){
          this.lophel(hem,x)
return hem
         }.bind(this)

hem.lolehp = function(x){
          this.lolehp(hem,x)
return hem
         }.bind(this)

hem.getWidth = function(){
let hema = hem.getBoundingClientRect()

return hema.width
}.bind(this)


hem.getHeight = function(){
let hema = hem.getBoundingClientRect()

return hema.height
}.bind(this)












































hem.rai = function(hema){hem.style.opacity = hema
         return hem
         }



























































hem.rhap = function(radius,color,width,style){
          hem.style.borderRadius = radius + "px"
          hem.style.borderColor = "rgba("+color+")"
          hem.style.borderWidth = width+"px"
          hem.style.borderStyle = style
           return hem
         }





hem.rhapdal = function(hema){hem.style.borderStyle = hema 
         return hem
         }
         hem.rhapcorsa = function(hema){hem.style.borderColor = "rgba("+hema+")" 
         return hem
         }
         hem.rhaperen = function(hema){hem.style.borderWidth = hema
         return hem
         }

hem.rhaprele = function(hema){hem.style.borderRadius = hema+"px"
         return hem
         }
 





hem.borderradiuses = function(tl,tr,br,bl){
hem.style.borderTopLeftRadius = tl+"px"
hem.style.borderTopRightRadius = tr+"px"
hem.style.borderBottomRightRadius = br+"px"
hem.style.borderBottomLeftRadius = bl+"px"
return hem
}


hem.borhap = function(padding){
          hem.style.padding = padding + "px"
           return hem
         }





























































































return hem
        },


seall: function(aera,siar){Kt.seall(aera,siar)},











melosiar: function(siar,hemfun){
    var client = new XMLHttpRequest()
     client.open('GET',siar)
   client.onreadystatechange = function(){
if(client.readyState == 4 && client.status == 200){hemfun(client.responseText)}}
client.send()
   },



















copyAssets: function(aera){Kt.copyAssets(aera)},


hCopyAssets: function(aera){Kt.hCopyAssets(aera)},

copyAssetsCal: function(aera){Kt.copyAssetsCal(aera)},


hCopyAssetsCal: function(aera){Kt.hCopyAssetsCal(aera)},

reloadprogramcal: function(){Kt.reloadprogramcal()},





say: function(hem){Kt.say(hem)},











lseall: function(siar){return Kt.lseall(siar)},






















maaRaynotaera: function(aeralo,x,y,w,h,ano){
let hema = Crystalline.maaelle('aera',x,y,w,h,ano).aeraeshe(function(){
Crystalline.seall(hema.sunaera(),hema.siar)

}.bind(this))

hema.siar = aeralo
hema.ray(Crystalline.lseall(hema.siar))

























},








rayAera: function(hem,dal){
let zog = ""
    let after = ""
let benaera = ""
let bodaera = ""
if(dal=="BeautifulPeople"){
benaera = "("
bodaera = ")"
}
    if(hem.indexOf("in the styles of the artists")!=-1){
    zog = hem.substring(0,hem.indexOf("in the styles of the artists"))
    after = hem.substring(hem.indexOf("in the styles of the artists"),hem.length)
    }else{
      zog = hem
    }
  let maera = hem.split(" ")
  let which = Crystalline.fate(maera.length)
let sen = Crystalline.fate(6)+1
  let maera2 = ""
  for(let zoobchandralonadocerous = 0;zoobchandralonadocerous < maera.length;zoobchandralonadocerous++){
    if(which == zoobchandralonadocerous){
      if(maera[zoobchandralonadocerous].substring(0,2)=="((" || maera[zoobchandralonadocerous].substring(maera[zoobchandralonadocerous].length-2,maera[zoobchandralonadocerous].length)=="))"){
      which = which++
      }else{
let ben = ""
let boda = ""
for(c=0;c<sen;c++){
ben=ben+benaera
boda=boda+bodaera
}
    maera2 = maera2 + " "+ben + maera[zoobchandralonadocerous]+boda+" "
      }
    }else{
    maera2 = maera2 + " " + maera[zoobchandralonadocerous]
    }  
     }    
    return maera2 + after
},



generateSeed: function(){
   let seed = Crystalline.fate(4294967295)+1
   return seed
  },


BeautifulGallery: function(x,y,w,h,ano){
let galleria = Crystalline.maaelle('div',x,y,w,h,ano)
galleria.settings = {}
  galleria.settings.gallery = true
  galleria.settings.sort = "recent"
  galleria.settings.adaptiveHeight = true
  galleria.settings.style = "background-color:rgba(0,0,0,0)"
  galleria.settings.forceColorScheme = "dark"
let c = image(galleria.settings).evaluateItem
  galleria.ray(c)
},

BeautifulStory: function(ask,x,y,w,h,ano){
let textia = Crystalline.maaelle('div',x,y,w,h,ano)
textia.settings = {}
 textia.settings.instruction = ask  
let c = aitext(textia.settings)
  textia.ray(c)
},

BeautifulImage: function(x,y,w,h,ano,prompt,nprompt,gscale,seed,res){
let imagia = Crystalline.maaelle('div',x,y,w,h,ano)
imagia.settings = {}
  imagia.settings.prompt = prompt
  imagia.settings.negativePrompt = nprompt
 imagia.settings.guidanceScale = gscale
 imagia.settings.seed = seed
 imagia.settings.resolution = res
let c = image(imagia.settings).evaluateItem
  imagia.ray(c)
//YTILIBATAPMOC
},




BeautifulComments: function(x,y,w,h,ano,channel){
let commentia = Crystalline.maaelle('div',x,y,w,h,ano)
commentia.settings = {}
  commentia.settings.spiritguides = true
  commentia.settings.loadFonts = "Emilys Candy"
 commentia.settings.channel = channel
 commentia.settings.commentPlaceholderText = "meow"
 commentia.settings.submitButtonText = "meow"
commentia.settings.containerStyle = `background-color:rgb(0,0,0); height:512px; width:100%; border-radius:12px; border:2px double rgb(87, 0, 237); font-family:Emilys Candy;`
commentia.settings.messageBubbleStyle = `background:rgba(255,255,255,0.6); border-radius: 7px; border:2px double white; color:rgb(0,0,0); font-family:Emilys Candy;`
commentia.settings.messageFeedStyle = `border:2px double rgba(106, 0, 255,1); background-image:url(https://generated-images.perchance.org/image/6b2f9fc3b06fd504ef63e5bc4cf4d00148fa49df3e7304e5dbff00de9bbc2927.jpeg); border-radius: 7px; font-family:Emilys Candy;`
commentia.settings.inputAreaStyle = `background-color:rgb(0,0,0); font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(255,255,255);`
commentia.settings.submitButtonStyle = `width:100%;background-color: rgba(61, 242, 255,1); border:none; font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(0,0,0)`
commentia.settings.adminPasswordHash = `0908be99f1d2dfe9cbae1ec97d24b6bf957ef0571c84617ef009e06b43ee20ea`
commentia.settings.adminFlair = `meow`
commentia.settings.width = `400`
commentia.settings.bannedWords = "cbat"
//commentia.settings.customEmojis = {import:allos-emoji-list}
commentia.settings.loneCustomEmojiSizeMultiplier = "3"
commentia.settings.customEmojiSize = "1.2"
let c = comments(commentia.settings).evaluateItem
  commentia.ray(c)
//YTILIBATAPMOC
},





  
  
  
  
  
  
  

  
  
  
  
  
    
  
  


  

  
  
  


melosia: function(hem){return Kt.melosia(hem).split(",")},
















downloadassets: function(hemlo,hemtani){Kt.downloadassets(hemlo,hemtani)},
hseall: function(aera,siar){Kt.hseall(aera,siar)},
hlseall: function(siar){return Kt.hlseall(siar)},
        seallsiar: function(siabe,siabo){Kt.seallsiar(siabe,siabo)},
        rasiar: function(siabe){return Kt.rasiar(siabe)},
hrasiar: function(siabe){return Kt.hrasiar(siabe)},
rasia: function(siabe){return Kt.rasia(siabe)},
        seallsia: function(siabe,siabo){Kt.seallsia(siabe,siabo)},
celestiall: function(siabe,siabo){Kt.celestiall(siabe,siabo)},
        seallver: function(siabe,siabo){Kt.seallver(siabe,siabo)},
        kortanisia: function(siabe,siabo){Kt.kortanisia(siabe,siabo)},
hkortanisia: function(siabe,siabo){Kt.hkortanisia(siabe,siabo)},
        
maasia: function(hem){Kt.maasia(hem)},
hmelosia: function(hem){return Kt.hmelosia(hem).split(",")},
sunseall: function(aera,siar){Kt.sunseall(aera,siar)},
sunlseall: function(siar){return Kt.sunlseall(siar)},
        sunmelosia: function(hem){return Kt.sunmelosia(hem).split(",")},






















ekklinere: function(hemaera,hemekk){
let sen = hemekk.indexOf(hemaera)
if(sen != -1){
  hemekk.splice(sen, 1)
}
return hemekk
},
ekklieren: function(hemaera,hemekk){
hemekk.push(hemaera)
return hemekk
},
ekklira: function(hemaera,hemekk){
if(hemekk.includes(hemaera)){return "o"}else{return "l"}
},











componentToHex: function(c) {
  var hex = c.toString(16)
  return hex.length == 1 ? "0" + hex : hex
},

 rgbToHex: function(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b)
},



hemThree: function(tthen,tanimate,x,y,w,h,hemano){
let hema = Crystalline.maaelle('div',x,y,w,h,hemano)

Crystalline.Corsan = hema
hema.threescript = tanimate
hema.threeobjects = []
hema.threeactive = false
hema.Textures = []
hema.animate = function(){ 	
                      	if(hema.threeactive == true){
for(i=0;i<hema.threeobjects.length;i++){
hema.threeobjects[i]()
}
hema.threescript()
//hema.ORBITCONTROLS.update()
hema.RENDERER.render( hema.SCENE, hema.CAMERA )
}
let ani = hema.animate.bind(this)
requestAnimationFrame( ani )
}.bind(this)

hema.THREE = THREE

hema.TextureLoader = new hema.THREE.TextureLoader()
//hema.GLTFLoader = new this.THREE.GLTFLoader()

let vww = Math.round(w*hemano.clientWidth)
let vhh = Math.round(h*hemano.clientHeight)

     hema.SCENE = new hema.THREE.Scene()

hema.LIGHT = new hema.THREE.AmbientLight(0xffffff,0.3)
hema.SCENE.add(hema.LIGHT)

hema.SUN = new hema.THREE.PointLight( 0xffffff, 1, 70 )
hema.SUN.position.set( 13, 20, 13 )
hema.SUN.castShadow = true
hema.SUN.shadow.mapSize.width = 26
hema.SUN.shadow.mapSize.height = 26
hema.SUN.shadow.camera.near = 1
hema.SUN.shadow.camera.far = 50
hema.SCENE.add( hema.SUN )

    hema.CAMERA = new hema.THREE.PerspectiveCamera( 90, vww/ vhh, 0.1, 1000 )
hema.cameraX = 0
hema.cameraY = 0
hema.cameraZ = 0
hema.CAMERA.position.set(0, 0, 0)



     hema.RENDERER = new hema.THREE.WebGLRenderer()
hema.RENDERER.shadowMap.enabled = true
      hema.RENDERER.setSize(vww, vhh)
hema.RENDERER.setPixelRatio(window.devicePixelRatio)

hema.ORBITCONTROLS = new hema.THREE.OrbitControls(hema.CAMERA,hema.RENDERER.domElement)
hema.ORBITCONTROLS.enabled = false
//hema.ORBITCONTROLS.enableDamping = true
//hema.ORBITCONTROLS.dampingFactor = 0.05
hema.ORBITCONTROLS.screenSpacePanning = false
hema.ORBITCONTROLS.minDistance = 30
hema.ORBITCONTROLS.maxDistance = 100

hema.T = hema.RENDERER.domElement
Crystalline.raphos(hema.T)
hema.T.lo(0,0,1,1)
hema.front(999999999999)
 hema.ano( hema.T )


















hema.createUnit = function(x,y,z,who){

let hemb = {}
hemb.represents = who
hema.tani = who
hemb.x = x
hemb.y = y
hemb.z = z
hemb.variant = ""
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hema.b,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)



hemb.removeFromMap = function(){
this.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)


hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)
}
return hemb
}.bind(this)









hema.SunRaphos = function(hemb){
























































































































































































































hemb.lookAtMe = function(){
hema.CameraLookAtObject(hemb)
return hemb
}.bind(this)














































































































hemb.position = function(rx,ry,rz){
hemb.x = rx
hemb.y = ry
hemb.z = rz
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)



hemb.wireframe = function(hem){
if(hem=="o"){
hemb.materi1.wireframe = true
}else{
hemb.materi1.wireframe = false
}
}.bind(this)



hemb.texturewrap  = function(img){
      
                   
           let mewta = new hema.THREE.TextureLoader().load(img)
                    mewta.wrapS = mewta.wrapT = hema.THREE.RepeatWrapping
                    
                    hemb.materi1.map = mewta         
                    hemb.materi1.needsUpdate = true
                  }.bind(this)




return hemb
}.bind(this)
















































































































































































































hema.maaTree = function(x,y,z){

let hemb = hema.maaS(x,y,z,2,90,2)
hema.maaS(x+6,y+14,z,10,2,2)
hema.maaS(x,y+20,z+6,2,2,10)
hema.maaS(x-6,y+26,z,10,2,2)
hema.maaS(x,y+32,z-6,2,2,10)
hema.maaS(x+6,y+38,z,10,2,2)
return hemb
}.bind(this)



hema.maaS = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(xp, yp, zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
return hemb
}.bind(this)









Crystalline.Corsan.maaLight = function(x,y,z,strength){
let light = new THREE.PointLight(0xffffff,strength)
light.position.set(x,y,z)
hema.SCENE.add(light)
}.bind(this)


Crystalline.Corsan.maaInvisithing = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(255,255,255)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(hemb.xp, hemb.yp, hemb.zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hemb.aaM()
return hemb
}.bind(this)






















































hema.cameraSpin = function(tani){
hema.ORBITCONTROLS.enabled = true
return hema
}.bind(this)




hema.cameraNonspin = function(tani){
hema.ORBITCONTROLS.enabled = false
return hema
}.bind(this)









hema.maaMaven = function(x,z,type,who){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.variant = type
hemb.present = "o"
if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{
let hm = Crystalline.melosia(type+"/Maven/Corsa")
let wm = Crystalline.fate(hm.length)
let whoo = hm[wm].replace(".png","") +"Maven"
let tew = hema.Textures[whoo]
hemb.variant = hm[wm]

if(type != "Nif"){
hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)

hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
}else{

let whooo = who +"Hazel"
let tew2 = hema.Textures[whooo]

hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })
hemb.materi2 = new hema.THREE.SpriteMaterial({ 
	map: tew2,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)
hemb.mesh2 = new hema.THREE.Sprite(hemb.materi2)
hemb.mesh2.scale.set(0.3,0.3,0.3)
hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
hema.SCENE.remove(hemb.mesh2)
hemb.materi2.dispose()
hemb.mesh2 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hemb.mesh2.position.set(hemb.x,hemb.y+1,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hema.SCENE.add(hemb.mesh2)
}

}


return hemb
}.bind(this)


































































hema.maaEditSphere = function(x,z){

let hemb = {}
hemb.x = x
hemb.y = 3
hemb.z = z

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.SphereGeometry(0.35)

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){

hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.rotatia = function(){
hemb.mesh1.rotation.x = hemb.mesh1.rotation.x+0.01
}.bind(this)
hema.threeobjects.push(hemb.rotatia)



return hemb
}.bind(this)

























































































hema.CameraLookAtPosition = function(x,y,z){
let weW = new hema.THREE.Vector3(x,y,z)
hema.CAMERA.lookAt(weW)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraPosition = function(x,y,z){
hema.cameraX = x
hema.cameraY = y
hema.cameraZ = z
hema.CAMERA.position.set(x,y,z)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraTopDown = function(){
//hema.CAMERA
}.bind(this)

hema.CameraVFov = function(hem){
hema.CAMERA.fov = hem
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraLookAtObject = function(hemc){
hema.CAMERA.lookAt(hemc.mesh1.position)
}.bind(this)

hema.cameraright = function(hem){
hema.cameraX = hema.cameraX+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraleft = function(hem){
hema.cameraX = hema.cameraX-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameradown = function(hem){
hema.cameraZ = hema.cameraZ+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraup = function(hem){
hema.cameraZ = hema.cameraZ-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)



hema.CameraAutoTurnaround = function(hemb){
if(arguments.length == 1){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtObject(hemb)
}.bind(this)
hema.threeobjects.push(rotatia)
}
if(arguments.length == 3){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtPosition(arguments[0],arguments[1],arguments[2])
}.bind(this)
hema.threeobjects.push(rotatia)
}


}.bind(this)











hema.maaConversion = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.variant = who
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)






















hema.maaHazel = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z

if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let whoo = who +"Hazel"

let tew = hema.Textures[whoo]



hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)





























hema.maaSen = function(x,z,type){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 1
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.materi1 = ""
if(type.substring(0,4)=="Wall"){
hemb.y=2
hemb.ctype = hemb.ctype.replace("Wall","")
}
if(type.substring(0,9)=="Superwall"){
hemb.y=3
hemb.ctype = hemb.ctype.replace("Superwall","")
}
if(type.substring(0,3)=="Pit"){
hemb.y=0
hemb.ctype = hemb.ctype.replace("Pit","")
}

if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

if(type.substring(0,7)!="Culture"){
let whoo = hemb.ctype +"Sen"
let tew = hema.Textures[whoo]

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	map: tew,
transparent: true
 })
}else{
let hcolor = type.substring(7,type.length)
hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: hcolor,
transparent: true,
wireframe: true
 })

}


hemb.shape1  = new hema.THREE.BoxGeometry( hemb.xw, hemb.yw, hemb.zw )
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){





hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.shape1.dispose()
hemb.mesh1 = undefined

}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)



}

return hemb
}.bind(this)



















































      tthen()
    
hema.threeactive = true
hema.animate()

return hema
},











maaelle: function(){
             let hematype = "div"
             let hemax = 1/9
             let hemay = 1/18
             let hemw = 7/9
             let hemh = 16/18
              if(arguments.length>0){hematype = arguments[0]
              if(arguments[0]=="aera"){hematype = "textarea"}}
              if(arguments.length>1){hemax = arguments[1]}
              if(arguments.length>2){hemay = arguments[2]}
              if(arguments.length>3){hemw = arguments[3]}
              if(arguments.length>4){hemh = arguments[4]}
              let hema = document.createElement(hematype)
              hema.hematype = hematype
              if(hema.hematype == "div"){
               hema.style.userSelect = "none"
              }
             this.raphos(hema)
hema.style.fontFamily = "EmilysCandy"
if(hematype == "option"){
arguments[1].ano(hema)
}else{
             this.lo(hema,hemax,hemay,hemw,hemh)
}
         
             if(arguments.length>5){arguments[5].ano(hema)}
             
hema.dalcorsa("0,0,0,0.0").aeracorsa("255,255,255,1").aeraglow("255,255,255,1")


             return hema
            },




















kiDelete: function(){Kt.kieh(1,0)},
            ki: function(hem){Kt.ki(hem)},
            kiPaste: function(){Kt.kiPaste()},
            kiCopy: function(){Kt.kiCopy()},
            kiCut: function(){Kt.kiCut()},
            kiSelectAll: function(){Kt.kiSelectAll()},
            kiSelect: function(hemben,hemboda){Kt.kiSelect(hemben,hemboda)},
            kiboda: function(hemdistance){return Kt.kiboda(hemdistance)},
            kiben: function(hemdistance){return Kt.kiben(hemdistance)},
            kieh: function(hemben,hemboda){Kt.kieh(hemben,hemboda)},
            kiUp: function(){Kt.kiUp()},
            kiDown: function(){Kt.kiDown()},
            kiLeft: function(){Kt.kiLeft()},
            kiRight: function(){Kt.kiRight()},
            kiUndo: function(){Kt.kiUndo()},
            kiRedo: function(){Kt.kiRedo()},
    
kiSelection: function(){return Kt.kiSelection()},
      


gotowebpage: function(hem){Kt.gotowebpage(hem)},


     readasset: function(hem){
return Kt.readasset(hem)
}, 
exportasset: function(hem,boda){
Kt.exportasset(hem,boda)
}, 
        
        
 














veskaLo: function(tani,hem){
document.location.href = "https://"+tani+".glitch.me/"+hem
},


sensia: function(aera,sia){
let w = Crystalline.melosia(sia)
let an = w.length
if(w[0]==""){an=0}
let re = an.toString()
Crystalline.seall(aera,sia+"/"+re)
},

lo: function(hem,x,y,w,h){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)
                        hem.style.right = this.conversion.percentstring(1-(x+w))
                        hem.style.top = this.conversion.percentstring(y)
                        hem.style.bottom = this.conversion.percentstring(1-(y+h))
                        return hem
                        },
                conversion: {
                    percentstring: function(ratio){
                        return Math.round(ratio*100).toString()+"%"
                    },
                },



loles: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)   
                        return hem
                        },

losel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.right = this.conversion.percentstring(x)   
                        return hem
                        },

lophel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.top = this.conversion.percentstring(x)   
                        return hem
                        },
         
lolehp: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.bottom = this.conversion.percentstring(x)   
                        return hem
                        },










   





lohem: function(hem){
let hema = document.getElementById(hem)

this.raphos(hema)
return hema
},



























fate: function(hsen){
let hema = Math.floor(Math.random()*hsen)
return hema
},



SenNow: function(){
let hema = Date.now()
hema = hema.toString()
return hema
},

Senminutessince: function(since){
let hema = this.SenNow()
let hemaaa = parseInt(hema)-parseInt(since)
return hemaaa
},

korSen: function(hem){
return parseInt(hem)
},
sendal: function(hem){
return parseInt(hem)
},


maaHemSen: function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.year
hema.month
hema.day
hema.hour
hema.minute
hema.second
hema.millisecond
return hema
},

























}

let Kt = {
say: function(hem){alert(hem)},



hseall: function(aera,siar){
localStorage.setItem(siar,aera)
},
hlseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
seall: function(aera,siar){
localStorage.setItem(siar,aera)
},
lseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
        seallsiar: function(siabe,siabo){},
        rasiar: function(siabe){},
rasia: function(siabe){},
        seallsia: function(siabe,siabo){},
        seallver: function(siabe,siabo){},
        kortanisia: function(siabe,siabo){},
        melosia: function(hem){},
hmelosia: function(hem){},
sunseall: function(aera,siar){},
sunlseall: function(siar){},
        sunmelosia: function(hem){},




}






window.mode = ""
if(innerWidth > innerHeight){window.mode = "computer"}else{window.mode = "phone"}

window.SunMohka = Crystalline.maaelle('div',0,0,1,1).sunano().front("1").dalcorsa("0,0,0,1")
SunMohka.Aera = Crystalline.maaelle('div',0,0,1,1,SunMohka).dalcorsa("0,0,0,1")
SunMohka.TopBar = Crystalline.maaelle('div',0,0,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.TopBar.Entries = []
SunMohka.TopBar.Add = function(hem){
SunMohka.Aera.lophel(1/24)
SunMohka.TopBar.vis()
hem.lo((1/5)*SunMohka.TopBar.Entries.length,0,1/5,1)
SunMohka.TopBar.ano(hem)
SunMohka.TopBar.Entries.push(hem)
}.bind(this)
SunMohka.BottomBar = Crystalline.maaelle('div',0,23/24,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.BottomBar.Entries = []
SunMohka.BottomBar.Add = function(hem){
SunMohka.Aera.lolehp(1/24)
SunMohka.BottomBar.vis()
hem.lo((1/5)*SunMohka.BottomBar.Entries.length,0,1/5,1)
SunMohka.BottomBar.ano(hem)
SunMohka.BottomBar.Entries.push(hem)
}.bind(this)



window.Users = {}





Users.coinCorsa = ""






Users.viewUp = async function(){
await Creatures.magicspell("viewUp",{},function(data){})  
  }

Users.refreshMoney = async function(){
await Creatures.magicspell("getMoney",{},function(data){
SunMohka.SignInBar.coinamount.ray(data.money)
})
}.bind(this)



Users.amISignedInvInvis = []
Users.amISignedInInvis = function(hem){
Users.amISignedInvInvis.push(hem)
}.bind(this)

Users.amISignedIn = async function(){
await Creatures.magicspell("amISignedIn",{},function(data){
if(data.signedIn == "o"){
SunMohka.SignInBar.signinliORusername.mode = "Account"
SunMohka.SignInBar.signinliORusername.ray(data.name)
for(i=0;i<Users.amISignedInvInvis.length;i++){
Users.amISignedInvInvis[i].invis()
}
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
}
})
}



Users.signOut = async function(){
await Creatures.magicspell("signOut",{},function(data){
if(siartani == "gamble"){Zogladorium()}
SunMohka.SignInBar.coinamount.ray("0")
alert(data.say)})
}

Users.signIn = async function(hname,hpass,hreferer){
await Creatures.magicspell("signIn",{name:hname,pass:hpass,referer:hreferer},function(data){alert(data.say)
if(data.say == "Account Created.  You are Signed In." || data.say == "You are Signed In."){
SunMohka.SignInBar.signinliORusername.ray(data.name)
SunMohka.SignInBar.signinliORusername.mode = "Account"
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
SunMohka.SignInBar.abovepopupsignin.invis()
}
})
}

Users.createSignInBar = function(cointype){
SunMohka.SignInBar = Crystalline.maaelle('div',0,0,1,1)
SunMohka.TopBar.Add(SunMohka.SignInBar)
SunMohka.SignInBar.cointype = cointype

SunMohka.SignInBar.coin = Crystalline.maaelle('div',0,0,1/4,1,SunMohka.SignInBar).dalcorsascroll().dalcorsaeren().dalcorsalsen().eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}
}.bind(this))

SunMohka.SignInBar.coinamount = Crystalline.maaelle('div',1/4,0,1/4,1,SunMohka.SignInBar).vcenter().ray("0").eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}

}.bind(this))

if(SunMohka.SignInBar.cointype.toUpperCase() == "S"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/5107474554438d57be7152605ea67a78.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}
if(SunMohka.SignInBar.cointype.toUpperCase() == "PERSON"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/837189de985fa03e9fb36adfbabf8c29.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}

SunMohka.SignInBar.signinliORusername = Crystalline.maaelle('div',2/4,0,2/4,1,SunMohka.SignInBar).dalcorsa("0,0,0,1").corsaera("255,255,255").rhap("7","255,255,255,1","1","solid").ray("SignIn").vcenter().eshe(function(){
if(SunMohka.SignInBar.signinliORusername.mode == "SignIn"){
SunMohka.SignInBar.abovepopupsignin.visible()
}
if(SunMohka.SignInBar.signinliORusername.mode == "Account"){
if(Users.AccountMohka.on=="l"){
Users.AccountMohka.on = "o"
Users.AccountMohka.visible()
SunMohka.SignInBar.signinliORusername.corsaera("0,255,0,1").rhap("7","0,255,0,1","1","solid")
}else{
Users.AccountMohka.on = "l"
Users.AccountMohka.invisible()
SunMohka.SignInBar.signinliORusername.corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid")
}

}
}.bind(this))
SunMohka.SignInBar.signinliORusername.mode = "SignIn"

Users.amISignedIn()

SunMohka.SignInBar.abovepopupsignin = Crystalline.maaelle('div',0,0,1,1).sunano().invis().front("100").dalcorsa("0,0,0,0.5")

SunMohka.SignInBar.popupsignin = Crystalline.maaelle('div',0,0,1,1,SunMohka.SignInBar.abovepopupsignin).front("101").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

SunMohka.SignInBar.popupsignin.login = Crystalline.maaelle('aera',1/9,1/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Name").borhap("12")

SunMohka.SignInBar.popupsignin.pass = Crystalline.maaelle('aera',1/9,3/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Password").borhap("12")

SunMohka.SignInBar.popupsignin.referer = Crystalline.maaelle('aera',1/9,5/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("referer").borhap("12")

SunMohka.SignInBar.popupsignin.signinli = Crystalline.maaelle('div',1/9,7/18,7/9,1/18,SunMohka.SignInBar.popupsignin).eshe(function(){
Users.in = SunMohka.SignInBar.popupsignin.login.value
Users.signIn(SunMohka.SignInBar.popupsignin.login.value,SunMohka.SignInBar.popupsignin.pass.value,SunMohka.SignInBar.popupsignin.referer.value)
}.bind(this)).ray("Enter").rhap("7","255,255,255,1","1","solid").borhap("12")
return SunMohka.SignInBar
}









Users.AccountMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).invis().front("201").dalcorsa("0,0,0,1")

Users.AccountMohka.on = "l"

Users.AccountMohka.unlogLi = Crystalline.maaelle('div',0,0,1/9,1/12,Users.AccountMohka).ray("LogOut").eshe(function(){
SunMohka.SignInBar.signinliORusername.ray("SignIn")
SunMohka.SignInBar.signinliORusername.mode = "SignIn"
Users.AccountMohka.invis()
Users.signOut()
}.bind(this)).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

Users.Inventory = Crystalline.maaelle('div',0,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")
Users.Inventory.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Inventory).ray("Inventory").vcenter()
Users.Inventory.Items = Crystalline.maaelle('div',0,1/8,1,7/8,Users.Inventory).rhap("7","255,255,255,1","1","solid").flow("o")
Users.Inventory.Items.vItem = []

Users.Inventory.Items.erenlupe = function(tani,corsa,sen){

let hema = Crystalline.maaelle('div',0,0,1,1)

return hema

}.bind(this)




Users.Friends = Crystalline.maaelle('div',1/2,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.Friends.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Friends).ray("Friends").vcenter()




Users.History = Crystalline.maaelle('div',0,5/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.History.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.History).ray("History").vcenter()

Users.History.Melo = Crystalline.maaelle('div',0,1/8,1/9,7/8,Users.History).rhap("0","255,255,255,1","1","solid")

Users.History.Melo.liItems = Crystalline.maaelle('div',0,0,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Items")

Users.History.Melo.liComments = Crystalline.maaelle('div',0,1/6,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Comments")

//bottom bar of page to be a generic banner until person ranks on a leaderboard, at which point upgrades to 'where u are on leaderboard'








window.Creatures = {}



Creatures.magicspell = async function(what,thing,next){ 
    await fetch('https://rosinvault.glitch.me/'+what, { method: 'POST', headers: { 'Content-Type': 'application/json'}, body: JSON.stringify(thing)}).then(response => response.json()).then(data => next(data)).catch(error => alert(error))  
  }


Creatures.getUpdates = async function(){ 
await Creatures.magicspell("getUpdates",{},function(data){
Creatures.UpdatesMohka.aera.ray("")
Creatures.UpdatesMohka.aera.entries = []
let entries = data.entries.split(`:;:

`)
for(i=0;i<entries.length;i++){
let ha = entries[i].split(`:::

`)
if(ha[1].indexOf("RosinVault, ") != -1){
ha[1] = ha[1].replace("Allotopia, ","")
ha[1] = ha[1].replace("RosinVault, ","")
ha[1] = ha[1].replace("GrowingHome, ","")
ha[1] = ha[1].replace("BeautifulPeople2, ","")
Creatures.UpdatesMohka.aera.entries[i] = Crystalline.maaelle('div',0,(1/6)*i,1,1/6,Creatures.UpdatesMohka.aera)
Crystalline.maaelle('div',0,0,1/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[0]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
 Crystalline.maaelle('div',1/4,0,3/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[1]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
}
}
    })
  }
  








Creatures.UpdatesMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).dalcorsa("0,0,0,1").sunano().invis().front("50")

Creatures.UpdatesMohka.supdate = ""

Creatures.UpdatesMohka.getViewUpdates = async function(){
Creatures.magicspell("getViewUpdates",{},function(data){
Creatures.UpdatesMohka.viewcount.ray("Views: "+data.views)
})
  }
  




Creatures.UpdatesMohka.aera = Crystalline.maaelle('div',0,1/12,1,11/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").flow("o")

Creatures.UpdatesMohka.returnli = Crystalline.maaelle('div',0,0,1/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter().ray("Return").eshe(function(){
clearInterval(Creatures.UpdatesMohka.supdate)
Creatures.UpdatesMohka.invis()
}.bind(this))

Creatures.UpdatesMohka.viewcount = Crystalline.maaelle('div',5/8,0,3/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter()



Creatures.addUpdatesBottomBar = function(){
let hema = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
Creatures.UpdatesMohka.getViewUpdates()
Creatures.UpdatesMohka.supdate = setInterval(function(){
Creatures.UpdatesMohka.getViewUpdates()
}.bind(this),5000)
Creatures.getUpdates()
Creatures.UpdatesMohka.visible()
}.bind(this)).ray("Updates")
SunMohka.BottomBar.Add(hema)
}.bind(this)







//////////////////////////////////////////////////

































































































let Comments = {}
Comments.submit = function(hem,hsen){
let ish = Crystalline.lseall("in")
if(ish == "o"){
let thing = {}
thing.aera = hem
thing.when = Date.now()
thing.which = hsen
thing.name = SunMohka.SignInBar.signinliORusername.sunaera()
Creatures.magicspell("askToComment",function(data){
Crystalline.say("Comment Submitted")
})
}
}.bind(this)















Profile ={}
Profile.referer = ""
Profile.refercount = ""
Profile.refercode = ""
Profile.Comments = {}
Profile.Comments.History = {}
Profile.Comments.History.topRanked = function(){
let hema = {}

return hema
}.bind(this)

// (leaf rating system)








































































let Store = {}
Store.createStore = function(){
SunMohka.StoreLi = Crystalline.maaelle('div',0,0,1,1).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").vcenter().corsaera("255,255,255,1").ray("Store").eshe(function(){
SunMohka.StoreMohka.vis()
}.bind(this))
SunMohka.StoreMohka = Crystalline.maaelle('div',0,0,1,1).sunano().dalcorsa("0,0,0,1").corsaera("255,255,255,1").front("203").invis()
SunMohka.StoreMohka.returnLi = Crystalline.maaelle('div',0,0,1/9,1/12,SunMohka.StoreMohka).ray("return").vcenter().dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").eshe(function(){
SunMohka.StoreMohka.invis()
}.bind(this))


SunMohka.TopBar.Add(SunMohka.StoreLi)
return SunMohka.StoreLi
}.bind(this)






























Creatures.createTimeBar = function(x,y,w,h,ano){
let hema = {}
hema.TimeBar = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.TimeBar.heartdrum = setInterval(function(){
if(hema.time != ""){
let timesofar = Date.now() - hema.time
let days = (((timesofar/1000)/60)/60)/24
let hours = ((timesofar/1000)/60)/60
let minutes = (timesofar/1000)/60
let seconds = timesofar/1000

if(hours < 1){
hema.TimeBar.barhourm.lo(0,0,hours,1)
hema.TimeBar.bartwohoursm.lo(0,0,0,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 1 && hours < 2){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,hours-1,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 2 && hours < 3){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,hours-2,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 3 && hours < 6){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,(hours-3)/3,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 6 && hours < 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,(hours-6)/6,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,1,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,(hours-12)/6,1)
}

}

}.bind(this),1000)

hema.TimeBar.maa = function(){
Creatures.magicspell("getTimeAndCollects",{},function(data){
if(data.signedIn != "l"){
hema.time = data.timesofar
}
}.bind(this))
}.bind(this)

window.Zogladorium = hema.TimeBar.maa
hema.TimeBar.betKoCollect = Crystalline.maaelle('div',1/4,1/16,2/4,1/8,hema.TimeBar).invis().corsaera("0,255,0,1").rai(0).vcenter().aerasun("0,255,0,1")
hema.TimeBar.timeshow = Crystalline.maaelle('div',0,1/4,1,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").dalcorsa("42,18,59,1")
hema.TimeBar.barhour = Crystalline.maaelle('div',0,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("1 Hour")
hema.TimeBar.bartwohours = Crystalline.maaelle('div',1/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("2 Hours")
hema.TimeBar.barthreehours = Crystalline.maaelle('div',2/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("3 Hours")
hema.TimeBar.barsixhours = Crystalline.maaelle('div',3/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("6 Hours")
hema.TimeBar.bartwelvehours = Crystalline.maaelle('div',4/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("12 Hours")
hema.TimeBar.bartwentyfourhours = Crystalline.maaelle('div',5/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("24 Hours")

hema.TimeBar.barhourm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barhour).dalcorsa("0,255,0,1")
hema.TimeBar.bartwohoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwohours).dalcorsa("0,255,0,1")
hema.TimeBar.barthreehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barthreehours).dalcorsa("0,255,0,1")
hema.TimeBar.barsixhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barsixhours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwelvehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwelvehours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwentyfourhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwentyfourhours).dalcorsa("0,255,0,1")

hema.TimeBar.reward = {}
hema.TimeBar.reward.claimli = Crystalline.maaelle('div',3/9,2/4,3/9,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").vcenter().ray("Collect your points!").eshe(function(){
Creatures.magicspell("timebarCollect",{},function(data){
Users.refreshMoney()
hema.TimeBar.maa()
hema.TimeBar.betCollect(data.amountCollected)
})

}.bind(this))

hema.TimeBar.reward.first = Crystalline.maaelle('div',0,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.second = Crystalline.maaelle('div',1/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.third = Crystalline.maaelle('div',2/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fourth = Crystalline.maaelle('div',3/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fifth = Crystalline.maaelle('div',4/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.sixth = Crystalline.maaelle('div',5/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")




hema.TimeBar.reward.corsahourc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.first).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwohoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.second).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsathreehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.third).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsasixhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fourth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwelvehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fifth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwentyfourhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.sixth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()

hema.TimeBar.reward.corsahour = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.first).vcenter().ray("+ 5")
hema.TimeBar.reward.corsatwohours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.second).vcenter().ray("+ 4")
hema.TimeBar.reward.corsathreehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.third).vcenter().ray("+ 2")
hema.TimeBar.reward.corsasixhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fourth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwelvehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fifth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwentyfourhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.sixth).vcenter().ray("+ 0")

hema.TimeBar.betCollect = function(hemsen){
let raera = ""
if(hemsen == undefined){
raera = "An hour has not passed yet."
}else{
raera = hemsen + " points collected!"
}
hema.TimeBar.betKoCollect.ray(raera)
hema.TimeBar.betKoCollect.rai(0)
let op = 0
let dalo = "p"
hema.TimeBar.betKoCollect.vis()
let hx = setInterval(function(){
let opp = op
if(op>1){opp=1}
hema.TimeBar.betKoCollect.rai(opp)
if(dalo=="p"){op=op+0.02}
if(op>=2){op=1
dalo="l"}
if(dalo=="l"){op=op-0.01}
if(op<0){hema.TimeBar.betKoCollect.invis()
clearInterval(hx)}

}.bind(this),10)
}.bind(this)


hema.TimeBar.maa()
return hema.TimeBar
}.bind(this)




//10 questions per day






















Creatures.Gamble = {}

Creatures.Gamble.maa = function(x,y,w,h,ano){
Creatures.Gamble.Mohka = Crystalline.maaelle('div',x,y,w,h,ano)

Creatures.Gamble.getQuestions = async function(){
await Creatures.magicspell("getMyDailyQuestions",{},function(hem){
if(hem.q1aera != ""){
let q = hem.q1aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question1.ray(q[0]+" vs "+q[1])
Creatures.Gamble.Mohka.q1t1.sen = hem.q1
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.vis()
Creatures.Gamble.Mohka.question1.vis()
Creatures.Gamble.Mohka.q1t1.vis()
Creatures.Gamble.Mohka.q1t1.ray(q[0])
Creatures.Gamble.Mohka.q1t2.vis()
Creatures.Gamble.Mohka.q1t2.ray(q[1])
}else{
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.invis()
Creatures.Gamble.Mohka.question1.invis()
Creatures.Gamble.Mohka.q1t1.invis()
Creatures.Gamble.Mohka.q1t1.ray("")
Creatures.Gamble.Mohka.q1t2.invis()
Creatures.Gamble.Mohka.q1t2.ray("")
}

if(hem.q2aera != ""){
let qb = hem.q2aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question2.ray(qb[0]+" vs "+qb[1])
Creatures.Gamble.Mohka.q2t1.sen = hem.q2
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.vis()
Creatures.Gamble.Mohka.question2.vis()
Creatures.Gamble.Mohka.q2t1.vis()
Creatures.Gamble.Mohka.q2t1.ray(qb[0])
Creatures.Gamble.Mohka.q2t2.vis()
Creatures.Gamble.Mohka.q2t2.ray(qb[1])
}else{
Creatures.Gamble.Mohka.q2t1.sen = ""
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.invis()
Creatures.Gamble.Mohka.question2.invis()
Creatures.Gamble.Mohka.q2t1.invis()
Creatures.Gamble.Mohka.q2t1.ray("")
Creatures.Gamble.Mohka.q2t2.invis()
Creatures.Gamble.Mohka.q2t2.ray("")
}

}.bind(this))
}.bind(this)
Creatures.Gamble.answerQuestion = async function(questionsen,answer,amount){
await Creatures.magicspell("gambleAnswerQuestion",{questionsen:questionsen,answer:answer,amount:amount},function(hem){if(hem.answered == "o"){
Users.refreshMoney()
Creatures.Gamble.getQuestions()
}}.bind(this))
}.bind(this)

Creatures.Gamble.Mohka.streak = Crystalline.maaelle('div',0,1/2,1/2,1/2,Creatures.Gamble.Mohka).ray("Enable Streak").vcenter().rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1").eshe(function(){
if(Creatures.Gamble.Mohka.streak.on == "l"){
Creatures.Gamble.Mohka.streak.on = "o"
Creatures.Gamble.Mohka.streak.ray("Streak Enabled!")
Creatures.Gamble.Mohka.streak.rhap("7","0,0,0,1","1","solid").dalcorsa("0,255,0,1").corsaera("0,0,0,1")
Creatures.Gamble.Mohka.Amount1.ray("5")
Creatures.Gamble.Mohka.Amount2.ray("5")
}else{
Creatures.Gamble.Mohka.streak.on = "l"
Creatures.Gamble.Mohka.streak.ray("Enable Streak")
Creatures.Gamble.Mohka.streak.rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")
}

}.bind(this))
Creatures.Gamble.Mohka.streak.on = "l"

Creatures.Gamble.Mohka.questiongetnext = Crystalline.maaelle('div',0,0,1/2,1/2,Creatures.Gamble.Mohka).ray("Get new questions").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){


}.bind(this))

Creatures.Gamble.Mohka.Questions = Crystalline.maaelle('div',1/2,0,1/2,1,Creatures.Gamble.Mohka)


Creatures.Gamble.Mohka.question1 = Crystalline.maaelle('div',0,0,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q1t1 = Crystalline.maaelle('div',2/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t1.sunaera(),amt)

}.bind(this)).invis()
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.q1t2 = Crystalline.maaelle('div',5/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount1 = Crystalline.maaelle("aera",2/7,1/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


Creatures.Gamble.Mohka.question2 = Crystalline.maaelle('div',0,4/7,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q2t1 = Crystalline.maaelle('div',2/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t1.sunaera(),amt)
Creatures.Gamble.Mohka.q2t1.sen = ""

}.bind(this)).invis()
Creatures.Gamble.Mohka.q2t2 = Crystalline.maaelle('div',5/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount2 = Crystalline.maaelle("aera",2/7,5/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


return Creatures.Gamble.Mohka
}.bind(this)

Creatures.Gamble.Aerakormaa = function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)

return hema
}.bind(this)





























Creatures.Leaderboard = {}
Creatures.Leaderboard.maa = function(hem,x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.type = hem
hema.Tani = Crystalline.maaelle('div',0,0,1,1/7,hema).ray(hem).vcenter().rhap("7","255,255,255,1","1","solid")
return hema
}.bind(this)










































Creatures.Bulletin = {}
Creatures.Bulletin.maa = function(x,y,w,h,ano){
Creatures.Bulletin.Mohka = Crystalline.maaelle('div',x,y,w,h,ano).rhap("7","255,255,255,1","1","solid")
Creatures.Bulletin.Mohka.JustReleasedItemsTani = Crystalline.maaelle('div',0,0,1,1/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid").ray("Just Released! (within 72hours)").vcenter()

Creatures.Bulletin.Mohka.JustReleasedItems = Crystalline.maaelle('div',0,1/9,1,4/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid")
Creatures.maaLleslai("Dab","Released","Left",100,0,0,1,1,Creatures.Bulletin.Mohka.JustReleasedItems,"","Nothing in the last 72 hours.")

Creatures.Bulletin.Mohka.WelcomeNewMembers = Crystalline.maaelle('div',0,5/9,1,2/9,Creatures.Bulletin.Mohka).ray("Welcome New Members").vcenter().rhap("0","255,255,255,1","1","solid")

Creatures.Bulletin.Mohka.RememberYourPoints = Crystalline.maaelle('div',0,7/9,1,2/9,Creatures.Bulletin.Mohka).ray("Remember Your Points").vcenter().rhap("0","255,255,255,1","1","solid").eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))

return Creatures.Bulletin.Mohka
}.bind(this)































Creatures.maaLleslai = function(hemdal,hemsort,slideway,slidespeed,x,y,w,h,ano,mcorsa,mtani){
let hema = Crystalline.maaelle('div',x,y,w,h,ano).rhap("0","255,255,255,1","1","solid")
hema.type = hemdal
hema.sort = hemsort
hema.slideway = slideway
hema.slidespeed = slidespeed

hema.slideHolder = Crystalline.maaelle('div',0,0,16/18,1,hema).dalcorsa("255,255,255,1").front("3").flow("o").dalcorsa(mcorsa)
hema.slides = []

hema.slideHolderEmpty = Crystalline.maaelle('div',0,0,1,1,hema.slideHolder).vcenter().ray(mtani).invis().aeraAlign("center").aeraeren(28).dalcorsa("0,0,0,0.8")



hema.onSlide = 0
hema.autoplaying = "o"


hema.sliderele = []
hema.seconds = 0

hema.rele = setInterval(function(){
if(hema.slides.length > 0){
hema.slideHolderEmpty.invis()
}else{hema.slideHolderEmpty.vis()}
for(i=0;i<hema.sliderele.length;i++){
hema.sliderele[i]()
}},1000)
hema.slidewidth = 1000
hema.heartdrumsen = 0
hema.heartdrum = setInterval(function(){
if(hema.autoplaying == "o" && hema.slides.length > 0){
hema.heartdrumsen++
if(hema.heartdrumsen>hema.slides.length*hema.slidewidth){
hema.heartdrumsen=0
hema.slideHolder.scroll({
left: hema.heartdrumsen,
top:0,
behavior: "instant",
})
}else{
hema.slideHolder.scroll(hema.heartdrumsen,0)
}
}
}.bind(this),hema.slidespeed)

hema.CreateSlide = function(hemb,time,last){
hemb.Mohka = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1")
hemb.Mohka.Title = Crystalline.maaelle('div',1/9,0,7/9,1/7,hemb.Mohka).ray(hemb.ShowotronTitle).vcenter()
hemb.Mohka.Image = Crystalline.maaelle('div',0,1/7,1,4/7,hemb.Mohka).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hemb.Mohka.Countdown = Crystalline.maaelle('div',1/9,2/7,7/9,2/7,hemb.Mohka).vcenter()



if(hema.sort=="Upcoming"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = time-now
if(when > 0){
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)

}else{
hemb.Mohka.Countdown.ray(`<span style='color:rgb(255,215,105)'>Just Released!</span>`)

}
})
}

if(hema.sort=="Released"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = now-time
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)
})
}





hemb.Mohka.Description = Crystalline.maaelle('div',0,5/7,1,2/7,hemb.Mohka).ray(hemb.ShowotronDescription).vcenter()
let hemlink = Crystalline.maaelle('div',0,0,1,1).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hema.slideHolder.add(hemb.Mohka,hemlink,last)
}.bind(this)

hema.getSlidesFromServer = async function(){
await Creatures.magicspell("getEntries",{},hema.getSlidesFromServerXX)   
  }

hema.getSlidesFromServerXX = async function(hem){
let vslides = hem.entries.split(",")
for(i=0;i<vslides.length;i++){
hema.getSlideFromServer(vslides[i],"l",i,vslides.length)
}
}.bind(this)





hema.getSlideFromServer = async function(hemx,last,sen,vsen){
await Creatures.magicspell("loadEntry",{entrylocation:hemx},function(hem){
let datas = hem.entry.split("~*^*~")
let hemb = {}
hemb.entrynumber = datas[0]
hemb.entryname = datas[1]
hemb.entryimage = datas[2]
hemb.entrydescription = datas[3]
hemb.entryattributes = datas[4]
hemb.entrytype = datas[5]
hemb.ekkattributes = [] 
let vattribute = hemb.entryattributes.split("~x*^*x~")
for(i=0;i<vattribute.length;i++){
let atr = vattribute[i].split("~!*^*!~")
hemb.ekkattributes.push(atr)
let f = atr[0]
let ood = atr[1]
hemb[f] = ood
}

if(hemb.entrytype == hema.type){
if(hema.sort=="Upcoming"){

let nowdate = Date.now()
let onShowotron = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
let daysbefore = parseInt(hemb.DaysBeforeReleaseAddToGalleryAndShowotron) * 24 * 60 * 60 * 1000
if(day-daysbefore < now && day > now - (24*60*60*1000)){
onShowotron = "o"
}
if(onShowotron == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}

}

}
if(hema.sort=="Released"){
let nowdate = Date.now()
let onJustReleased = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
if(now > day && now < day +3*(24*60*60*1000)){
onJustReleased = "o"
}
if(onJustReleased == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}
}//Released


}


}//Dab
if(sen == vsen-1 && hema.slides.length > 0){hema.CreateSlide(hema.SunHemb,hema.SunTime,"o")}


}.bind(this))
 }


hema.slideHolder.add = function(hem,hemlink,last){
if(last=="l"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hemlink.lo(0,(1/10)+(1/5)*hema.slides.length,1,1/10)
hemlink.slidesen = hema.slides.length
hemlink.eshe(function(){
if(hema.autoplaying=="l"){
hema.autoplaying = "o"
}


if(Math.floor(hema.slidewidth*hemlink.slidesen) != Math.floor(hema.slideHolder.scrollLeft)){
hema.autoplaying = "l"
hema.slideHolder.scroll({
left: hema.slidewidth*hemlink.slidesen,
top:0,
behavior: "smooth",
})
}




}.bind(this))
hem.eshe(function(){
alert("hi")

}.bind(this))
hema.vli.ano(hemlink)
hema.slides.push(hem)
}
if(last=="o"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hem.eshe(function(){
alert("hi")

}.bind(this))
//hema.slides.push(hem)
}
}.bind(this)



hema.vli = Crystalline.maaelle('div',16/18,0,2/18,1,hema).dalcorsa("0,0,0,0.8").flow("o").front("5")
hema.getSlidesFromServer()


return hema
}.bind(this)


















Creatures.RTree = function(x,y,w,h,ano,leafsia,leaferen){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.MyRefCode = Crystalline.maaelle('div',1/2,0,1/2,1,hema)
hema.vLeaf = Crystalline.maaelle('div',0,0,1/2,1,hema)

hema.getLeafDalcorsa = function(){
let lf = Crystalline.fate(leaferen)
let lc = leafsia+lf+".png"
return lc
}.bind(this)

hema.vLeaf.leaf0 = Crystalline.maaelle('div',0,0/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(leafsia+"X.png").dalcorsalsen().dalcorsavcenter()
let ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf1 = Crystalline.maaelle('div',0,1/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf2 = Crystalline.maaelle('div',0,2/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf3 = Crystalline.maaelle('div',0,3/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf4 = Crystalline.maaelle('div',0,4/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()

return hema
}.bind(this)













</script></body>
</html>&&&&&&<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RosinVault</title>
   <script src="three.min.js"></script>
   <script src="GLTFLoader.js"></script>
  </head>
  <body><script>window.siartani = "vault"

window.siartanilo = "RosinVault"

window.Crystalline = {

raphos: function(hem){
 





hem.aeralign = function(hema){if(hema=="o" || hema==undefined){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }



















hem.vcenter = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
hem.style.alignItems = "center"
         return hem
         }

hem.vcenterles = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
         return hem
         }

hem.vcenterphel = function(){hem.style.display = "flex"
hem.style.alignItems = "center"
         return hem
         }

hem.vsel = function(){hem.style.display = "flex"
hem.style.justifyContent = "left"
hem.style.textAlign = "left"
         return hem
         }

hem.vles = function(){hem.style.display = "flex"
hem.style.textAlign = "right"
hem.style.justifyContent = "right"
         return hem
         }



hem.eshe = function(hema){
if(hem.hematype == "select"){
hem.onchange = hema}else{
hem.onclick = hema
}
          return hem
          }



















































































hem.dalcorsalsen = function(){hem.style.backgroundRepeat = "no-repeat"
                                      
         return hem
         }





hem.dalcorsavcenter = function(){hem.style.backgroundPosition = "center"
                                     
         return hem
         }















hem.dalcorsa = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.Background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

         hem.corsadal = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"} 
         return hem
         }

















hem.noselect = function(hema){
               hema.style.userSelect = "none"
          return hem}

hem.border = function(radius,color,width,style){
          hem.style.borderRadius = "7px"
          hem.style.borderColor = "rgba(255,255,255,1)"
          hem.style.borderWidth = "3px"
          hem.style.borderStyle = "double"
          if(arguments.length>0){hem.style.borderRadius = radius}
           if(arguments.length>1){hem.style.borderColor = "rgba("+color+")"}
           if(arguments.length>2){hem.style.borderWidth = width}
           if(arguments.length>3){hem.style.borderStyle = style}
           return hem
         }

         

         

         

         hem.ona = function(){
         for(this.iuuuui=0;this.iuuuui<arguments.length;this.iuuuui++){
           hem.removeChild(arguments[this.iuuuui]) 
          }
          return hem
         }

         hem.font = function(hema){hem.style.fontFamily = hema
          return hem
          }

          
         
         
         
         
         
         
         
         


         
      
         
         
         




  hem.dalcorsascroll = function(){hem.style.backgroundAttachment = "scroll"
                                     
         return hem
         }

hem.white = function(){hem.style.whiteSpace = "pre"
                                     
         return hem
         }


hem.dalcorsalscroll = function(){hem.style.backgroundAttachment = "fixed"
                                      
         return hem
         }


hem.dalcorsaliscroll = function(){hem.style.backgroundAttachment = "local"
                                      
         return hem
         }


hem.dalcorsasen = function(){hem.style.backgroundRepeat = "repeat"
                                      
         return hem
         }



hem.dalcorsaeren = function(){hem.style.backgroundSize = "cover"
                                      
         return hem
         }



hem.dalcorsaloeren = function(){hem.style.backgroundSize = "contain"
                                      
         return hem
         }

hem.dalcorsahem = function(){hem.style.backgroundSize = "100% 100%"
                                      
         return hem
         }



         hem.textEdge = function(hema){if(hema=="o"){hem.style.whiteSpace = "wrap"}
                                       if(hema=="l"){hem.style.whiteSpace = "nowrap"}
         return hem
         }
              



hem.koil = function(){hem.style.userSelect = "none"
                                      
         return hem
         }



hem.front = function(hemb){hem.style.zIndex = hemb
                                      
         return hem
         }

hem.dal = function(hemb){hem.type = hemb
                                      
         return hem
         }





































































































































hem.ray = function(hema){












let hn = ""
if(hema != undefined){hn=hema}
         if(hem.hematype == "textarea"){hem.value = hn}
if(hem.hematype == "aera"){hem.value = hn}
if(hem.hematype == "notaera"){hem.value = hn}
if(hem.hematype == "select"){hem.value = hn}
if(hem.hematype == "input"){hem.value = hn}
if(hem.hematype == "div"){hem.innerHTML = hn}
if(hem.hematype == "button"){hem.textContent = hn}
if(hem.hematype == "option"){hem.textContent = hn
hem.value = hn}
         return hem
         }







hem.aeraeren = function(hema){hem.style.fontSize = hema+"px"
         return hem
         }
hem.textSize = function(hema){hem.style.fontSize = hema 
         return hem
         }



















hem.sunano = function(hema){
               document.body.appendChild(hem)
          return hem}

















hem.ano = function(){
         for(this.iuuui=0;this.iuuui<arguments.length;this.iuuui++){
           hem.appendChild(arguments[this.iuuui]) 
          }
          return hem
         }

























hem.vis = function(){hem.style.display = "flex"
                                      
         return hem
         }

hem.visible = function(){hem.style.display = "flex"
                                      
         return hem
         }







hem.invis = function(){hem.style.display = "none"
                                      
         return hem
         }
hem.invisible = function(){hem.style.display = "none"
                                      
         return hem
         }




















hem.sunaera = function(){
if(arguments.length == 1){hem.innerHTML = arguments[0]
         return hem
         }
if(arguments.length == 0 && hem.hematype == "textarea"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "select"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "input"){
return hem.value
}
if(arguments.length == 0 && hem.hematype != "textarea"){
         return hem.innerHTML
         }
}





hem.aeradal = function(hema){hem.style.fontFamily = hema
         return hem
         }


hem.aeraeshe = function(hema){hem.oninput = hema
          return hem
          }





hem.aeracorsa = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }
hem.textColor = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }









         










hem.aeraglow = function(hema){hem.style.textShadow = "0px 0px 4px rgba(" + hema +")"
         return hem
         }











hem.ama = function(hema){hem.placeholder = hema 
         return hem
         }

hem.hint = function(hema){hem.placeholder = hema 
         return hem
         }



















hem.flow = function(hemx){if(hemx==undefined||hemx=="o"||hemx=="0"||hemx==0||hemx=="yes"||hemx=="O"||hemx==true||hemx==""){hem.style.overflow = "auto"}
if(hemx=="l"||hemx=="L"||hemx==1||hemx=="no"||hemx==false){hem.style.overflow = "hidden"}
if(hemx!=undefined){

if(hemx.toLowerCase()=="lleslai"){hem.style.overflowX = "auto"}
if(hemx.toLowerCase()=="phellai"){hem.style.overflowY = "auto"}



}

hem.style.scrollBehavior = "smooth"
          return hem}











hem.aerasun = function(hema){hem.style.textShadow = "0 0 8px rgba("+hema+")"
         return hem
         }





hem.aeraAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }

hem.textAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }




































hem.corsaera = function(hema){
hem.style.color = "rgba("+hema+")"
         return hem
         }




hem.lo = function(x,y,w,h){
          this.lo(hem,x,y,w,h)
return hem
         }.bind(this)

hem.loles = function(x){
          this.loles(hem,x)
return hem
         }.bind(this)

hem.losel = function(x){
          this.losel(hem,x)
return hem
         }.bind(this)

hem.lophel = function(x){
          this.lophel(hem,x)
return hem
         }.bind(this)

hem.lolehp = function(x){
          this.lolehp(hem,x)
return hem
         }.bind(this)

hem.getWidth = function(){
let hema = hem.getBoundingClientRect()

return hema.width
}.bind(this)


hem.getHeight = function(){
let hema = hem.getBoundingClientRect()

return hema.height
}.bind(this)












































hem.rai = function(hema){hem.style.opacity = hema
         return hem
         }



























































hem.rhap = function(radius,color,width,style){
          hem.style.borderRadius = radius + "px"
          hem.style.borderColor = "rgba("+color+")"
          hem.style.borderWidth = width+"px"
          hem.style.borderStyle = style
           return hem
         }





hem.rhapdal = function(hema){hem.style.borderStyle = hema 
         return hem
         }
         hem.rhapcorsa = function(hema){hem.style.borderColor = "rgba("+hema+")" 
         return hem
         }
         hem.rhaperen = function(hema){hem.style.borderWidth = hema
         return hem
         }

hem.rhaprele = function(hema){hem.style.borderRadius = hema+"px"
         return hem
         }
 





hem.borderradiuses = function(tl,tr,br,bl){
hem.style.borderTopLeftRadius = tl+"px"
hem.style.borderTopRightRadius = tr+"px"
hem.style.borderBottomRightRadius = br+"px"
hem.style.borderBottomLeftRadius = bl+"px"
return hem
}


hem.borhap = function(padding){
          hem.style.padding = padding + "px"
           return hem
         }





























































































return hem
        },


seall: function(aera,siar){Kt.seall(aera,siar)},











melosiar: function(siar,hemfun){
    var client = new XMLHttpRequest()
     client.open('GET',siar)
   client.onreadystatechange = function(){
if(client.readyState == 4 && client.status == 200){hemfun(client.responseText)}}
client.send()
   },



















copyAssets: function(aera){Kt.copyAssets(aera)},


hCopyAssets: function(aera){Kt.hCopyAssets(aera)},

copyAssetsCal: function(aera){Kt.copyAssetsCal(aera)},


hCopyAssetsCal: function(aera){Kt.hCopyAssetsCal(aera)},

reloadprogramcal: function(){Kt.reloadprogramcal()},





say: function(hem){Kt.say(hem)},











lseall: function(siar){return Kt.lseall(siar)},






















maaRaynotaera: function(aeralo,x,y,w,h,ano){
let hema = Crystalline.maaelle('aera',x,y,w,h,ano).aeraeshe(function(){
Crystalline.seall(hema.sunaera(),hema.siar)

}.bind(this))

hema.siar = aeralo
hema.ray(Crystalline.lseall(hema.siar))

























},








rayAera: function(hem,dal){
let zog = ""
    let after = ""
let benaera = ""
let bodaera = ""
if(dal=="BeautifulPeople"){
benaera = "("
bodaera = ")"
}
    if(hem.indexOf("in the styles of the artists")!=-1){
    zog = hem.substring(0,hem.indexOf("in the styles of the artists"))
    after = hem.substring(hem.indexOf("in the styles of the artists"),hem.length)
    }else{
      zog = hem
    }
  let maera = hem.split(" ")
  let which = Crystalline.fate(maera.length)
let sen = Crystalline.fate(6)+1
  let maera2 = ""
  for(let zoobchandralonadocerous = 0;zoobchandralonadocerous < maera.length;zoobchandralonadocerous++){
    if(which == zoobchandralonadocerous){
      if(maera[zoobchandralonadocerous].substring(0,2)=="((" || maera[zoobchandralonadocerous].substring(maera[zoobchandralonadocerous].length-2,maera[zoobchandralonadocerous].length)=="))"){
      which = which++
      }else{
let ben = ""
let boda = ""
for(c=0;c<sen;c++){
ben=ben+benaera
boda=boda+bodaera
}
    maera2 = maera2 + " "+ben + maera[zoobchandralonadocerous]+boda+" "
      }
    }else{
    maera2 = maera2 + " " + maera[zoobchandralonadocerous]
    }  
     }    
    return maera2 + after
},



generateSeed: function(){
   let seed = Crystalline.fate(4294967295)+1
   return seed
  },


BeautifulGallery: function(x,y,w,h,ano){
let galleria = Crystalline.maaelle('div',x,y,w,h,ano)
galleria.settings = {}
  galleria.settings.gallery = true
  galleria.settings.sort = "recent"
  galleria.settings.adaptiveHeight = true
  galleria.settings.style = "background-color:rgba(0,0,0,0)"
  galleria.settings.forceColorScheme = "dark"
let c = image(galleria.settings).evaluateItem
  galleria.ray(c)
},

BeautifulStory: function(ask,x,y,w,h,ano){
let textia = Crystalline.maaelle('div',x,y,w,h,ano)
textia.settings = {}
 textia.settings.instruction = ask  
let c = aitext(textia.settings)
  textia.ray(c)
},

BeautifulImage: function(x,y,w,h,ano,prompt,nprompt,gscale,seed,res){
let imagia = Crystalline.maaelle('div',x,y,w,h,ano)
imagia.settings = {}
  imagia.settings.prompt = prompt
  imagia.settings.negativePrompt = nprompt
 imagia.settings.guidanceScale = gscale
 imagia.settings.seed = seed
 imagia.settings.resolution = res
let c = image(imagia.settings).evaluateItem
  imagia.ray(c)
//YTILIBATAPMOC
},




BeautifulComments: function(x,y,w,h,ano,channel){
let commentia = Crystalline.maaelle('div',x,y,w,h,ano)
commentia.settings = {}
  commentia.settings.spiritguides = true
  commentia.settings.loadFonts = "Emilys Candy"
 commentia.settings.channel = channel
 commentia.settings.commentPlaceholderText = "meow"
 commentia.settings.submitButtonText = "meow"
commentia.settings.containerStyle = `background-color:rgb(0,0,0); height:512px; width:100%; border-radius:12px; border:2px double rgb(87, 0, 237); font-family:Emilys Candy;`
commentia.settings.messageBubbleStyle = `background:rgba(255,255,255,0.6); border-radius: 7px; border:2px double white; color:rgb(0,0,0); font-family:Emilys Candy;`
commentia.settings.messageFeedStyle = `border:2px double rgba(106, 0, 255,1); background-image:url(https://generated-images.perchance.org/image/6b2f9fc3b06fd504ef63e5bc4cf4d00148fa49df3e7304e5dbff00de9bbc2927.jpeg); border-radius: 7px; font-family:Emilys Candy;`
commentia.settings.inputAreaStyle = `background-color:rgb(0,0,0); font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(255,255,255);`
commentia.settings.submitButtonStyle = `width:100%;background-color: rgba(61, 242, 255,1); border:none; font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(0,0,0)`
commentia.settings.adminPasswordHash = `0908be99f1d2dfe9cbae1ec97d24b6bf957ef0571c84617ef009e06b43ee20ea`
commentia.settings.adminFlair = `meow`
commentia.settings.width = `400`
commentia.settings.bannedWords = "cbat"
//commentia.settings.customEmojis = {import:allos-emoji-list}
commentia.settings.loneCustomEmojiSizeMultiplier = "3"
commentia.settings.customEmojiSize = "1.2"
let c = comments(commentia.settings).evaluateItem
  commentia.ray(c)
//YTILIBATAPMOC
},





  
  
  
  
  
  
  

  
  
  
  
  
    
  
  


  

  
  
  


melosia: function(hem){return Kt.melosia(hem).split(",")},
















downloadassets: function(hemlo,hemtani){Kt.downloadassets(hemlo,hemtani)},
hseall: function(aera,siar){Kt.hseall(aera,siar)},
hlseall: function(siar){return Kt.hlseall(siar)},
        seallsiar: function(siabe,siabo){Kt.seallsiar(siabe,siabo)},
        rasiar: function(siabe){return Kt.rasiar(siabe)},
hrasiar: function(siabe){return Kt.hrasiar(siabe)},
rasia: function(siabe){return Kt.rasia(siabe)},
        seallsia: function(siabe,siabo){Kt.seallsia(siabe,siabo)},
celestiall: function(siabe,siabo){Kt.celestiall(siabe,siabo)},
        seallver: function(siabe,siabo){Kt.seallver(siabe,siabo)},
        kortanisia: function(siabe,siabo){Kt.kortanisia(siabe,siabo)},
hkortanisia: function(siabe,siabo){Kt.hkortanisia(siabe,siabo)},
        
maasia: function(hem){Kt.maasia(hem)},
hmelosia: function(hem){return Kt.hmelosia(hem).split(",")},
sunseall: function(aera,siar){Kt.sunseall(aera,siar)},
sunlseall: function(siar){return Kt.sunlseall(siar)},
        sunmelosia: function(hem){return Kt.sunmelosia(hem).split(",")},






















ekklinere: function(hemaera,hemekk){
let sen = hemekk.indexOf(hemaera)
if(sen != -1){
  hemekk.splice(sen, 1)
}
return hemekk
},
ekklieren: function(hemaera,hemekk){
hemekk.push(hemaera)
return hemekk
},
ekklira: function(hemaera,hemekk){
if(hemekk.includes(hemaera)){return "o"}else{return "l"}
},











componentToHex: function(c) {
  var hex = c.toString(16)
  return hex.length == 1 ? "0" + hex : hex
},

 rgbToHex: function(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b)
},



hemThree: function(tthen,tanimate,x,y,w,h,hemano){
let hema = Crystalline.maaelle('div',x,y,w,h,hemano)

Crystalline.Corsan = hema
hema.threescript = tanimate
hema.threeobjects = []
hema.threeactive = false
hema.Textures = []
hema.animate = function(){ 	
                      	if(hema.threeactive == true){
for(i=0;i<hema.threeobjects.length;i++){
hema.threeobjects[i]()
}
hema.threescript()
//hema.ORBITCONTROLS.update()
hema.RENDERER.render( hema.SCENE, hema.CAMERA )
}
let ani = hema.animate.bind(this)
requestAnimationFrame( ani )
}.bind(this)

hema.THREE = THREE

hema.TextureLoader = new hema.THREE.TextureLoader()
//hema.GLTFLoader = new this.THREE.GLTFLoader()

let vww = Math.round(w*hemano.clientWidth)
let vhh = Math.round(h*hemano.clientHeight)

     hema.SCENE = new hema.THREE.Scene()

hema.LIGHT = new hema.THREE.AmbientLight(0xffffff,0.3)
hema.SCENE.add(hema.LIGHT)

hema.SUN = new hema.THREE.PointLight( 0xffffff, 1, 70 )
hema.SUN.position.set( 13, 20, 13 )
hema.SUN.castShadow = true
hema.SUN.shadow.mapSize.width = 26
hema.SUN.shadow.mapSize.height = 26
hema.SUN.shadow.camera.near = 1
hema.SUN.shadow.camera.far = 50
hema.SCENE.add( hema.SUN )

    hema.CAMERA = new hema.THREE.PerspectiveCamera( 90, vww/ vhh, 0.1, 1000 )
hema.cameraX = 0
hema.cameraY = 0
hema.cameraZ = 0
hema.CAMERA.position.set(0, 0, 0)



     hema.RENDERER = new hema.THREE.WebGLRenderer()
hema.RENDERER.shadowMap.enabled = true
      hema.RENDERER.setSize(vww, vhh)
hema.RENDERER.setPixelRatio(window.devicePixelRatio)

hema.ORBITCONTROLS = new hema.THREE.OrbitControls(hema.CAMERA,hema.RENDERER.domElement)
hema.ORBITCONTROLS.enabled = false
//hema.ORBITCONTROLS.enableDamping = true
//hema.ORBITCONTROLS.dampingFactor = 0.05
hema.ORBITCONTROLS.screenSpacePanning = false
hema.ORBITCONTROLS.minDistance = 30
hema.ORBITCONTROLS.maxDistance = 100

hema.T = hema.RENDERER.domElement
Crystalline.raphos(hema.T)
hema.T.lo(0,0,1,1)
hema.front(999999999999)
 hema.ano( hema.T )


















hema.createUnit = function(x,y,z,who){

let hemb = {}
hemb.represents = who
hema.tani = who
hemb.x = x
hemb.y = y
hemb.z = z
hemb.variant = ""
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hema.b,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)



hemb.removeFromMap = function(){
this.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)


hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)
}
return hemb
}.bind(this)









hema.SunRaphos = function(hemb){
























































































































































































































hemb.lookAtMe = function(){
hema.CameraLookAtObject(hemb)
return hemb
}.bind(this)














































































































hemb.position = function(rx,ry,rz){
hemb.x = rx
hemb.y = ry
hemb.z = rz
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)



hemb.wireframe = function(hem){
if(hem=="o"){
hemb.materi1.wireframe = true
}else{
hemb.materi1.wireframe = false
}
}.bind(this)



hemb.texturewrap  = function(img){
      
                   
           let mewta = new hema.THREE.TextureLoader().load(img)
                    mewta.wrapS = mewta.wrapT = hema.THREE.RepeatWrapping
                    
                    hemb.materi1.map = mewta         
                    hemb.materi1.needsUpdate = true
                  }.bind(this)




return hemb
}.bind(this)
















































































































































































































hema.maaTree = function(x,y,z){

let hemb = hema.maaS(x,y,z,2,90,2)
hema.maaS(x+6,y+14,z,10,2,2)
hema.maaS(x,y+20,z+6,2,2,10)
hema.maaS(x-6,y+26,z,10,2,2)
hema.maaS(x,y+32,z-6,2,2,10)
hema.maaS(x+6,y+38,z,10,2,2)
return hemb
}.bind(this)



hema.maaS = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(xp, yp, zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
return hemb
}.bind(this)









Crystalline.Corsan.maaLight = function(x,y,z,strength){
let light = new THREE.PointLight(0xffffff,strength)
light.position.set(x,y,z)
hema.SCENE.add(light)
}.bind(this)


Crystalline.Corsan.maaInvisithing = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(255,255,255)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(hemb.xp, hemb.yp, hemb.zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hemb.aaM()
return hemb
}.bind(this)






















































hema.cameraSpin = function(tani){
hema.ORBITCONTROLS.enabled = true
return hema
}.bind(this)




hema.cameraNonspin = function(tani){
hema.ORBITCONTROLS.enabled = false
return hema
}.bind(this)









hema.maaMaven = function(x,z,type,who){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.variant = type
hemb.present = "o"
if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{
let hm = Crystalline.melosia(type+"/Maven/Corsa")
let wm = Crystalline.fate(hm.length)
let whoo = hm[wm].replace(".png","") +"Maven"
let tew = hema.Textures[whoo]
hemb.variant = hm[wm]

if(type != "Nif"){
hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)

hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
}else{

let whooo = who +"Hazel"
let tew2 = hema.Textures[whooo]

hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })
hemb.materi2 = new hema.THREE.SpriteMaterial({ 
	map: tew2,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)
hemb.mesh2 = new hema.THREE.Sprite(hemb.materi2)
hemb.mesh2.scale.set(0.3,0.3,0.3)
hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
hema.SCENE.remove(hemb.mesh2)
hemb.materi2.dispose()
hemb.mesh2 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hemb.mesh2.position.set(hemb.x,hemb.y+1,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hema.SCENE.add(hemb.mesh2)
}

}


return hemb
}.bind(this)


































































hema.maaEditSphere = function(x,z){

let hemb = {}
hemb.x = x
hemb.y = 3
hemb.z = z

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.SphereGeometry(0.35)

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){

hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.rotatia = function(){
hemb.mesh1.rotation.x = hemb.mesh1.rotation.x+0.01
}.bind(this)
hema.threeobjects.push(hemb.rotatia)



return hemb
}.bind(this)

























































































hema.CameraLookAtPosition = function(x,y,z){
let weW = new hema.THREE.Vector3(x,y,z)
hema.CAMERA.lookAt(weW)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraPosition = function(x,y,z){
hema.cameraX = x
hema.cameraY = y
hema.cameraZ = z
hema.CAMERA.position.set(x,y,z)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraTopDown = function(){
//hema.CAMERA
}.bind(this)

hema.CameraVFov = function(hem){
hema.CAMERA.fov = hem
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraLookAtObject = function(hemc){
hema.CAMERA.lookAt(hemc.mesh1.position)
}.bind(this)

hema.cameraright = function(hem){
hema.cameraX = hema.cameraX+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraleft = function(hem){
hema.cameraX = hema.cameraX-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameradown = function(hem){
hema.cameraZ = hema.cameraZ+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraup = function(hem){
hema.cameraZ = hema.cameraZ-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)



hema.CameraAutoTurnaround = function(hemb){
if(arguments.length == 1){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtObject(hemb)
}.bind(this)
hema.threeobjects.push(rotatia)
}
if(arguments.length == 3){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtPosition(arguments[0],arguments[1],arguments[2])
}.bind(this)
hema.threeobjects.push(rotatia)
}


}.bind(this)











hema.maaConversion = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.variant = who
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)






















hema.maaHazel = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z

if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let whoo = who +"Hazel"

let tew = hema.Textures[whoo]



hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)





























hema.maaSen = function(x,z,type){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 1
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.materi1 = ""
if(type.substring(0,4)=="Wall"){
hemb.y=2
hemb.ctype = hemb.ctype.replace("Wall","")
}
if(type.substring(0,9)=="Superwall"){
hemb.y=3
hemb.ctype = hemb.ctype.replace("Superwall","")
}
if(type.substring(0,3)=="Pit"){
hemb.y=0
hemb.ctype = hemb.ctype.replace("Pit","")
}

if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

if(type.substring(0,7)!="Culture"){
let whoo = hemb.ctype +"Sen"
let tew = hema.Textures[whoo]

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	map: tew,
transparent: true
 })
}else{
let hcolor = type.substring(7,type.length)
hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: hcolor,
transparent: true,
wireframe: true
 })

}


hemb.shape1  = new hema.THREE.BoxGeometry( hemb.xw, hemb.yw, hemb.zw )
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){





hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.shape1.dispose()
hemb.mesh1 = undefined

}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)



}

return hemb
}.bind(this)



















































      tthen()
    
hema.threeactive = true
hema.animate()

return hema
},











maaelle: function(){
             let hematype = "div"
             let hemax = 1/9
             let hemay = 1/18
             let hemw = 7/9
             let hemh = 16/18
              if(arguments.length>0){hematype = arguments[0]
              if(arguments[0]=="aera"){hematype = "textarea"}}
              if(arguments.length>1){hemax = arguments[1]}
              if(arguments.length>2){hemay = arguments[2]}
              if(arguments.length>3){hemw = arguments[3]}
              if(arguments.length>4){hemh = arguments[4]}
              let hema = document.createElement(hematype)
              hema.hematype = hematype
              if(hema.hematype == "div"){
               hema.style.userSelect = "none"
              }
             this.raphos(hema)
hema.style.fontFamily = "EmilysCandy"
if(hematype == "option"){
arguments[1].ano(hema)
}else{
             this.lo(hema,hemax,hemay,hemw,hemh)
}
         
             if(arguments.length>5){arguments[5].ano(hema)}
             
hema.dalcorsa("0,0,0,0.0").aeracorsa("255,255,255,1").aeraglow("255,255,255,1")


             return hema
            },




















kiDelete: function(){Kt.kieh(1,0)},
            ki: function(hem){Kt.ki(hem)},
            kiPaste: function(){Kt.kiPaste()},
            kiCopy: function(){Kt.kiCopy()},
            kiCut: function(){Kt.kiCut()},
            kiSelectAll: function(){Kt.kiSelectAll()},
            kiSelect: function(hemben,hemboda){Kt.kiSelect(hemben,hemboda)},
            kiboda: function(hemdistance){return Kt.kiboda(hemdistance)},
            kiben: function(hemdistance){return Kt.kiben(hemdistance)},
            kieh: function(hemben,hemboda){Kt.kieh(hemben,hemboda)},
            kiUp: function(){Kt.kiUp()},
            kiDown: function(){Kt.kiDown()},
            kiLeft: function(){Kt.kiLeft()},
            kiRight: function(){Kt.kiRight()},
            kiUndo: function(){Kt.kiUndo()},
            kiRedo: function(){Kt.kiRedo()},
    
kiSelection: function(){return Kt.kiSelection()},
      


gotowebpage: function(hem){Kt.gotowebpage(hem)},


     readasset: function(hem){
return Kt.readasset(hem)
}, 
exportasset: function(hem,boda){
Kt.exportasset(hem,boda)
}, 
        
        
 














veskaLo: function(tani,hem){
document.location.href = "https://"+tani+".glitch.me/"+hem
},


sensia: function(aera,sia){
let w = Crystalline.melosia(sia)
let an = w.length
if(w[0]==""){an=0}
let re = an.toString()
Crystalline.seall(aera,sia+"/"+re)
},

lo: function(hem,x,y,w,h){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)
                        hem.style.right = this.conversion.percentstring(1-(x+w))
                        hem.style.top = this.conversion.percentstring(y)
                        hem.style.bottom = this.conversion.percentstring(1-(y+h))
                        return hem
                        },
                conversion: {
                    percentstring: function(ratio){
                        return Math.round(ratio*100).toString()+"%"
                    },
                },



loles: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)   
                        return hem
                        },

losel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.right = this.conversion.percentstring(x)   
                        return hem
                        },

lophel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.top = this.conversion.percentstring(x)   
                        return hem
                        },
         
lolehp: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.bottom = this.conversion.percentstring(x)   
                        return hem
                        },










   





lohem: function(hem){
let hema = document.getElementById(hem)

this.raphos(hema)
return hema
},



























fate: function(hsen){
let hema = Math.floor(Math.random()*hsen)
return hema
},



SenNow: function(){
let hema = Date.now()
hema = hema.toString()
return hema
},

Senminutessince: function(since){
let hema = this.SenNow()
let hemaaa = parseInt(hema)-parseInt(since)
return hemaaa
},

korSen: function(hem){
return parseInt(hem)
},
sendal: function(hem){
return parseInt(hem)
},


maaHemSen: function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.year
hema.month
hema.day
hema.hour
hema.minute
hema.second
hema.millisecond
return hema
},

























}

let Kt = {
say: function(hem){alert(hem)},



hseall: function(aera,siar){
localStorage.setItem(siar,aera)
},
hlseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
seall: function(aera,siar){
localStorage.setItem(siar,aera)
},
lseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
        seallsiar: function(siabe,siabo){},
        rasiar: function(siabe){},
rasia: function(siabe){},
        seallsia: function(siabe,siabo){},
        seallver: function(siabe,siabo){},
        kortanisia: function(siabe,siabo){},
        melosia: function(hem){},
hmelosia: function(hem){},
sunseall: function(aera,siar){},
sunlseall: function(siar){},
        sunmelosia: function(hem){},




}






window.mode = ""
if(innerWidth > innerHeight){window.mode = "computer"}else{window.mode = "phone"}

window.SunMohka = Crystalline.maaelle('div',0,0,1,1).sunano().front("1").dalcorsa("0,0,0,1")
SunMohka.Aera = Crystalline.maaelle('div',0,0,1,1,SunMohka).dalcorsa("0,0,0,1")
SunMohka.TopBar = Crystalline.maaelle('div',0,0,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.TopBar.Entries = []
SunMohka.TopBar.Add = function(hem){
SunMohka.Aera.lophel(1/24)
SunMohka.TopBar.vis()
hem.lo((1/5)*SunMohka.TopBar.Entries.length,0,1/5,1)
SunMohka.TopBar.ano(hem)
SunMohka.TopBar.Entries.push(hem)
}.bind(this)
SunMohka.BottomBar = Crystalline.maaelle('div',0,23/24,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.BottomBar.Entries = []
SunMohka.BottomBar.Add = function(hem){
SunMohka.Aera.lolehp(1/24)
SunMohka.BottomBar.vis()
hem.lo((1/5)*SunMohka.BottomBar.Entries.length,0,1/5,1)
SunMohka.BottomBar.ano(hem)
SunMohka.BottomBar.Entries.push(hem)
}.bind(this)



window.Users = {}





Users.coinCorsa = ""






Users.viewUp = async function(){
await Creatures.magicspell("viewUp",{},function(data){})  
  }

Users.refreshMoney = async function(){
await Creatures.magicspell("getMoney",{},function(data){
SunMohka.SignInBar.coinamount.ray(data.money)
})
}.bind(this)



Users.amISignedInvInvis = []
Users.amISignedInInvis = function(hem){
Users.amISignedInvInvis.push(hem)
}.bind(this)

Users.amISignedIn = async function(){
await Creatures.magicspell("amISignedIn",{},function(data){
if(data.signedIn == "o"){
SunMohka.SignInBar.signinliORusername.mode = "Account"
SunMohka.SignInBar.signinliORusername.ray(data.name)
for(i=0;i<Users.amISignedInvInvis.length;i++){
Users.amISignedInvInvis[i].invis()
}
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
}
})
}



Users.signOut = async function(){
await Creatures.magicspell("signOut",{},function(data){
if(siartani == "gamble"){Zogladorium()}
SunMohka.SignInBar.coinamount.ray("0")
alert(data.say)})
}

Users.signIn = async function(hname,hpass,hreferer){
await Creatures.magicspell("signIn",{name:hname,pass:hpass,referer:hreferer},function(data){alert(data.say)
if(data.say == "Account Created.  You are Signed In." || data.say == "You are Signed In."){
SunMohka.SignInBar.signinliORusername.ray(data.name)
SunMohka.SignInBar.signinliORusername.mode = "Account"
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
SunMohka.SignInBar.abovepopupsignin.invis()
}
})
}

Users.createSignInBar = function(cointype){
SunMohka.SignInBar = Crystalline.maaelle('div',0,0,1,1)
SunMohka.TopBar.Add(SunMohka.SignInBar)
SunMohka.SignInBar.cointype = cointype

SunMohka.SignInBar.coin = Crystalline.maaelle('div',0,0,1/4,1,SunMohka.SignInBar).dalcorsascroll().dalcorsaeren().dalcorsalsen().eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}
}.bind(this))

SunMohka.SignInBar.coinamount = Crystalline.maaelle('div',1/4,0,1/4,1,SunMohka.SignInBar).vcenter().ray("0").eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}

}.bind(this))

if(SunMohka.SignInBar.cointype.toUpperCase() == "S"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/5107474554438d57be7152605ea67a78.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}
if(SunMohka.SignInBar.cointype.toUpperCase() == "PERSON"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/837189de985fa03e9fb36adfbabf8c29.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}

SunMohka.SignInBar.signinliORusername = Crystalline.maaelle('div',2/4,0,2/4,1,SunMohka.SignInBar).dalcorsa("0,0,0,1").corsaera("255,255,255").rhap("7","255,255,255,1","1","solid").ray("SignIn").vcenter().eshe(function(){
if(SunMohka.SignInBar.signinliORusername.mode == "SignIn"){
SunMohka.SignInBar.abovepopupsignin.visible()
}
if(SunMohka.SignInBar.signinliORusername.mode == "Account"){
if(Users.AccountMohka.on=="l"){
Users.AccountMohka.on = "o"
Users.AccountMohka.visible()
SunMohka.SignInBar.signinliORusername.corsaera("0,255,0,1").rhap("7","0,255,0,1","1","solid")
}else{
Users.AccountMohka.on = "l"
Users.AccountMohka.invisible()
SunMohka.SignInBar.signinliORusername.corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid")
}

}
}.bind(this))
SunMohka.SignInBar.signinliORusername.mode = "SignIn"

Users.amISignedIn()

SunMohka.SignInBar.abovepopupsignin = Crystalline.maaelle('div',0,0,1,1).sunano().invis().front("100").dalcorsa("0,0,0,0.5")

SunMohka.SignInBar.popupsignin = Crystalline.maaelle('div',0,0,1,1,SunMohka.SignInBar.abovepopupsignin).front("101").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

SunMohka.SignInBar.popupsignin.login = Crystalline.maaelle('aera',1/9,1/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Name").borhap("12")

SunMohka.SignInBar.popupsignin.pass = Crystalline.maaelle('aera',1/9,3/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Password").borhap("12")

SunMohka.SignInBar.popupsignin.referer = Crystalline.maaelle('aera',1/9,5/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("referer").borhap("12")

SunMohka.SignInBar.popupsignin.signinli = Crystalline.maaelle('div',1/9,7/18,7/9,1/18,SunMohka.SignInBar.popupsignin).eshe(function(){
Users.in = SunMohka.SignInBar.popupsignin.login.value
Users.signIn(SunMohka.SignInBar.popupsignin.login.value,SunMohka.SignInBar.popupsignin.pass.value,SunMohka.SignInBar.popupsignin.referer.value)
}.bind(this)).ray("Enter").rhap("7","255,255,255,1","1","solid").borhap("12")
return SunMohka.SignInBar
}









Users.AccountMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).invis().front("201").dalcorsa("0,0,0,1")

Users.AccountMohka.on = "l"

Users.AccountMohka.unlogLi = Crystalline.maaelle('div',0,0,1/9,1/12,Users.AccountMohka).ray("LogOut").eshe(function(){
SunMohka.SignInBar.signinliORusername.ray("SignIn")
SunMohka.SignInBar.signinliORusername.mode = "SignIn"
Users.AccountMohka.invis()
Users.signOut()
}.bind(this)).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

Users.Inventory = Crystalline.maaelle('div',0,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")
Users.Inventory.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Inventory).ray("Inventory").vcenter()
Users.Inventory.Items = Crystalline.maaelle('div',0,1/8,1,7/8,Users.Inventory).rhap("7","255,255,255,1","1","solid").flow("o")
Users.Inventory.Items.vItem = []

Users.Inventory.Items.erenlupe = function(tani,corsa,sen){

let hema = Crystalline.maaelle('div',0,0,1,1)

return hema

}.bind(this)




Users.Friends = Crystalline.maaelle('div',1/2,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.Friends.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Friends).ray("Friends").vcenter()




Users.History = Crystalline.maaelle('div',0,5/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.History.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.History).ray("History").vcenter()

Users.History.Melo = Crystalline.maaelle('div',0,1/8,1/9,7/8,Users.History).rhap("0","255,255,255,1","1","solid")

Users.History.Melo.liItems = Crystalline.maaelle('div',0,0,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Items")

Users.History.Melo.liComments = Crystalline.maaelle('div',0,1/6,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Comments")

//bottom bar of page to be a generic banner until person ranks on a leaderboard, at which point upgrades to 'where u are on leaderboard'








window.Creatures = {}



Creatures.magicspell = async function(what,thing,next){ 
    await fetch('https://rosinvault.glitch.me/'+what, { method: 'POST', headers: { 'Content-Type': 'application/json'}, body: JSON.stringify(thing)}).then(response => response.json()).then(data => next(data)).catch(error => alert(error))  
  }


Creatures.getUpdates = async function(){ 
await Creatures.magicspell("getUpdates",{},function(data){
Creatures.UpdatesMohka.aera.ray("")
Creatures.UpdatesMohka.aera.entries = []
let entries = data.entries.split(`:;:

`)
for(i=0;i<entries.length;i++){
let ha = entries[i].split(`:::

`)
if(ha[1].indexOf("RosinVault, ") != -1){
ha[1] = ha[1].replace("Allotopia, ","")
ha[1] = ha[1].replace("RosinVault, ","")
ha[1] = ha[1].replace("GrowingHome, ","")
ha[1] = ha[1].replace("BeautifulPeople2, ","")
Creatures.UpdatesMohka.aera.entries[i] = Crystalline.maaelle('div',0,(1/6)*i,1,1/6,Creatures.UpdatesMohka.aera)
Crystalline.maaelle('div',0,0,1/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[0]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
 Crystalline.maaelle('div',1/4,0,3/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[1]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
}
}
    })
  }
  








Creatures.UpdatesMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).dalcorsa("0,0,0,1").sunano().invis().front("50")

Creatures.UpdatesMohka.supdate = ""

Creatures.UpdatesMohka.getViewUpdates = async function(){
Creatures.magicspell("getViewUpdates",{},function(data){
Creatures.UpdatesMohka.viewcount.ray("Views: "+data.views)
})
  }
  




Creatures.UpdatesMohka.aera = Crystalline.maaelle('div',0,1/12,1,11/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").flow("o")

Creatures.UpdatesMohka.returnli = Crystalline.maaelle('div',0,0,1/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter().ray("Return").eshe(function(){
clearInterval(Creatures.UpdatesMohka.supdate)
Creatures.UpdatesMohka.invis()
}.bind(this))

Creatures.UpdatesMohka.viewcount = Crystalline.maaelle('div',5/8,0,3/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter()



Creatures.addUpdatesBottomBar = function(){
let hema = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
Creatures.UpdatesMohka.getViewUpdates()
Creatures.UpdatesMohka.supdate = setInterval(function(){
Creatures.UpdatesMohka.getViewUpdates()
}.bind(this),5000)
Creatures.getUpdates()
Creatures.UpdatesMohka.visible()
}.bind(this)).ray("Updates")
SunMohka.BottomBar.Add(hema)
}.bind(this)







//////////////////////////////////////////////////

































































































let Comments = {}
Comments.submit = function(hem,hsen){
let ish = Crystalline.lseall("in")
if(ish == "o"){
let thing = {}
thing.aera = hem
thing.when = Date.now()
thing.which = hsen
thing.name = SunMohka.SignInBar.signinliORusername.sunaera()
Creatures.magicspell("askToComment",function(data){
Crystalline.say("Comment Submitted")
})
}
}.bind(this)















Profile ={}
Profile.referer = ""
Profile.refercount = ""
Profile.refercode = ""
Profile.Comments = {}
Profile.Comments.History = {}
Profile.Comments.History.topRanked = function(){
let hema = {}

return hema
}.bind(this)

// (leaf rating system)








































































let Store = {}
Store.createStore = function(){
SunMohka.StoreLi = Crystalline.maaelle('div',0,0,1,1).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").vcenter().corsaera("255,255,255,1").ray("Store").eshe(function(){
SunMohka.StoreMohka.vis()
}.bind(this))
SunMohka.StoreMohka = Crystalline.maaelle('div',0,0,1,1).sunano().dalcorsa("0,0,0,1").corsaera("255,255,255,1").front("203").invis()
SunMohka.StoreMohka.returnLi = Crystalline.maaelle('div',0,0,1/9,1/12,SunMohka.StoreMohka).ray("return").vcenter().dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").eshe(function(){
SunMohka.StoreMohka.invis()
}.bind(this))


SunMohka.TopBar.Add(SunMohka.StoreLi)
return SunMohka.StoreLi
}.bind(this)






























Creatures.createTimeBar = function(x,y,w,h,ano){
let hema = {}
hema.TimeBar = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.TimeBar.heartdrum = setInterval(function(){
if(hema.time != ""){
let timesofar = Date.now() - hema.time
let days = (((timesofar/1000)/60)/60)/24
let hours = ((timesofar/1000)/60)/60
let minutes = (timesofar/1000)/60
let seconds = timesofar/1000

if(hours < 1){
hema.TimeBar.barhourm.lo(0,0,hours,1)
hema.TimeBar.bartwohoursm.lo(0,0,0,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 1 && hours < 2){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,hours-1,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 2 && hours < 3){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,hours-2,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 3 && hours < 6){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,(hours-3)/3,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 6 && hours < 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,(hours-6)/6,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,1,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,(hours-12)/6,1)
}

}

}.bind(this),1000)

hema.TimeBar.maa = function(){
Creatures.magicspell("getTimeAndCollects",{},function(data){
if(data.signedIn != "l"){
hema.time = data.timesofar
}
}.bind(this))
}.bind(this)

window.Zogladorium = hema.TimeBar.maa
hema.TimeBar.betKoCollect = Crystalline.maaelle('div',1/4,1/16,2/4,1/8,hema.TimeBar).invis().corsaera("0,255,0,1").rai(0).vcenter().aerasun("0,255,0,1")
hema.TimeBar.timeshow = Crystalline.maaelle('div',0,1/4,1,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").dalcorsa("42,18,59,1")
hema.TimeBar.barhour = Crystalline.maaelle('div',0,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("1 Hour")
hema.TimeBar.bartwohours = Crystalline.maaelle('div',1/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("2 Hours")
hema.TimeBar.barthreehours = Crystalline.maaelle('div',2/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("3 Hours")
hema.TimeBar.barsixhours = Crystalline.maaelle('div',3/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("6 Hours")
hema.TimeBar.bartwelvehours = Crystalline.maaelle('div',4/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("12 Hours")
hema.TimeBar.bartwentyfourhours = Crystalline.maaelle('div',5/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("24 Hours")

hema.TimeBar.barhourm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barhour).dalcorsa("0,255,0,1")
hema.TimeBar.bartwohoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwohours).dalcorsa("0,255,0,1")
hema.TimeBar.barthreehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barthreehours).dalcorsa("0,255,0,1")
hema.TimeBar.barsixhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barsixhours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwelvehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwelvehours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwentyfourhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwentyfourhours).dalcorsa("0,255,0,1")

hema.TimeBar.reward = {}
hema.TimeBar.reward.claimli = Crystalline.maaelle('div',3/9,2/4,3/9,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").vcenter().ray("Collect your points!").eshe(function(){
Creatures.magicspell("timebarCollect",{},function(data){
Users.refreshMoney()
hema.TimeBar.maa()
hema.TimeBar.betCollect(data.amountCollected)
})

}.bind(this))

hema.TimeBar.reward.first = Crystalline.maaelle('div',0,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.second = Crystalline.maaelle('div',1/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.third = Crystalline.maaelle('div',2/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fourth = Crystalline.maaelle('div',3/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fifth = Crystalline.maaelle('div',4/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.sixth = Crystalline.maaelle('div',5/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")




hema.TimeBar.reward.corsahourc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.first).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwohoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.second).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsathreehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.third).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsasixhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fourth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwelvehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fifth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwentyfourhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.sixth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()

hema.TimeBar.reward.corsahour = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.first).vcenter().ray("+ 5")
hema.TimeBar.reward.corsatwohours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.second).vcenter().ray("+ 4")
hema.TimeBar.reward.corsathreehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.third).vcenter().ray("+ 2")
hema.TimeBar.reward.corsasixhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fourth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwelvehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fifth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwentyfourhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.sixth).vcenter().ray("+ 0")

hema.TimeBar.betCollect = function(hemsen){
let raera = ""
if(hemsen == undefined){
raera = "An hour has not passed yet."
}else{
raera = hemsen + " points collected!"
}
hema.TimeBar.betKoCollect.ray(raera)
hema.TimeBar.betKoCollect.rai(0)
let op = 0
let dalo = "p"
hema.TimeBar.betKoCollect.vis()
let hx = setInterval(function(){
let opp = op
if(op>1){opp=1}
hema.TimeBar.betKoCollect.rai(opp)
if(dalo=="p"){op=op+0.02}
if(op>=2){op=1
dalo="l"}
if(dalo=="l"){op=op-0.01}
if(op<0){hema.TimeBar.betKoCollect.invis()
clearInterval(hx)}

}.bind(this),10)
}.bind(this)


hema.TimeBar.maa()
return hema.TimeBar
}.bind(this)




//10 questions per day






















Creatures.Gamble = {}

Creatures.Gamble.maa = function(x,y,w,h,ano){
Creatures.Gamble.Mohka = Crystalline.maaelle('div',x,y,w,h,ano)

Creatures.Gamble.getQuestions = async function(){
await Creatures.magicspell("getMyDailyQuestions",{},function(hem){
if(hem.q1aera != ""){
let q = hem.q1aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question1.ray(q[0]+" vs "+q[1])
Creatures.Gamble.Mohka.q1t1.sen = hem.q1
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.vis()
Creatures.Gamble.Mohka.question1.vis()
Creatures.Gamble.Mohka.q1t1.vis()
Creatures.Gamble.Mohka.q1t1.ray(q[0])
Creatures.Gamble.Mohka.q1t2.vis()
Creatures.Gamble.Mohka.q1t2.ray(q[1])
}else{
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.invis()
Creatures.Gamble.Mohka.question1.invis()
Creatures.Gamble.Mohka.q1t1.invis()
Creatures.Gamble.Mohka.q1t1.ray("")
Creatures.Gamble.Mohka.q1t2.invis()
Creatures.Gamble.Mohka.q1t2.ray("")
}

if(hem.q2aera != ""){
let qb = hem.q2aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question2.ray(qb[0]+" vs "+qb[1])
Creatures.Gamble.Mohka.q2t1.sen = hem.q2
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.vis()
Creatures.Gamble.Mohka.question2.vis()
Creatures.Gamble.Mohka.q2t1.vis()
Creatures.Gamble.Mohka.q2t1.ray(qb[0])
Creatures.Gamble.Mohka.q2t2.vis()
Creatures.Gamble.Mohka.q2t2.ray(qb[1])
}else{
Creatures.Gamble.Mohka.q2t1.sen = ""
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.invis()
Creatures.Gamble.Mohka.question2.invis()
Creatures.Gamble.Mohka.q2t1.invis()
Creatures.Gamble.Mohka.q2t1.ray("")
Creatures.Gamble.Mohka.q2t2.invis()
Creatures.Gamble.Mohka.q2t2.ray("")
}

}.bind(this))
}.bind(this)
Creatures.Gamble.answerQuestion = async function(questionsen,answer,amount){
await Creatures.magicspell("gambleAnswerQuestion",{questionsen:questionsen,answer:answer,amount:amount},function(hem){if(hem.answered == "o"){
Users.refreshMoney()
Creatures.Gamble.getQuestions()
}}.bind(this))
}.bind(this)

Creatures.Gamble.Mohka.streak = Crystalline.maaelle('div',0,1/2,1/2,1/2,Creatures.Gamble.Mohka).ray("Enable Streak").vcenter().rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1").eshe(function(){
if(Creatures.Gamble.Mohka.streak.on == "l"){
Creatures.Gamble.Mohka.streak.on = "o"
Creatures.Gamble.Mohka.streak.ray("Streak Enabled!")
Creatures.Gamble.Mohka.streak.rhap("7","0,0,0,1","1","solid").dalcorsa("0,255,0,1").corsaera("0,0,0,1")
Creatures.Gamble.Mohka.Amount1.ray("5")
Creatures.Gamble.Mohka.Amount2.ray("5")
}else{
Creatures.Gamble.Mohka.streak.on = "l"
Creatures.Gamble.Mohka.streak.ray("Enable Streak")
Creatures.Gamble.Mohka.streak.rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")
}

}.bind(this))
Creatures.Gamble.Mohka.streak.on = "l"

Creatures.Gamble.Mohka.questiongetnext = Crystalline.maaelle('div',0,0,1/2,1/2,Creatures.Gamble.Mohka).ray("Get new questions").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){


}.bind(this))

Creatures.Gamble.Mohka.Questions = Crystalline.maaelle('div',1/2,0,1/2,1,Creatures.Gamble.Mohka)


Creatures.Gamble.Mohka.question1 = Crystalline.maaelle('div',0,0,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q1t1 = Crystalline.maaelle('div',2/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t1.sunaera(),amt)

}.bind(this)).invis()
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.q1t2 = Crystalline.maaelle('div',5/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount1 = Crystalline.maaelle("aera",2/7,1/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


Creatures.Gamble.Mohka.question2 = Crystalline.maaelle('div',0,4/7,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q2t1 = Crystalline.maaelle('div',2/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t1.sunaera(),amt)
Creatures.Gamble.Mohka.q2t1.sen = ""

}.bind(this)).invis()
Creatures.Gamble.Mohka.q2t2 = Crystalline.maaelle('div',5/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount2 = Crystalline.maaelle("aera",2/7,5/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


return Creatures.Gamble.Mohka
}.bind(this)

Creatures.Gamble.Aerakormaa = function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)

return hema
}.bind(this)





























Creatures.Leaderboard = {}
Creatures.Leaderboard.maa = function(hem,x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.type = hem
hema.Tani = Crystalline.maaelle('div',0,0,1,1/7,hema).ray(hem).vcenter().rhap("7","255,255,255,1","1","solid")
return hema
}.bind(this)










































Creatures.Bulletin = {}
Creatures.Bulletin.maa = function(x,y,w,h,ano){
Creatures.Bulletin.Mohka = Crystalline.maaelle('div',x,y,w,h,ano).rhap("7","255,255,255,1","1","solid")
Creatures.Bulletin.Mohka.JustReleasedItemsTani = Crystalline.maaelle('div',0,0,1,1/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid").ray("Just Released! (within 72hours)").vcenter()

Creatures.Bulletin.Mohka.JustReleasedItems = Crystalline.maaelle('div',0,1/9,1,4/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid")
Creatures.maaLleslai("Dab","Released","Left",100,0,0,1,1,Creatures.Bulletin.Mohka.JustReleasedItems,"","Nothing in the last 72 hours.")

Creatures.Bulletin.Mohka.WelcomeNewMembers = Crystalline.maaelle('div',0,5/9,1,2/9,Creatures.Bulletin.Mohka).ray("Welcome New Members").vcenter().rhap("0","255,255,255,1","1","solid")

Creatures.Bulletin.Mohka.RememberYourPoints = Crystalline.maaelle('div',0,7/9,1,2/9,Creatures.Bulletin.Mohka).ray("Remember Your Points").vcenter().rhap("0","255,255,255,1","1","solid").eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))

return Creatures.Bulletin.Mohka
}.bind(this)































Creatures.maaLleslai = function(hemdal,hemsort,slideway,slidespeed,x,y,w,h,ano,mcorsa,mtani){
let hema = Crystalline.maaelle('div',x,y,w,h,ano).rhap("0","255,255,255,1","1","solid")
hema.type = hemdal
hema.sort = hemsort
hema.slideway = slideway
hema.slidespeed = slidespeed

hema.slideHolder = Crystalline.maaelle('div',0,0,16/18,1,hema).dalcorsa("255,255,255,1").front("3").flow("o").dalcorsa(mcorsa)
hema.slides = []

hema.slideHolderEmpty = Crystalline.maaelle('div',0,0,1,1,hema.slideHolder).vcenter().ray(mtani).invis().aeraAlign("center").aeraeren(28).dalcorsa("0,0,0,0.8")



hema.onSlide = 0
hema.autoplaying = "o"


hema.sliderele = []
hema.seconds = 0

hema.rele = setInterval(function(){
if(hema.slides.length > 0){
hema.slideHolderEmpty.invis()
}else{hema.slideHolderEmpty.vis()}
for(i=0;i<hema.sliderele.length;i++){
hema.sliderele[i]()
}},1000)
hema.slidewidth = 1000
hema.heartdrumsen = 0
hema.heartdrum = setInterval(function(){
if(hema.autoplaying == "o" && hema.slides.length > 0){
hema.heartdrumsen++
if(hema.heartdrumsen>hema.slides.length*hema.slidewidth){
hema.heartdrumsen=0
hema.slideHolder.scroll({
left: hema.heartdrumsen,
top:0,
behavior: "instant",
})
}else{
hema.slideHolder.scroll(hema.heartdrumsen,0)
}
}
}.bind(this),hema.slidespeed)

hema.CreateSlide = function(hemb,time,last){
hemb.Mohka = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1")
hemb.Mohka.Title = Crystalline.maaelle('div',1/9,0,7/9,1/7,hemb.Mohka).ray(hemb.ShowotronTitle).vcenter()
hemb.Mohka.Image = Crystalline.maaelle('div',0,1/7,1,4/7,hemb.Mohka).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hemb.Mohka.Countdown = Crystalline.maaelle('div',1/9,2/7,7/9,2/7,hemb.Mohka).vcenter()



if(hema.sort=="Upcoming"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = time-now
if(when > 0){
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)

}else{
hemb.Mohka.Countdown.ray(`<span style='color:rgb(255,215,105)'>Just Released!</span>`)

}
})
}

if(hema.sort=="Released"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = now-time
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)
})
}





hemb.Mohka.Description = Crystalline.maaelle('div',0,5/7,1,2/7,hemb.Mohka).ray(hemb.ShowotronDescription).vcenter()
let hemlink = Crystalline.maaelle('div',0,0,1,1).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hema.slideHolder.add(hemb.Mohka,hemlink,last)
}.bind(this)

hema.getSlidesFromServer = async function(){
await Creatures.magicspell("getEntries",{},hema.getSlidesFromServerXX)   
  }

hema.getSlidesFromServerXX = async function(hem){
let vslides = hem.entries.split(",")
for(i=0;i<vslides.length;i++){
hema.getSlideFromServer(vslides[i],"l",i,vslides.length)
}
}.bind(this)





hema.getSlideFromServer = async function(hemx,last,sen,vsen){
await Creatures.magicspell("loadEntry",{entrylocation:hemx},function(hem){
let datas = hem.entry.split("~*^*~")
let hemb = {}
hemb.entrynumber = datas[0]
hemb.entryname = datas[1]
hemb.entryimage = datas[2]
hemb.entrydescription = datas[3]
hemb.entryattributes = datas[4]
hemb.entrytype = datas[5]
hemb.ekkattributes = [] 
let vattribute = hemb.entryattributes.split("~x*^*x~")
for(i=0;i<vattribute.length;i++){
let atr = vattribute[i].split("~!*^*!~")
hemb.ekkattributes.push(atr)
let f = atr[0]
let ood = atr[1]
hemb[f] = ood
}

if(hemb.entrytype == hema.type){
if(hema.sort=="Upcoming"){

let nowdate = Date.now()
let onShowotron = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
let daysbefore = parseInt(hemb.DaysBeforeReleaseAddToGalleryAndShowotron) * 24 * 60 * 60 * 1000
if(day-daysbefore < now && day > now - (24*60*60*1000)){
onShowotron = "o"
}
if(onShowotron == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}

}

}
if(hema.sort=="Released"){
let nowdate = Date.now()
let onJustReleased = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
if(now > day && now < day +3*(24*60*60*1000)){
onJustReleased = "o"
}
if(onJustReleased == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}
}//Released


}


}//Dab
if(sen == vsen-1 && hema.slides.length > 0){hema.CreateSlide(hema.SunHemb,hema.SunTime,"o")}


}.bind(this))
 }


hema.slideHolder.add = function(hem,hemlink,last){
if(last=="l"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hemlink.lo(0,(1/10)+(1/5)*hema.slides.length,1,1/10)
hemlink.slidesen = hema.slides.length
hemlink.eshe(function(){
if(hema.autoplaying=="l"){
hema.autoplaying = "o"
}


if(Math.floor(hema.slidewidth*hemlink.slidesen) != Math.floor(hema.slideHolder.scrollLeft)){
hema.autoplaying = "l"
hema.slideHolder.scroll({
left: hema.slidewidth*hemlink.slidesen,
top:0,
behavior: "smooth",
})
}




}.bind(this))
hem.eshe(function(){
alert("hi")

}.bind(this))
hema.vli.ano(hemlink)
hema.slides.push(hem)
}
if(last=="o"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hem.eshe(function(){
alert("hi")

}.bind(this))
//hema.slides.push(hem)
}
}.bind(this)



hema.vli = Crystalline.maaelle('div',16/18,0,2/18,1,hema).dalcorsa("0,0,0,0.8").flow("o").front("5")
hema.getSlidesFromServer()


return hema
}.bind(this)


















Creatures.RTree = function(x,y,w,h,ano,leafsia,leaferen){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.MyRefCode = Crystalline.maaelle('div',1/2,0,1/2,1,hema)
hema.vLeaf = Crystalline.maaelle('div',0,0,1/2,1,hema)

hema.getLeafDalcorsa = function(){
let lf = Crystalline.fate(leaferen)
let lc = leafsia+lf+".png"
return lc
}.bind(this)

hema.vLeaf.leaf0 = Crystalline.maaelle('div',0,0/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(leafsia+"X.png").dalcorsalsen().dalcorsavcenter()
let ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf1 = Crystalline.maaelle('div',0,1/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf2 = Crystalline.maaelle('div',0,2/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf3 = Crystalline.maaelle('div',0,3/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf4 = Crystalline.maaelle('div',0,4/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()

return hema
}.bind(this)














Showotron.getGalleryList   =   {}
Showotron.getGalleryList.Dab = async function(){
await Creatures.magicspell("getEntries",{},function(data){
let vslides = data.entries.split(",")
for(i=0;i<vslides.length;i++){
Showotron.getGalleryList.nDab(vslides[i])
}
}.bind(this))
}.bind(this)


Showotron.getGalleryList.nDab = async function(hem){
await Creatures.magicspell("loadEntry",{entrylocation:hem},function(hem){
let datas = hem.entry.split("~*^*~")
let hema = {}
hema.entrynumber = datas[0]
hema.entryname = datas[1]
hema.entryimage = datas[2]
hema.entrydescription = datas[3]
hema.entryattributes = datas[4]
hema.entrytype = datas[5]
hema.ekkattributes = [] 
let vattribute = hema.entryattributes.split("~x*^*x~")
for(i=0;i<vattribute.length;i++){
let atr = vattribute[i].split("~!*^*!~")
hema.ekkattributes.push(atr[1])
}

if(hema.entrytype == "Dab"){
hema.Strains = hema.ekkattributes[0]
hema.ReleaseDate = hema.ekkattributes[1]
hema.ReleaseTime = hema.ekkattributes[2]
hema.ShowotronTitle = hema.ekkattributes[3]
hema.ShowotronDescription = hema.ekkattributes[4]
hema.Price = hema.ekkattributes[5]
hema.DaysBeforeReleaseAddToGalleryAndShowotron = hema.ekkattributes[6]
hema.Amount = hema.ekkattributes[7]
hema.Temperature = hema.ekkattributes[8]
hema.Type = hema.ekkattributes[9]
let nowdate = Date.now()
let onShowotron = "l"
let datelings = hema.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hema.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
hema.day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
let daysbefore = parseInt(hema.DaysBeforeReleaseAddToGalleryAndShowotron) * 24 * 60 * 60 * 1000
if(hema.day < now){
let time = Math.round(hema.day/1000)
Showotron.mainGallery.fullList.push(hema)

}
}//Dab

}.bind(this))
  }



Showotron.createDabGalleryPage = function(mohka){
Showotron.mainGallery = Showotron.createProductsMohkaDab()
Showotron.mainGallery.fullList = []
Showotron.mainGallery.viewer.lo(0,0,1,6/10)
Showotron.mainGallery.lo(0,6/10,1,4/10)
mohka.ano(Showotron.mainGallery)
mohka.ano(Showotron.mainGallery.viewer)
}.bind(this)

Showotron.createProductsMohkaDab = function(){
let hema = Showotron.createProductsMohka()
hema.setItemType("Dab")
hema.ordertypeMohka.addType("New")
hema.ordertypeMohka.addType("Old")
hema.ordertypeMohka.addType("$$$")
hema.ordertypeMohka.addType("$")
hema.ordertypeMohka.addType("#")
Showotron.getGalleryList.Dab()
setTimeout(function(){hema.fresh()},1000)
return hema
}.bind(this)

Showotron.createProductsMohka = function(){
let hema = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1").rhap("0","255,255,255,1","1","solid")
hema.fullList = []
hema.viewer = Crystalline.maaelle('div',0,0,1,1).rhap("0","255,255,255,1","1","solid").flow("o")
hema.itemType = ""
hema.ordertypeMohka = Crystalline.maaelle('div',0,0,2/9,1,hema).flow("o").rhap("0","255,255,255,1","1","solid")
hema.searchbar = Crystalline.maaelle('aera',2/9,0,7/9,1/9,hema).rhap("0","255,255,255,1","1","solid").hint("Search").aeraeshe(function(){
hema.order(hema.onordertype)
}.bind(this))
hema.results = Crystalline.maaelle('div',2/9,1/9,7/9,8/9,hema)

hema.setItemType = function(hem){
hema.itemType = hem
}.bind(this)

hema.ordertypeMohka.ordertypes = []
hema.ordertypeMohka.addType = function(htype){
let hemb = Crystalline.maaelle('div',0,(1/9)*hema.ordertypeMohka.ordertypes.length,1,1/9,hema.ordertypeMohka).rhap("7","255,255,255,1","1","solid").vcenter().ray(htype).eshe(function(){
for(i=0;i<hema.ordertypeMohka.ordertypes.length;i++){
hema.ordertypeMohka.ordertypes[i].corsaera("255,255,255,1")
}
hemb.corsaera("0,255,0,1")
hema.order(htype)
}.bind(this))

hema.ordertypeMohka.ordertypes.push(hemb)
}.bind(this)

hema.order = function(htype){
hema.onordertype = htype
let stringIncludes = hema.searchbar.sunaera()
Showotron.lista = []
hema.results.ray("")

let S2 = []
for(i=0;i<Showotron.mainGallery.fullList.length;i++){
let hemxx = Showotron.mainGallery.fullList[i]
if(hemxx.entryname.toLowerCase().indexOf(stringIncludes.toLowerCase()) != -1){
S2.push(hemxx)
}
}


let S3 = []
for(i=0;i<S2.length;i++){

if(htype == "New"){
S3.push(S2[i])
}

if(htype == "Old"){S3.push(S2[i])}
if(htype == "$$$"){S3.push(S2[i])}
if(htype == "$"){S3.push(S2[i])}
if(htype == "#"){S3.push(S2[i])}
}




for(i=0;i<S3.length;i++){
let hemx = S3[i]

let hemc = Crystalline.maaelle('div',0,(1/9)*i,1,1/9,hema.results).vcenter().ray(hemx.entryname).eshe(function(){
for(ii=0;ii<Showotron.lista.length;ii++){
Showotron.lista[ii].corsaera("255,255,255,1")
}
hemc.corsaera("0,255,0,1")
hema.viewer.ray("")
let hemm = Crystalline.maaelle('div',3/9,0,3/9,1/9,hema.viewer).ray(hemx.entryname).vcenter()
hemm.htype = Crystalline.maaelle('div',0/9,0,3/9,1/9,hema.viewer).ray(hemx.Type).vcenter()
if(hemx.Type=="Indica"){hemm.htype.corsaera("5,30,255,1")}
if(hemx.Type=="Hybrid"){hemm.htype.corsaera("163,5,255,1")}
if(hemx.Type=="Sativa"){hemm.htype.corsaera("255,5,5,1")}

hemm.img = Crystalline.maaelle('div',0,1/9,1,4/9,hema.viewer).dalcorsa(hemx.entryimage).dalcorsascroll().dalcorsaeren()
hemm.releasedate = Crystalline.maaelle('div',0,5/9,1/3,1/18,hema.viewer).ray("<span style='color:#03c4ff'>"+hemx.ReleaseDate+"</span>").vcenter()
hemm.price = Crystalline.maaelle('div',1/3,5/9,1/3,1/18,hema.viewer).ray("ShareCost: <span style='color:#03ff52'>"+hemx.Price+"$</span>").vcenter()
hemm.amount = Crystalline.maaelle('div',2/3,5/9,1/3,1/18,hema.viewer).ray("InStock: <span style='color:#fbff03'>"+hemx.Amount+"</span>").vcenter()

hemm.strains = Crystalline.maaelle('div',0,11/18,1/3,1/18,hema.viewer).ray("<span style='color:#f53842'>"+hemx.Strains+"</span>").vcenter()
hemm.temperature = Crystalline.maaelle('div',1/3,11/18,1/3,1/18,hema.viewer).ray("<span style='color:#f5b038'>"+hemx.Temperature+"°f"+"</span>").vcenter()
hemm.oncomments = "l"
hemm.commentsli = Crystalline.maaelle('div',2/3,11/18,1/3,1/18,hema.viewer).ray("Comments").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){
if(hemm.oncomments == "l"){
hema.ordertypeMohka.invis()
hema.searchbar.invis()
hema.results.invis()
hemm.commentsmohka.vis()
hemm.oncomments = "o"
}else{
hema.ordertypeMohka.vis()
hema.searchbar.vis()
hema.results.vis()
hemm.commentsmohka.invis()
hemm.oncomments = "l"
}
}.bind(this))

hemm.description = Crystalline.maaelle('div',0,6/9,1,3/9,hema.viewer).ray(hemx.entrydescription).vcenter()
hemm.commenting = "l"
hemm.commentsmohka = Crystalline.maaelle('div',0,0,1,1,hema).vcenter().invis()
hemm.commentsmohka.commentaera = Crystalline.maaelle('aera',0,1/12,1,11/12,hemm.commentsmohka).rhap("7","255,255,255,1","1","solid").invis()
hemm.commentsmohka.commentli = Crystalline.maaelle('div',2/9,0,5/9,1/12,hemm.commentsmohka).rhap("7","255,255,255,1","1","solid").invis().ray("Submit Comment").eshe(function(){
let comment = hemm.commentsmohka.commentaera.sunaera()
Comments.submit(comment,hemx.entrynumber)
}.bind(this))

hemm.commentsmohka.commentsmohka = Crystalline.maaelle('div',0,1/12,1,11/12,hemm.commentsmohka).rhap("7","255,255,255,1","1","solid")
hemm.commentsmohka.returnli = Crystalline.maaelle('div',7/9,0,2/9,1/12,hemm.commentsmohka).ray("return").eshe(function(){
hema.ordertypeMohka.vis()
hema.searchbar.vis()
hema.results.vis()
hemm.commentsmohka.invis()
hemm.oncomments = "l"
}.bind(this)).rhap("7","255,255,255,1","1","solid")

hemm.commentsmohka.erenlupeli = Crystalline.maaelle('div',0/9,0,2/9,1/12,hemm.commentsmohka).ray("NewComment").eshe(function(){
if(hemm.commenting == "l"){
hemm.commentsmohka.commentaera.vis()
hemm.commentsmohka.commentli.vis()
hemm.commentsmohka.commentsmohka.invis()
hemm.commenting = "o"
}else{
hemm.commentsmohka.commentaera.invis()
hemm.commentsmohka.commentli.invis()
hemm.commentsmohka.commentsmohka.vis()
hemm.commenting = "l"
}
}.bind(this)).rhap("7","255,255,255,1","1","solid")




}.bind(this))
Showotron.lista.push(hemc)
}

}.bind(this)

hema.fresh = function(){
hema.ordertypeMohka.ordertypes[0].click()
Showotron.lista[0].click()
}.bind(this)

return hema
}.bind(this)















Creatures.addUpdatesBottomBar()


Showotron.mainGallery = Showotron.createProductsMohkaDab()
Showotron.mainGallery.viewer.lo(0,0,1,7/12)
Showotron.mainGallery.lo(0,7/12,1,5/12)
SunMohka.Aera.ano(Showotron.mainGallery)
SunMohka.Aera.ano(Showotron.mainGallery.viewer)


let homeli = Crystalline.maaelle('div',0,0,1,1).ray("Home").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","home")
}.bind(this))
SunMohka.TopBar.Add(homeli)

let galleryli = Crystalline.maaelle('div',0,0,1,1).ray("Vault").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","vault")
}.bind(this))
SunMohka.TopBar.Add(galleryli)

let gambleli = Crystalline.maaelle('div',0,0,1,1).ray("Gamble").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))
SunMohka.TopBar.Add(gambleli)
Users.createSignInBar("S")
let referalli = Crystalline.maaelle('div',0,0,1,1).ray("Referal").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","refer")
}.bind(this))
SunMohka.TopBar.Add(referalli)


</script></body>
</html>&&&&&&<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RosinVault</title>
   <script src="three.min.js"></script>
   <script src="GLTFLoader.js"></script>
  </head>
  <body><script>window.siartani = "growwithus"

window.siartanilo = "RosinVault"

window.Crystalline = {

raphos: function(hem){
 





hem.aeralign = function(hema){if(hema=="o" || hema==undefined){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }



















hem.vcenter = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
hem.style.alignItems = "center"
         return hem
         }

hem.vcenterles = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
         return hem
         }

hem.vcenterphel = function(){hem.style.display = "flex"
hem.style.alignItems = "center"
         return hem
         }

hem.vsel = function(){hem.style.display = "flex"
hem.style.justifyContent = "left"
hem.style.textAlign = "left"
         return hem
         }

hem.vles = function(){hem.style.display = "flex"
hem.style.textAlign = "right"
hem.style.justifyContent = "right"
         return hem
         }



hem.eshe = function(hema){
if(hem.hematype == "select"){
hem.onchange = hema}else{
hem.onclick = hema
}
          return hem
          }



















































































hem.dalcorsalsen = function(){hem.style.backgroundRepeat = "no-repeat"
                                      
         return hem
         }





hem.dalcorsavcenter = function(){hem.style.backgroundPosition = "center"
                                     
         return hem
         }















hem.dalcorsa = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.Background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

         hem.corsadal = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"} 
         return hem
         }

















hem.noselect = function(hema){
               hema.style.userSelect = "none"
          return hem}

hem.border = function(radius,color,width,style){
          hem.style.borderRadius = "7px"
          hem.style.borderColor = "rgba(255,255,255,1)"
          hem.style.borderWidth = "3px"
          hem.style.borderStyle = "double"
          if(arguments.length>0){hem.style.borderRadius = radius}
           if(arguments.length>1){hem.style.borderColor = "rgba("+color+")"}
           if(arguments.length>2){hem.style.borderWidth = width}
           if(arguments.length>3){hem.style.borderStyle = style}
           return hem
         }

         

         

         

         hem.ona = function(){
         for(this.iuuuui=0;this.iuuuui<arguments.length;this.iuuuui++){
           hem.removeChild(arguments[this.iuuuui]) 
          }
          return hem
         }

         hem.font = function(hema){hem.style.fontFamily = hema
          return hem
          }

          
         
         
         
         
         
         
         
         


         
      
         
         
         




  hem.dalcorsascroll = function(){hem.style.backgroundAttachment = "scroll"
                                     
         return hem
         }

hem.white = function(){hem.style.whiteSpace = "pre"
                                     
         return hem
         }


hem.dalcorsalscroll = function(){hem.style.backgroundAttachment = "fixed"
                                      
         return hem
         }


hem.dalcorsaliscroll = function(){hem.style.backgroundAttachment = "local"
                                      
         return hem
         }


hem.dalcorsasen = function(){hem.style.backgroundRepeat = "repeat"
                                      
         return hem
         }



hem.dalcorsaeren = function(){hem.style.backgroundSize = "cover"
                                      
         return hem
         }



hem.dalcorsaloeren = function(){hem.style.backgroundSize = "contain"
                                      
         return hem
         }

hem.dalcorsahem = function(){hem.style.backgroundSize = "100% 100%"
                                      
         return hem
         }



         hem.textEdge = function(hema){if(hema=="o"){hem.style.whiteSpace = "wrap"}
                                       if(hema=="l"){hem.style.whiteSpace = "nowrap"}
         return hem
         }
              



hem.koil = function(){hem.style.userSelect = "none"
                                      
         return hem
         }



hem.front = function(hemb){hem.style.zIndex = hemb
                                      
         return hem
         }

hem.dal = function(hemb){hem.type = hemb
                                      
         return hem
         }





































































































































hem.ray = function(hema){












let hn = ""
if(hema != undefined){hn=hema}
         if(hem.hematype == "textarea"){hem.value = hn}
if(hem.hematype == "aera"){hem.value = hn}
if(hem.hematype == "notaera"){hem.value = hn}
if(hem.hematype == "select"){hem.value = hn}
if(hem.hematype == "input"){hem.value = hn}
if(hem.hematype == "div"){hem.innerHTML = hn}
if(hem.hematype == "button"){hem.textContent = hn}
if(hem.hematype == "option"){hem.textContent = hn
hem.value = hn}
         return hem
         }







hem.aeraeren = function(hema){hem.style.fontSize = hema+"px"
         return hem
         }
hem.textSize = function(hema){hem.style.fontSize = hema 
         return hem
         }



















hem.sunano = function(hema){
               document.body.appendChild(hem)
          return hem}

















hem.ano = function(){
         for(this.iuuui=0;this.iuuui<arguments.length;this.iuuui++){
           hem.appendChild(arguments[this.iuuui]) 
          }
          return hem
         }

























hem.vis = function(){hem.style.display = "flex"
                                      
         return hem
         }

hem.visible = function(){hem.style.display = "flex"
                                      
         return hem
         }







hem.invis = function(){hem.style.display = "none"
                                      
         return hem
         }
hem.invisible = function(){hem.style.display = "none"
                                      
         return hem
         }




















hem.sunaera = function(){
if(arguments.length == 1){hem.innerHTML = arguments[0]
         return hem
         }
if(arguments.length == 0 && hem.hematype == "textarea"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "select"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "input"){
return hem.value
}
if(arguments.length == 0 && hem.hematype != "textarea"){
         return hem.innerHTML
         }
}





hem.aeradal = function(hema){hem.style.fontFamily = hema
         return hem
         }


hem.aeraeshe = function(hema){hem.oninput = hema
          return hem
          }





hem.aeracorsa = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }
hem.textColor = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }









         










hem.aeraglow = function(hema){hem.style.textShadow = "0px 0px 4px rgba(" + hema +")"
         return hem
         }











hem.ama = function(hema){hem.placeholder = hema 
         return hem
         }

hem.hint = function(hema){hem.placeholder = hema 
         return hem
         }



















hem.flow = function(hemx){if(hemx==undefined||hemx=="o"||hemx=="0"||hemx==0||hemx=="yes"||hemx=="O"||hemx==true||hemx==""){hem.style.overflow = "auto"}
if(hemx=="l"||hemx=="L"||hemx==1||hemx=="no"||hemx==false){hem.style.overflow = "hidden"}
if(hemx!=undefined){

if(hemx.toLowerCase()=="lleslai"){hem.style.overflowX = "auto"}
if(hemx.toLowerCase()=="phellai"){hem.style.overflowY = "auto"}



}

hem.style.scrollBehavior = "smooth"
          return hem}











hem.aerasun = function(hema){hem.style.textShadow = "0 0 8px rgba("+hema+")"
         return hem
         }





hem.aeraAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }

hem.textAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }




































hem.corsaera = function(hema){
hem.style.color = "rgba("+hema+")"
         return hem
         }




hem.lo = function(x,y,w,h){
          this.lo(hem,x,y,w,h)
return hem
         }.bind(this)

hem.loles = function(x){
          this.loles(hem,x)
return hem
         }.bind(this)

hem.losel = function(x){
          this.losel(hem,x)
return hem
         }.bind(this)

hem.lophel = function(x){
          this.lophel(hem,x)
return hem
         }.bind(this)

hem.lolehp = function(x){
          this.lolehp(hem,x)
return hem
         }.bind(this)

hem.getWidth = function(){
let hema = hem.getBoundingClientRect()

return hema.width
}.bind(this)


hem.getHeight = function(){
let hema = hem.getBoundingClientRect()

return hema.height
}.bind(this)












































hem.rai = function(hema){hem.style.opacity = hema
         return hem
         }



























































hem.rhap = function(radius,color,width,style){
          hem.style.borderRadius = radius + "px"
          hem.style.borderColor = "rgba("+color+")"
          hem.style.borderWidth = width+"px"
          hem.style.borderStyle = style
           return hem
         }





hem.rhapdal = function(hema){hem.style.borderStyle = hema 
         return hem
         }
         hem.rhapcorsa = function(hema){hem.style.borderColor = "rgba("+hema+")" 
         return hem
         }
         hem.rhaperen = function(hema){hem.style.borderWidth = hema
         return hem
         }

hem.rhaprele = function(hema){hem.style.borderRadius = hema+"px"
         return hem
         }
 





hem.borderradiuses = function(tl,tr,br,bl){
hem.style.borderTopLeftRadius = tl+"px"
hem.style.borderTopRightRadius = tr+"px"
hem.style.borderBottomRightRadius = br+"px"
hem.style.borderBottomLeftRadius = bl+"px"
return hem
}


hem.borhap = function(padding){
          hem.style.padding = padding + "px"
           return hem
         }





























































































return hem
        },


seall: function(aera,siar){Kt.seall(aera,siar)},











melosiar: function(siar,hemfun){
    var client = new XMLHttpRequest()
     client.open('GET',siar)
   client.onreadystatechange = function(){
if(client.readyState == 4 && client.status == 200){hemfun(client.responseText)}}
client.send()
   },



















copyAssets: function(aera){Kt.copyAssets(aera)},


hCopyAssets: function(aera){Kt.hCopyAssets(aera)},

copyAssetsCal: function(aera){Kt.copyAssetsCal(aera)},


hCopyAssetsCal: function(aera){Kt.hCopyAssetsCal(aera)},

reloadprogramcal: function(){Kt.reloadprogramcal()},





say: function(hem){Kt.say(hem)},











lseall: function(siar){return Kt.lseall(siar)},






















maaRaynotaera: function(aeralo,x,y,w,h,ano){
let hema = Crystalline.maaelle('aera',x,y,w,h,ano).aeraeshe(function(){
Crystalline.seall(hema.sunaera(),hema.siar)

}.bind(this))

hema.siar = aeralo
hema.ray(Crystalline.lseall(hema.siar))

























},








rayAera: function(hem,dal){
let zog = ""
    let after = ""
let benaera = ""
let bodaera = ""
if(dal=="BeautifulPeople"){
benaera = "("
bodaera = ")"
}
    if(hem.indexOf("in the styles of the artists")!=-1){
    zog = hem.substring(0,hem.indexOf("in the styles of the artists"))
    after = hem.substring(hem.indexOf("in the styles of the artists"),hem.length)
    }else{
      zog = hem
    }
  let maera = hem.split(" ")
  let which = Crystalline.fate(maera.length)
let sen = Crystalline.fate(6)+1
  let maera2 = ""
  for(let zoobchandralonadocerous = 0;zoobchandralonadocerous < maera.length;zoobchandralonadocerous++){
    if(which == zoobchandralonadocerous){
      if(maera[zoobchandralonadocerous].substring(0,2)=="((" || maera[zoobchandralonadocerous].substring(maera[zoobchandralonadocerous].length-2,maera[zoobchandralonadocerous].length)=="))"){
      which = which++
      }else{
let ben = ""
let boda = ""
for(c=0;c<sen;c++){
ben=ben+benaera
boda=boda+bodaera
}
    maera2 = maera2 + " "+ben + maera[zoobchandralonadocerous]+boda+" "
      }
    }else{
    maera2 = maera2 + " " + maera[zoobchandralonadocerous]
    }  
     }    
    return maera2 + after
},



generateSeed: function(){
   let seed = Crystalline.fate(4294967295)+1
   return seed
  },


BeautifulGallery: function(x,y,w,h,ano){
let galleria = Crystalline.maaelle('div',x,y,w,h,ano)
galleria.settings = {}
  galleria.settings.gallery = true
  galleria.settings.sort = "recent"
  galleria.settings.adaptiveHeight = true
  galleria.settings.style = "background-color:rgba(0,0,0,0)"
  galleria.settings.forceColorScheme = "dark"
let c = image(galleria.settings).evaluateItem
  galleria.ray(c)
},

BeautifulStory: function(ask,x,y,w,h,ano){
let textia = Crystalline.maaelle('div',x,y,w,h,ano)
textia.settings = {}
 textia.settings.instruction = ask  
let c = aitext(textia.settings)
  textia.ray(c)
},

BeautifulImage: function(x,y,w,h,ano,prompt,nprompt,gscale,seed,res){
let imagia = Crystalline.maaelle('div',x,y,w,h,ano)
imagia.settings = {}
  imagia.settings.prompt = prompt
  imagia.settings.negativePrompt = nprompt
 imagia.settings.guidanceScale = gscale
 imagia.settings.seed = seed
 imagia.settings.resolution = res
let c = image(imagia.settings).evaluateItem
  imagia.ray(c)
//YTILIBATAPMOC
},




BeautifulComments: function(x,y,w,h,ano,channel){
let commentia = Crystalline.maaelle('div',x,y,w,h,ano)
commentia.settings = {}
  commentia.settings.spiritguides = true
  commentia.settings.loadFonts = "Emilys Candy"
 commentia.settings.channel = channel
 commentia.settings.commentPlaceholderText = "meow"
 commentia.settings.submitButtonText = "meow"
commentia.settings.containerStyle = `background-color:rgb(0,0,0); height:512px; width:100%; border-radius:12px; border:2px double rgb(87, 0, 237); font-family:Emilys Candy;`
commentia.settings.messageBubbleStyle = `background:rgba(255,255,255,0.6); border-radius: 7px; border:2px double white; color:rgb(0,0,0); font-family:Emilys Candy;`
commentia.settings.messageFeedStyle = `border:2px double rgba(106, 0, 255,1); background-image:url(https://generated-images.perchance.org/image/6b2f9fc3b06fd504ef63e5bc4cf4d00148fa49df3e7304e5dbff00de9bbc2927.jpeg); border-radius: 7px; font-family:Emilys Candy;`
commentia.settings.inputAreaStyle = `background-color:rgb(0,0,0); font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(255,255,255);`
commentia.settings.submitButtonStyle = `width:100%;background-color: rgba(61, 242, 255,1); border:none; font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(0,0,0)`
commentia.settings.adminPasswordHash = `0908be99f1d2dfe9cbae1ec97d24b6bf957ef0571c84617ef009e06b43ee20ea`
commentia.settings.adminFlair = `meow`
commentia.settings.width = `400`
commentia.settings.bannedWords = "cbat"
//commentia.settings.customEmojis = {import:allos-emoji-list}
commentia.settings.loneCustomEmojiSizeMultiplier = "3"
commentia.settings.customEmojiSize = "1.2"
let c = comments(commentia.settings).evaluateItem
  commentia.ray(c)
//YTILIBATAPMOC
},





  
  
  
  
  
  
  

  
  
  
  
  
    
  
  


  

  
  
  


melosia: function(hem){return Kt.melosia(hem).split(",")},
















downloadassets: function(hemlo,hemtani){Kt.downloadassets(hemlo,hemtani)},
hseall: function(aera,siar){Kt.hseall(aera,siar)},
hlseall: function(siar){return Kt.hlseall(siar)},
        seallsiar: function(siabe,siabo){Kt.seallsiar(siabe,siabo)},
        rasiar: function(siabe){return Kt.rasiar(siabe)},
hrasiar: function(siabe){return Kt.hrasiar(siabe)},
rasia: function(siabe){return Kt.rasia(siabe)},
        seallsia: function(siabe,siabo){Kt.seallsia(siabe,siabo)},
celestiall: function(siabe,siabo){Kt.celestiall(siabe,siabo)},
        seallver: function(siabe,siabo){Kt.seallver(siabe,siabo)},
        kortanisia: function(siabe,siabo){Kt.kortanisia(siabe,siabo)},
hkortanisia: function(siabe,siabo){Kt.hkortanisia(siabe,siabo)},
        
maasia: function(hem){Kt.maasia(hem)},
hmelosia: function(hem){return Kt.hmelosia(hem).split(",")},
sunseall: function(aera,siar){Kt.sunseall(aera,siar)},
sunlseall: function(siar){return Kt.sunlseall(siar)},
        sunmelosia: function(hem){return Kt.sunmelosia(hem).split(",")},






















ekklinere: function(hemaera,hemekk){
let sen = hemekk.indexOf(hemaera)
if(sen != -1){
  hemekk.splice(sen, 1)
}
return hemekk
},
ekklieren: function(hemaera,hemekk){
hemekk.push(hemaera)
return hemekk
},
ekklira: function(hemaera,hemekk){
if(hemekk.includes(hemaera)){return "o"}else{return "l"}
},











componentToHex: function(c) {
  var hex = c.toString(16)
  return hex.length == 1 ? "0" + hex : hex
},

 rgbToHex: function(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b)
},



hemThree: function(tthen,tanimate,x,y,w,h,hemano){
let hema = Crystalline.maaelle('div',x,y,w,h,hemano)

Crystalline.Corsan = hema
hema.threescript = tanimate
hema.threeobjects = []
hema.threeactive = false
hema.Textures = []
hema.animate = function(){ 	
                      	if(hema.threeactive == true){
for(i=0;i<hema.threeobjects.length;i++){
hema.threeobjects[i]()
}
hema.threescript()
//hema.ORBITCONTROLS.update()
hema.RENDERER.render( hema.SCENE, hema.CAMERA )
}
let ani = hema.animate.bind(this)
requestAnimationFrame( ani )
}.bind(this)

hema.THREE = THREE

hema.TextureLoader = new hema.THREE.TextureLoader()
//hema.GLTFLoader = new this.THREE.GLTFLoader()

let vww = Math.round(w*hemano.clientWidth)
let vhh = Math.round(h*hemano.clientHeight)

     hema.SCENE = new hema.THREE.Scene()

hema.LIGHT = new hema.THREE.AmbientLight(0xffffff,0.3)
hema.SCENE.add(hema.LIGHT)

hema.SUN = new hema.THREE.PointLight( 0xffffff, 1, 70 )
hema.SUN.position.set( 13, 20, 13 )
hema.SUN.castShadow = true
hema.SUN.shadow.mapSize.width = 26
hema.SUN.shadow.mapSize.height = 26
hema.SUN.shadow.camera.near = 1
hema.SUN.shadow.camera.far = 50
hema.SCENE.add( hema.SUN )

    hema.CAMERA = new hema.THREE.PerspectiveCamera( 90, vww/ vhh, 0.1, 1000 )
hema.cameraX = 0
hema.cameraY = 0
hema.cameraZ = 0
hema.CAMERA.position.set(0, 0, 0)



     hema.RENDERER = new hema.THREE.WebGLRenderer()
hema.RENDERER.shadowMap.enabled = true
      hema.RENDERER.setSize(vww, vhh)
hema.RENDERER.setPixelRatio(window.devicePixelRatio)

hema.ORBITCONTROLS = new hema.THREE.OrbitControls(hema.CAMERA,hema.RENDERER.domElement)
hema.ORBITCONTROLS.enabled = false
//hema.ORBITCONTROLS.enableDamping = true
//hema.ORBITCONTROLS.dampingFactor = 0.05
hema.ORBITCONTROLS.screenSpacePanning = false
hema.ORBITCONTROLS.minDistance = 30
hema.ORBITCONTROLS.maxDistance = 100

hema.T = hema.RENDERER.domElement
Crystalline.raphos(hema.T)
hema.T.lo(0,0,1,1)
hema.front(999999999999)
 hema.ano( hema.T )


















hema.createUnit = function(x,y,z,who){

let hemb = {}
hemb.represents = who
hema.tani = who
hemb.x = x
hemb.y = y
hemb.z = z
hemb.variant = ""
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hema.b,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)



hemb.removeFromMap = function(){
this.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)


hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)
}
return hemb
}.bind(this)









hema.SunRaphos = function(hemb){
























































































































































































































hemb.lookAtMe = function(){
hema.CameraLookAtObject(hemb)
return hemb
}.bind(this)














































































































hemb.position = function(rx,ry,rz){
hemb.x = rx
hemb.y = ry
hemb.z = rz
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)



hemb.wireframe = function(hem){
if(hem=="o"){
hemb.materi1.wireframe = true
}else{
hemb.materi1.wireframe = false
}
}.bind(this)



hemb.texturewrap  = function(img){
      
                   
           let mewta = new hema.THREE.TextureLoader().load(img)
                    mewta.wrapS = mewta.wrapT = hema.THREE.RepeatWrapping
                    
                    hemb.materi1.map = mewta         
                    hemb.materi1.needsUpdate = true
                  }.bind(this)




return hemb
}.bind(this)
















































































































































































































hema.maaTree = function(x,y,z){

let hemb = hema.maaS(x,y,z,2,90,2)
hema.maaS(x+6,y+14,z,10,2,2)
hema.maaS(x,y+20,z+6,2,2,10)
hema.maaS(x-6,y+26,z,10,2,2)
hema.maaS(x,y+32,z-6,2,2,10)
hema.maaS(x+6,y+38,z,10,2,2)
return hemb
}.bind(this)



hema.maaS = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(xp, yp, zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
return hemb
}.bind(this)









Crystalline.Corsan.maaLight = function(x,y,z,strength){
let light = new THREE.PointLight(0xffffff,strength)
light.position.set(x,y,z)
hema.SCENE.add(light)
}.bind(this)


Crystalline.Corsan.maaInvisithing = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(255,255,255)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(hemb.xp, hemb.yp, hemb.zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hemb.aaM()
return hemb
}.bind(this)






















































hema.cameraSpin = function(tani){
hema.ORBITCONTROLS.enabled = true
return hema
}.bind(this)




hema.cameraNonspin = function(tani){
hema.ORBITCONTROLS.enabled = false
return hema
}.bind(this)









hema.maaMaven = function(x,z,type,who){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.variant = type
hemb.present = "o"
if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{
let hm = Crystalline.melosia(type+"/Maven/Corsa")
let wm = Crystalline.fate(hm.length)
let whoo = hm[wm].replace(".png","") +"Maven"
let tew = hema.Textures[whoo]
hemb.variant = hm[wm]

if(type != "Nif"){
hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)

hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
}else{

let whooo = who +"Hazel"
let tew2 = hema.Textures[whooo]

hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })
hemb.materi2 = new hema.THREE.SpriteMaterial({ 
	map: tew2,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)
hemb.mesh2 = new hema.THREE.Sprite(hemb.materi2)
hemb.mesh2.scale.set(0.3,0.3,0.3)
hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
hema.SCENE.remove(hemb.mesh2)
hemb.materi2.dispose()
hemb.mesh2 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hemb.mesh2.position.set(hemb.x,hemb.y+1,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hema.SCENE.add(hemb.mesh2)
}

}


return hemb
}.bind(this)


































































hema.maaEditSphere = function(x,z){

let hemb = {}
hemb.x = x
hemb.y = 3
hemb.z = z

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.SphereGeometry(0.35)

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){

hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.rotatia = function(){
hemb.mesh1.rotation.x = hemb.mesh1.rotation.x+0.01
}.bind(this)
hema.threeobjects.push(hemb.rotatia)



return hemb
}.bind(this)

























































































hema.CameraLookAtPosition = function(x,y,z){
let weW = new hema.THREE.Vector3(x,y,z)
hema.CAMERA.lookAt(weW)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraPosition = function(x,y,z){
hema.cameraX = x
hema.cameraY = y
hema.cameraZ = z
hema.CAMERA.position.set(x,y,z)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraTopDown = function(){
//hema.CAMERA
}.bind(this)

hema.CameraVFov = function(hem){
hema.CAMERA.fov = hem
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraLookAtObject = function(hemc){
hema.CAMERA.lookAt(hemc.mesh1.position)
}.bind(this)

hema.cameraright = function(hem){
hema.cameraX = hema.cameraX+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraleft = function(hem){
hema.cameraX = hema.cameraX-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameradown = function(hem){
hema.cameraZ = hema.cameraZ+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraup = function(hem){
hema.cameraZ = hema.cameraZ-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)



hema.CameraAutoTurnaround = function(hemb){
if(arguments.length == 1){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtObject(hemb)
}.bind(this)
hema.threeobjects.push(rotatia)
}
if(arguments.length == 3){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtPosition(arguments[0],arguments[1],arguments[2])
}.bind(this)
hema.threeobjects.push(rotatia)
}


}.bind(this)











hema.maaConversion = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.variant = who
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)






















hema.maaHazel = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z

if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let whoo = who +"Hazel"

let tew = hema.Textures[whoo]



hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)





























hema.maaSen = function(x,z,type){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 1
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.materi1 = ""
if(type.substring(0,4)=="Wall"){
hemb.y=2
hemb.ctype = hemb.ctype.replace("Wall","")
}
if(type.substring(0,9)=="Superwall"){
hemb.y=3
hemb.ctype = hemb.ctype.replace("Superwall","")
}
if(type.substring(0,3)=="Pit"){
hemb.y=0
hemb.ctype = hemb.ctype.replace("Pit","")
}

if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

if(type.substring(0,7)!="Culture"){
let whoo = hemb.ctype +"Sen"
let tew = hema.Textures[whoo]

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	map: tew,
transparent: true
 })
}else{
let hcolor = type.substring(7,type.length)
hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: hcolor,
transparent: true,
wireframe: true
 })

}


hemb.shape1  = new hema.THREE.BoxGeometry( hemb.xw, hemb.yw, hemb.zw )
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){





hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.shape1.dispose()
hemb.mesh1 = undefined

}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)



}

return hemb
}.bind(this)



















































      tthen()
    
hema.threeactive = true
hema.animate()

return hema
},











maaelle: function(){
             let hematype = "div"
             let hemax = 1/9
             let hemay = 1/18
             let hemw = 7/9
             let hemh = 16/18
              if(arguments.length>0){hematype = arguments[0]
              if(arguments[0]=="aera"){hematype = "textarea"}}
              if(arguments.length>1){hemax = arguments[1]}
              if(arguments.length>2){hemay = arguments[2]}
              if(arguments.length>3){hemw = arguments[3]}
              if(arguments.length>4){hemh = arguments[4]}
              let hema = document.createElement(hematype)
              hema.hematype = hematype
              if(hema.hematype == "div"){
               hema.style.userSelect = "none"
              }
             this.raphos(hema)
hema.style.fontFamily = "EmilysCandy"
if(hematype == "option"){
arguments[1].ano(hema)
}else{
             this.lo(hema,hemax,hemay,hemw,hemh)
}
         
             if(arguments.length>5){arguments[5].ano(hema)}
             
hema.dalcorsa("0,0,0,0.0").aeracorsa("255,255,255,1").aeraglow("255,255,255,1")


             return hema
            },




















kiDelete: function(){Kt.kieh(1,0)},
            ki: function(hem){Kt.ki(hem)},
            kiPaste: function(){Kt.kiPaste()},
            kiCopy: function(){Kt.kiCopy()},
            kiCut: function(){Kt.kiCut()},
            kiSelectAll: function(){Kt.kiSelectAll()},
            kiSelect: function(hemben,hemboda){Kt.kiSelect(hemben,hemboda)},
            kiboda: function(hemdistance){return Kt.kiboda(hemdistance)},
            kiben: function(hemdistance){return Kt.kiben(hemdistance)},
            kieh: function(hemben,hemboda){Kt.kieh(hemben,hemboda)},
            kiUp: function(){Kt.kiUp()},
            kiDown: function(){Kt.kiDown()},
            kiLeft: function(){Kt.kiLeft()},
            kiRight: function(){Kt.kiRight()},
            kiUndo: function(){Kt.kiUndo()},
            kiRedo: function(){Kt.kiRedo()},
    
kiSelection: function(){return Kt.kiSelection()},
      


gotowebpage: function(hem){Kt.gotowebpage(hem)},


     readasset: function(hem){
return Kt.readasset(hem)
}, 
exportasset: function(hem,boda){
Kt.exportasset(hem,boda)
}, 
        
        
 














veskaLo: function(tani,hem){
document.location.href = "https://"+tani+".glitch.me/"+hem
},


sensia: function(aera,sia){
let w = Crystalline.melosia(sia)
let an = w.length
if(w[0]==""){an=0}
let re = an.toString()
Crystalline.seall(aera,sia+"/"+re)
},

lo: function(hem,x,y,w,h){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)
                        hem.style.right = this.conversion.percentstring(1-(x+w))
                        hem.style.top = this.conversion.percentstring(y)
                        hem.style.bottom = this.conversion.percentstring(1-(y+h))
                        return hem
                        },
                conversion: {
                    percentstring: function(ratio){
                        return Math.round(ratio*100).toString()+"%"
                    },
                },



loles: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)   
                        return hem
                        },

losel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.right = this.conversion.percentstring(x)   
                        return hem
                        },

lophel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.top = this.conversion.percentstring(x)   
                        return hem
                        },
         
lolehp: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.bottom = this.conversion.percentstring(x)   
                        return hem
                        },










   





lohem: function(hem){
let hema = document.getElementById(hem)

this.raphos(hema)
return hema
},



























fate: function(hsen){
let hema = Math.floor(Math.random()*hsen)
return hema
},



SenNow: function(){
let hema = Date.now()
hema = hema.toString()
return hema
},

Senminutessince: function(since){
let hema = this.SenNow()
let hemaaa = parseInt(hema)-parseInt(since)
return hemaaa
},

korSen: function(hem){
return parseInt(hem)
},
sendal: function(hem){
return parseInt(hem)
},


maaHemSen: function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.year
hema.month
hema.day
hema.hour
hema.minute
hema.second
hema.millisecond
return hema
},

























}

let Kt = {
say: function(hem){alert(hem)},



hseall: function(aera,siar){
localStorage.setItem(siar,aera)
},
hlseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
seall: function(aera,siar){
localStorage.setItem(siar,aera)
},
lseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
        seallsiar: function(siabe,siabo){},
        rasiar: function(siabe){},
rasia: function(siabe){},
        seallsia: function(siabe,siabo){},
        seallver: function(siabe,siabo){},
        kortanisia: function(siabe,siabo){},
        melosia: function(hem){},
hmelosia: function(hem){},
sunseall: function(aera,siar){},
sunlseall: function(siar){},
        sunmelosia: function(hem){},




}






window.mode = ""
if(innerWidth > innerHeight){window.mode = "computer"}else{window.mode = "phone"}

window.SunMohka = Crystalline.maaelle('div',0,0,1,1).sunano().front("1").dalcorsa("0,0,0,1")
SunMohka.Aera = Crystalline.maaelle('div',0,0,1,1,SunMohka).dalcorsa("0,0,0,1")
SunMohka.TopBar = Crystalline.maaelle('div',0,0,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.TopBar.Entries = []
SunMohka.TopBar.Add = function(hem){
SunMohka.Aera.lophel(1/24)
SunMohka.TopBar.vis()
hem.lo((1/5)*SunMohka.TopBar.Entries.length,0,1/5,1)
SunMohka.TopBar.ano(hem)
SunMohka.TopBar.Entries.push(hem)
}.bind(this)
SunMohka.BottomBar = Crystalline.maaelle('div',0,23/24,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.BottomBar.Entries = []
SunMohka.BottomBar.Add = function(hem){
SunMohka.Aera.lolehp(1/24)
SunMohka.BottomBar.vis()
hem.lo((1/5)*SunMohka.BottomBar.Entries.length,0,1/5,1)
SunMohka.BottomBar.ano(hem)
SunMohka.BottomBar.Entries.push(hem)
}.bind(this)



window.Users = {}





Users.coinCorsa = ""






Users.viewUp = async function(){
await Creatures.magicspell("viewUp",{},function(data){})  
  }

Users.refreshMoney = async function(){
await Creatures.magicspell("getMoney",{},function(data){
SunMohka.SignInBar.coinamount.ray(data.money)
})
}.bind(this)



Users.amISignedInvInvis = []
Users.amISignedInInvis = function(hem){
Users.amISignedInvInvis.push(hem)
}.bind(this)

Users.amISignedIn = async function(){
await Creatures.magicspell("amISignedIn",{},function(data){
if(data.signedIn == "o"){
SunMohka.SignInBar.signinliORusername.mode = "Account"
SunMohka.SignInBar.signinliORusername.ray(data.name)
for(i=0;i<Users.amISignedInvInvis.length;i++){
Users.amISignedInvInvis[i].invis()
}
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
}
})
}



Users.signOut = async function(){
await Creatures.magicspell("signOut",{},function(data){
if(siartani == "gamble"){Zogladorium()}
SunMohka.SignInBar.coinamount.ray("0")
alert(data.say)})
}

Users.signIn = async function(hname,hpass,hreferer){
await Creatures.magicspell("signIn",{name:hname,pass:hpass,referer:hreferer},function(data){alert(data.say)
if(data.say == "Account Created.  You are Signed In." || data.say == "You are Signed In."){
SunMohka.SignInBar.signinliORusername.ray(data.name)
SunMohka.SignInBar.signinliORusername.mode = "Account"
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
SunMohka.SignInBar.abovepopupsignin.invis()
}
})
}

Users.createSignInBar = function(cointype){
SunMohka.SignInBar = Crystalline.maaelle('div',0,0,1,1)
SunMohka.TopBar.Add(SunMohka.SignInBar)
SunMohka.SignInBar.cointype = cointype

SunMohka.SignInBar.coin = Crystalline.maaelle('div',0,0,1/4,1,SunMohka.SignInBar).dalcorsascroll().dalcorsaeren().dalcorsalsen().eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}
}.bind(this))

SunMohka.SignInBar.coinamount = Crystalline.maaelle('div',1/4,0,1/4,1,SunMohka.SignInBar).vcenter().ray("0").eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}

}.bind(this))

if(SunMohka.SignInBar.cointype.toUpperCase() == "S"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/5107474554438d57be7152605ea67a78.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}
if(SunMohka.SignInBar.cointype.toUpperCase() == "PERSON"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/837189de985fa03e9fb36adfbabf8c29.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}

SunMohka.SignInBar.signinliORusername = Crystalline.maaelle('div',2/4,0,2/4,1,SunMohka.SignInBar).dalcorsa("0,0,0,1").corsaera("255,255,255").rhap("7","255,255,255,1","1","solid").ray("SignIn").vcenter().eshe(function(){
if(SunMohka.SignInBar.signinliORusername.mode == "SignIn"){
SunMohka.SignInBar.abovepopupsignin.visible()
}
if(SunMohka.SignInBar.signinliORusername.mode == "Account"){
if(Users.AccountMohka.on=="l"){
Users.AccountMohka.on = "o"
Users.AccountMohka.visible()
SunMohka.SignInBar.signinliORusername.corsaera("0,255,0,1").rhap("7","0,255,0,1","1","solid")
}else{
Users.AccountMohka.on = "l"
Users.AccountMohka.invisible()
SunMohka.SignInBar.signinliORusername.corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid")
}

}
}.bind(this))
SunMohka.SignInBar.signinliORusername.mode = "SignIn"

Users.amISignedIn()

SunMohka.SignInBar.abovepopupsignin = Crystalline.maaelle('div',0,0,1,1).sunano().invis().front("100").dalcorsa("0,0,0,0.5")

SunMohka.SignInBar.popupsignin = Crystalline.maaelle('div',0,0,1,1,SunMohka.SignInBar.abovepopupsignin).front("101").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

SunMohka.SignInBar.popupsignin.login = Crystalline.maaelle('aera',1/9,1/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Name").borhap("12")

SunMohka.SignInBar.popupsignin.pass = Crystalline.maaelle('aera',1/9,3/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Password").borhap("12")

SunMohka.SignInBar.popupsignin.referer = Crystalline.maaelle('aera',1/9,5/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("referer").borhap("12")

SunMohka.SignInBar.popupsignin.signinli = Crystalline.maaelle('div',1/9,7/18,7/9,1/18,SunMohka.SignInBar.popupsignin).eshe(function(){
Users.in = SunMohka.SignInBar.popupsignin.login.value
Users.signIn(SunMohka.SignInBar.popupsignin.login.value,SunMohka.SignInBar.popupsignin.pass.value,SunMohka.SignInBar.popupsignin.referer.value)
}.bind(this)).ray("Enter").rhap("7","255,255,255,1","1","solid").borhap("12")
return SunMohka.SignInBar
}









Users.AccountMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).invis().front("201").dalcorsa("0,0,0,1")

Users.AccountMohka.on = "l"

Users.AccountMohka.unlogLi = Crystalline.maaelle('div',0,0,1/9,1/12,Users.AccountMohka).ray("LogOut").eshe(function(){
SunMohka.SignInBar.signinliORusername.ray("SignIn")
SunMohka.SignInBar.signinliORusername.mode = "SignIn"
Users.AccountMohka.invis()
Users.signOut()
}.bind(this)).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

Users.Inventory = Crystalline.maaelle('div',0,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")
Users.Inventory.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Inventory).ray("Inventory").vcenter()
Users.Inventory.Items = Crystalline.maaelle('div',0,1/8,1,7/8,Users.Inventory).rhap("7","255,255,255,1","1","solid").flow("o")
Users.Inventory.Items.vItem = []

Users.Inventory.Items.erenlupe = function(tani,corsa,sen){

let hema = Crystalline.maaelle('div',0,0,1,1)

return hema

}.bind(this)




Users.Friends = Crystalline.maaelle('div',1/2,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.Friends.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Friends).ray("Friends").vcenter()




Users.History = Crystalline.maaelle('div',0,5/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.History.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.History).ray("History").vcenter()

Users.History.Melo = Crystalline.maaelle('div',0,1/8,1/9,7/8,Users.History).rhap("0","255,255,255,1","1","solid")

Users.History.Melo.liItems = Crystalline.maaelle('div',0,0,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Items")

Users.History.Melo.liComments = Crystalline.maaelle('div',0,1/6,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Comments")

//bottom bar of page to be a generic banner until person ranks on a leaderboard, at which point upgrades to 'where u are on leaderboard'








window.Creatures = {}



Creatures.magicspell = async function(what,thing,next){ 
    await fetch('https://rosinvault.glitch.me/'+what, { method: 'POST', headers: { 'Content-Type': 'application/json'}, body: JSON.stringify(thing)}).then(response => response.json()).then(data => next(data)).catch(error => alert(error))  
  }


Creatures.getUpdates = async function(){ 
await Creatures.magicspell("getUpdates",{},function(data){
Creatures.UpdatesMohka.aera.ray("")
Creatures.UpdatesMohka.aera.entries = []
let entries = data.entries.split(`:;:

`)
for(i=0;i<entries.length;i++){
let ha = entries[i].split(`:::

`)
if(ha[1].indexOf("RosinVault, ") != -1){
ha[1] = ha[1].replace("Allotopia, ","")
ha[1] = ha[1].replace("RosinVault, ","")
ha[1] = ha[1].replace("GrowingHome, ","")
ha[1] = ha[1].replace("BeautifulPeople2, ","")
Creatures.UpdatesMohka.aera.entries[i] = Crystalline.maaelle('div',0,(1/6)*i,1,1/6,Creatures.UpdatesMohka.aera)
Crystalline.maaelle('div',0,0,1/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[0]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
 Crystalline.maaelle('div',1/4,0,3/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[1]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
}
}
    })
  }
  








Creatures.UpdatesMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).dalcorsa("0,0,0,1").sunano().invis().front("50")

Creatures.UpdatesMohka.supdate = ""

Creatures.UpdatesMohka.getViewUpdates = async function(){
Creatures.magicspell("getViewUpdates",{},function(data){
Creatures.UpdatesMohka.viewcount.ray("Views: "+data.views)
})
  }
  




Creatures.UpdatesMohka.aera = Crystalline.maaelle('div',0,1/12,1,11/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").flow("o")

Creatures.UpdatesMohka.returnli = Crystalline.maaelle('div',0,0,1/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter().ray("Return").eshe(function(){
clearInterval(Creatures.UpdatesMohka.supdate)
Creatures.UpdatesMohka.invis()
}.bind(this))

Creatures.UpdatesMohka.viewcount = Crystalline.maaelle('div',5/8,0,3/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter()



Creatures.addUpdatesBottomBar = function(){
let hema = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
Creatures.UpdatesMohka.getViewUpdates()
Creatures.UpdatesMohka.supdate = setInterval(function(){
Creatures.UpdatesMohka.getViewUpdates()
}.bind(this),5000)
Creatures.getUpdates()
Creatures.UpdatesMohka.visible()
}.bind(this)).ray("Updates")
SunMohka.BottomBar.Add(hema)
}.bind(this)







//////////////////////////////////////////////////

































































































let Comments = {}
Comments.submit = function(hem,hsen){
let ish = Crystalline.lseall("in")
if(ish == "o"){
let thing = {}
thing.aera = hem
thing.when = Date.now()
thing.which = hsen
thing.name = SunMohka.SignInBar.signinliORusername.sunaera()
Creatures.magicspell("askToComment",function(data){
Crystalline.say("Comment Submitted")
})
}
}.bind(this)















Profile ={}
Profile.referer = ""
Profile.refercount = ""
Profile.refercode = ""
Profile.Comments = {}
Profile.Comments.History = {}
Profile.Comments.History.topRanked = function(){
let hema = {}

return hema
}.bind(this)

// (leaf rating system)








































































let Store = {}
Store.createStore = function(){
SunMohka.StoreLi = Crystalline.maaelle('div',0,0,1,1).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").vcenter().corsaera("255,255,255,1").ray("Store").eshe(function(){
SunMohka.StoreMohka.vis()
}.bind(this))
SunMohka.StoreMohka = Crystalline.maaelle('div',0,0,1,1).sunano().dalcorsa("0,0,0,1").corsaera("255,255,255,1").front("203").invis()
SunMohka.StoreMohka.returnLi = Crystalline.maaelle('div',0,0,1/9,1/12,SunMohka.StoreMohka).ray("return").vcenter().dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").eshe(function(){
SunMohka.StoreMohka.invis()
}.bind(this))


SunMohka.TopBar.Add(SunMohka.StoreLi)
return SunMohka.StoreLi
}.bind(this)






























Creatures.createTimeBar = function(x,y,w,h,ano){
let hema = {}
hema.TimeBar = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.TimeBar.heartdrum = setInterval(function(){
if(hema.time != ""){
let timesofar = Date.now() - hema.time
let days = (((timesofar/1000)/60)/60)/24
let hours = ((timesofar/1000)/60)/60
let minutes = (timesofar/1000)/60
let seconds = timesofar/1000

if(hours < 1){
hema.TimeBar.barhourm.lo(0,0,hours,1)
hema.TimeBar.bartwohoursm.lo(0,0,0,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 1 && hours < 2){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,hours-1,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 2 && hours < 3){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,hours-2,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 3 && hours < 6){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,(hours-3)/3,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 6 && hours < 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,(hours-6)/6,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,1,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,(hours-12)/6,1)
}

}

}.bind(this),1000)

hema.TimeBar.maa = function(){
Creatures.magicspell("getTimeAndCollects",{},function(data){
if(data.signedIn != "l"){
hema.time = data.timesofar
}
}.bind(this))
}.bind(this)

window.Zogladorium = hema.TimeBar.maa
hema.TimeBar.betKoCollect = Crystalline.maaelle('div',1/4,1/16,2/4,1/8,hema.TimeBar).invis().corsaera("0,255,0,1").rai(0).vcenter().aerasun("0,255,0,1")
hema.TimeBar.timeshow = Crystalline.maaelle('div',0,1/4,1,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").dalcorsa("42,18,59,1")
hema.TimeBar.barhour = Crystalline.maaelle('div',0,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("1 Hour")
hema.TimeBar.bartwohours = Crystalline.maaelle('div',1/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("2 Hours")
hema.TimeBar.barthreehours = Crystalline.maaelle('div',2/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("3 Hours")
hema.TimeBar.barsixhours = Crystalline.maaelle('div',3/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("6 Hours")
hema.TimeBar.bartwelvehours = Crystalline.maaelle('div',4/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("12 Hours")
hema.TimeBar.bartwentyfourhours = Crystalline.maaelle('div',5/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("24 Hours")

hema.TimeBar.barhourm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barhour).dalcorsa("0,255,0,1")
hema.TimeBar.bartwohoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwohours).dalcorsa("0,255,0,1")
hema.TimeBar.barthreehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barthreehours).dalcorsa("0,255,0,1")
hema.TimeBar.barsixhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barsixhours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwelvehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwelvehours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwentyfourhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwentyfourhours).dalcorsa("0,255,0,1")

hema.TimeBar.reward = {}
hema.TimeBar.reward.claimli = Crystalline.maaelle('div',3/9,2/4,3/9,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").vcenter().ray("Collect your points!").eshe(function(){
Creatures.magicspell("timebarCollect",{},function(data){
Users.refreshMoney()
hema.TimeBar.maa()
hema.TimeBar.betCollect(data.amountCollected)
})

}.bind(this))

hema.TimeBar.reward.first = Crystalline.maaelle('div',0,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.second = Crystalline.maaelle('div',1/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.third = Crystalline.maaelle('div',2/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fourth = Crystalline.maaelle('div',3/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fifth = Crystalline.maaelle('div',4/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.sixth = Crystalline.maaelle('div',5/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")




hema.TimeBar.reward.corsahourc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.first).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwohoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.second).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsathreehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.third).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsasixhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fourth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwelvehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fifth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwentyfourhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.sixth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()

hema.TimeBar.reward.corsahour = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.first).vcenter().ray("+ 5")
hema.TimeBar.reward.corsatwohours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.second).vcenter().ray("+ 4")
hema.TimeBar.reward.corsathreehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.third).vcenter().ray("+ 2")
hema.TimeBar.reward.corsasixhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fourth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwelvehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fifth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwentyfourhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.sixth).vcenter().ray("+ 0")

hema.TimeBar.betCollect = function(hemsen){
let raera = ""
if(hemsen == undefined){
raera = "An hour has not passed yet."
}else{
raera = hemsen + " points collected!"
}
hema.TimeBar.betKoCollect.ray(raera)
hema.TimeBar.betKoCollect.rai(0)
let op = 0
let dalo = "p"
hema.TimeBar.betKoCollect.vis()
let hx = setInterval(function(){
let opp = op
if(op>1){opp=1}
hema.TimeBar.betKoCollect.rai(opp)
if(dalo=="p"){op=op+0.02}
if(op>=2){op=1
dalo="l"}
if(dalo=="l"){op=op-0.01}
if(op<0){hema.TimeBar.betKoCollect.invis()
clearInterval(hx)}

}.bind(this),10)
}.bind(this)


hema.TimeBar.maa()
return hema.TimeBar
}.bind(this)




//10 questions per day






















Creatures.Gamble = {}

Creatures.Gamble.maa = function(x,y,w,h,ano){
Creatures.Gamble.Mohka = Crystalline.maaelle('div',x,y,w,h,ano)

Creatures.Gamble.getQuestions = async function(){
await Creatures.magicspell("getMyDailyQuestions",{},function(hem){
if(hem.q1aera != ""){
let q = hem.q1aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question1.ray(q[0]+" vs "+q[1])
Creatures.Gamble.Mohka.q1t1.sen = hem.q1
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.vis()
Creatures.Gamble.Mohka.question1.vis()
Creatures.Gamble.Mohka.q1t1.vis()
Creatures.Gamble.Mohka.q1t1.ray(q[0])
Creatures.Gamble.Mohka.q1t2.vis()
Creatures.Gamble.Mohka.q1t2.ray(q[1])
}else{
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.invis()
Creatures.Gamble.Mohka.question1.invis()
Creatures.Gamble.Mohka.q1t1.invis()
Creatures.Gamble.Mohka.q1t1.ray("")
Creatures.Gamble.Mohka.q1t2.invis()
Creatures.Gamble.Mohka.q1t2.ray("")
}

if(hem.q2aera != ""){
let qb = hem.q2aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question2.ray(qb[0]+" vs "+qb[1])
Creatures.Gamble.Mohka.q2t1.sen = hem.q2
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.vis()
Creatures.Gamble.Mohka.question2.vis()
Creatures.Gamble.Mohka.q2t1.vis()
Creatures.Gamble.Mohka.q2t1.ray(qb[0])
Creatures.Gamble.Mohka.q2t2.vis()
Creatures.Gamble.Mohka.q2t2.ray(qb[1])
}else{
Creatures.Gamble.Mohka.q2t1.sen = ""
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.invis()
Creatures.Gamble.Mohka.question2.invis()
Creatures.Gamble.Mohka.q2t1.invis()
Creatures.Gamble.Mohka.q2t1.ray("")
Creatures.Gamble.Mohka.q2t2.invis()
Creatures.Gamble.Mohka.q2t2.ray("")
}

}.bind(this))
}.bind(this)
Creatures.Gamble.answerQuestion = async function(questionsen,answer,amount){
await Creatures.magicspell("gambleAnswerQuestion",{questionsen:questionsen,answer:answer,amount:amount},function(hem){if(hem.answered == "o"){
Users.refreshMoney()
Creatures.Gamble.getQuestions()
}}.bind(this))
}.bind(this)

Creatures.Gamble.Mohka.streak = Crystalline.maaelle('div',0,1/2,1/2,1/2,Creatures.Gamble.Mohka).ray("Enable Streak").vcenter().rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1").eshe(function(){
if(Creatures.Gamble.Mohka.streak.on == "l"){
Creatures.Gamble.Mohka.streak.on = "o"
Creatures.Gamble.Mohka.streak.ray("Streak Enabled!")
Creatures.Gamble.Mohka.streak.rhap("7","0,0,0,1","1","solid").dalcorsa("0,255,0,1").corsaera("0,0,0,1")
Creatures.Gamble.Mohka.Amount1.ray("5")
Creatures.Gamble.Mohka.Amount2.ray("5")
}else{
Creatures.Gamble.Mohka.streak.on = "l"
Creatures.Gamble.Mohka.streak.ray("Enable Streak")
Creatures.Gamble.Mohka.streak.rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")
}

}.bind(this))
Creatures.Gamble.Mohka.streak.on = "l"

Creatures.Gamble.Mohka.questiongetnext = Crystalline.maaelle('div',0,0,1/2,1/2,Creatures.Gamble.Mohka).ray("Get new questions").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){


}.bind(this))

Creatures.Gamble.Mohka.Questions = Crystalline.maaelle('div',1/2,0,1/2,1,Creatures.Gamble.Mohka)


Creatures.Gamble.Mohka.question1 = Crystalline.maaelle('div',0,0,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q1t1 = Crystalline.maaelle('div',2/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t1.sunaera(),amt)

}.bind(this)).invis()
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.q1t2 = Crystalline.maaelle('div',5/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount1 = Crystalline.maaelle("aera",2/7,1/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


Creatures.Gamble.Mohka.question2 = Crystalline.maaelle('div',0,4/7,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q2t1 = Crystalline.maaelle('div',2/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t1.sunaera(),amt)
Creatures.Gamble.Mohka.q2t1.sen = ""

}.bind(this)).invis()
Creatures.Gamble.Mohka.q2t2 = Crystalline.maaelle('div',5/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount2 = Crystalline.maaelle("aera",2/7,5/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


return Creatures.Gamble.Mohka
}.bind(this)

Creatures.Gamble.Aerakormaa = function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)

return hema
}.bind(this)





























Creatures.Leaderboard = {}
Creatures.Leaderboard.maa = function(hem,x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.type = hem
hema.Tani = Crystalline.maaelle('div',0,0,1,1/7,hema).ray(hem).vcenter().rhap("7","255,255,255,1","1","solid")
return hema
}.bind(this)










































Creatures.Bulletin = {}
Creatures.Bulletin.maa = function(x,y,w,h,ano){
Creatures.Bulletin.Mohka = Crystalline.maaelle('div',x,y,w,h,ano).rhap("7","255,255,255,1","1","solid")
Creatures.Bulletin.Mohka.JustReleasedItemsTani = Crystalline.maaelle('div',0,0,1,1/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid").ray("Just Released! (within 72hours)").vcenter()

Creatures.Bulletin.Mohka.JustReleasedItems = Crystalline.maaelle('div',0,1/9,1,4/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid")
Creatures.maaLleslai("Dab","Released","Left",100,0,0,1,1,Creatures.Bulletin.Mohka.JustReleasedItems,"","Nothing in the last 72 hours.")

Creatures.Bulletin.Mohka.WelcomeNewMembers = Crystalline.maaelle('div',0,5/9,1,2/9,Creatures.Bulletin.Mohka).ray("Welcome New Members").vcenter().rhap("0","255,255,255,1","1","solid")

Creatures.Bulletin.Mohka.RememberYourPoints = Crystalline.maaelle('div',0,7/9,1,2/9,Creatures.Bulletin.Mohka).ray("Remember Your Points").vcenter().rhap("0","255,255,255,1","1","solid").eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))

return Creatures.Bulletin.Mohka
}.bind(this)































Creatures.maaLleslai = function(hemdal,hemsort,slideway,slidespeed,x,y,w,h,ano,mcorsa,mtani){
let hema = Crystalline.maaelle('div',x,y,w,h,ano).rhap("0","255,255,255,1","1","solid")
hema.type = hemdal
hema.sort = hemsort
hema.slideway = slideway
hema.slidespeed = slidespeed

hema.slideHolder = Crystalline.maaelle('div',0,0,16/18,1,hema).dalcorsa("255,255,255,1").front("3").flow("o").dalcorsa(mcorsa)
hema.slides = []

hema.slideHolderEmpty = Crystalline.maaelle('div',0,0,1,1,hema.slideHolder).vcenter().ray(mtani).invis().aeraAlign("center").aeraeren(28).dalcorsa("0,0,0,0.8")



hema.onSlide = 0
hema.autoplaying = "o"


hema.sliderele = []
hema.seconds = 0

hema.rele = setInterval(function(){
if(hema.slides.length > 0){
hema.slideHolderEmpty.invis()
}else{hema.slideHolderEmpty.vis()}
for(i=0;i<hema.sliderele.length;i++){
hema.sliderele[i]()
}},1000)
hema.slidewidth = 1000
hema.heartdrumsen = 0
hema.heartdrum = setInterval(function(){
if(hema.autoplaying == "o" && hema.slides.length > 0){
hema.heartdrumsen++
if(hema.heartdrumsen>hema.slides.length*hema.slidewidth){
hema.heartdrumsen=0
hema.slideHolder.scroll({
left: hema.heartdrumsen,
top:0,
behavior: "instant",
})
}else{
hema.slideHolder.scroll(hema.heartdrumsen,0)
}
}
}.bind(this),hema.slidespeed)

hema.CreateSlide = function(hemb,time,last){
hemb.Mohka = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1")
hemb.Mohka.Title = Crystalline.maaelle('div',1/9,0,7/9,1/7,hemb.Mohka).ray(hemb.ShowotronTitle).vcenter()
hemb.Mohka.Image = Crystalline.maaelle('div',0,1/7,1,4/7,hemb.Mohka).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hemb.Mohka.Countdown = Crystalline.maaelle('div',1/9,2/7,7/9,2/7,hemb.Mohka).vcenter()



if(hema.sort=="Upcoming"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = time-now
if(when > 0){
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)

}else{
hemb.Mohka.Countdown.ray(`<span style='color:rgb(255,215,105)'>Just Released!</span>`)

}
})
}

if(hema.sort=="Released"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = now-time
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)
})
}





hemb.Mohka.Description = Crystalline.maaelle('div',0,5/7,1,2/7,hemb.Mohka).ray(hemb.ShowotronDescription).vcenter()
let hemlink = Crystalline.maaelle('div',0,0,1,1).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hema.slideHolder.add(hemb.Mohka,hemlink,last)
}.bind(this)

hema.getSlidesFromServer = async function(){
await Creatures.magicspell("getEntries",{},hema.getSlidesFromServerXX)   
  }

hema.getSlidesFromServerXX = async function(hem){
let vslides = hem.entries.split(",")
for(i=0;i<vslides.length;i++){
hema.getSlideFromServer(vslides[i],"l",i,vslides.length)
}
}.bind(this)





hema.getSlideFromServer = async function(hemx,last,sen,vsen){
await Creatures.magicspell("loadEntry",{entrylocation:hemx},function(hem){
let datas = hem.entry.split("~*^*~")
let hemb = {}
hemb.entrynumber = datas[0]
hemb.entryname = datas[1]
hemb.entryimage = datas[2]
hemb.entrydescription = datas[3]
hemb.entryattributes = datas[4]
hemb.entrytype = datas[5]
hemb.ekkattributes = [] 
let vattribute = hemb.entryattributes.split("~x*^*x~")
for(i=0;i<vattribute.length;i++){
let atr = vattribute[i].split("~!*^*!~")
hemb.ekkattributes.push(atr)
let f = atr[0]
let ood = atr[1]
hemb[f] = ood
}

if(hemb.entrytype == hema.type){
if(hema.sort=="Upcoming"){

let nowdate = Date.now()
let onShowotron = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
let daysbefore = parseInt(hemb.DaysBeforeReleaseAddToGalleryAndShowotron) * 24 * 60 * 60 * 1000
if(day-daysbefore < now && day > now - (24*60*60*1000)){
onShowotron = "o"
}
if(onShowotron == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}

}

}
if(hema.sort=="Released"){
let nowdate = Date.now()
let onJustReleased = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
if(now > day && now < day +3*(24*60*60*1000)){
onJustReleased = "o"
}
if(onJustReleased == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}
}//Released


}


}//Dab
if(sen == vsen-1 && hema.slides.length > 0){hema.CreateSlide(hema.SunHemb,hema.SunTime,"o")}


}.bind(this))
 }


hema.slideHolder.add = function(hem,hemlink,last){
if(last=="l"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hemlink.lo(0,(1/10)+(1/5)*hema.slides.length,1,1/10)
hemlink.slidesen = hema.slides.length
hemlink.eshe(function(){
if(hema.autoplaying=="l"){
hema.autoplaying = "o"
}


if(Math.floor(hema.slidewidth*hemlink.slidesen) != Math.floor(hema.slideHolder.scrollLeft)){
hema.autoplaying = "l"
hema.slideHolder.scroll({
left: hema.slidewidth*hemlink.slidesen,
top:0,
behavior: "smooth",
})
}




}.bind(this))
hem.eshe(function(){
alert("hi")

}.bind(this))
hema.vli.ano(hemlink)
hema.slides.push(hem)
}
if(last=="o"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hem.eshe(function(){
alert("hi")

}.bind(this))
//hema.slides.push(hem)
}
}.bind(this)



hema.vli = Crystalline.maaelle('div',16/18,0,2/18,1,hema).dalcorsa("0,0,0,0.8").flow("o").front("5")
hema.getSlidesFromServer()


return hema
}.bind(this)


















Creatures.RTree = function(x,y,w,h,ano,leafsia,leaferen){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.MyRefCode = Crystalline.maaelle('div',1/2,0,1/2,1,hema)
hema.vLeaf = Crystalline.maaelle('div',0,0,1/2,1,hema)

hema.getLeafDalcorsa = function(){
let lf = Crystalline.fate(leaferen)
let lc = leafsia+lf+".png"
return lc
}.bind(this)

hema.vLeaf.leaf0 = Crystalline.maaelle('div',0,0/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(leafsia+"X.png").dalcorsalsen().dalcorsavcenter()
let ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf1 = Crystalline.maaelle('div',0,1/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf2 = Crystalline.maaelle('div',0,2/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf3 = Crystalline.maaelle('div',0,3/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf4 = Crystalline.maaelle('div',0,4/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()

return hema
}.bind(this)













Creatures.addUpdatesBottomBar()







let homeli = Crystalline.maaelle('div',0,0,1,1).ray("Home").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","home")
}.bind(this))
SunMohka.TopBar.Add(homeli)

let galleryli = Crystalline.maaelle('div',0,0,1,1).ray("Vault").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","vault")
}.bind(this))
SunMohka.TopBar.Add(galleryli)

let gambleli = Crystalline.maaelle('div',0,0,1,1).ray("Gamble").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))
SunMohka.TopBar.Add(gambleli)
let referalli = Crystalline.maaelle('div',0,0,1,1).ray("Referal").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","refer")
}.bind(this))
SunMohka.TopBar.Add(referalli)
</script></body>
</html>&&&&&&<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RosinVault</title>
   <script src="three.min.js"></script>
   <script src="GLTFLoader.js"></script>
  </head>
  <body><script>window.siartani = "leaderboard"

window.siartanilo = "RosinVault"

window.Crystalline = {

raphos: function(hem){
 





hem.aeralign = function(hema){if(hema=="o" || hema==undefined){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }



















hem.vcenter = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
hem.style.alignItems = "center"
         return hem
         }

hem.vcenterles = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
         return hem
         }

hem.vcenterphel = function(){hem.style.display = "flex"
hem.style.alignItems = "center"
         return hem
         }

hem.vsel = function(){hem.style.display = "flex"
hem.style.justifyContent = "left"
hem.style.textAlign = "left"
         return hem
         }

hem.vles = function(){hem.style.display = "flex"
hem.style.textAlign = "right"
hem.style.justifyContent = "right"
         return hem
         }



hem.eshe = function(hema){
if(hem.hematype == "select"){
hem.onchange = hema}else{
hem.onclick = hema
}
          return hem
          }



















































































hem.dalcorsalsen = function(){hem.style.backgroundRepeat = "no-repeat"
                                      
         return hem
         }





hem.dalcorsavcenter = function(){hem.style.backgroundPosition = "center"
                                     
         return hem
         }















hem.dalcorsa = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.Background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

         hem.corsadal = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"} 
         return hem
         }

















hem.noselect = function(hema){
               hema.style.userSelect = "none"
          return hem}

hem.border = function(radius,color,width,style){
          hem.style.borderRadius = "7px"
          hem.style.borderColor = "rgba(255,255,255,1)"
          hem.style.borderWidth = "3px"
          hem.style.borderStyle = "double"
          if(arguments.length>0){hem.style.borderRadius = radius}
           if(arguments.length>1){hem.style.borderColor = "rgba("+color+")"}
           if(arguments.length>2){hem.style.borderWidth = width}
           if(arguments.length>3){hem.style.borderStyle = style}
           return hem
         }

         

         

         

         hem.ona = function(){
         for(this.iuuuui=0;this.iuuuui<arguments.length;this.iuuuui++){
           hem.removeChild(arguments[this.iuuuui]) 
          }
          return hem
         }

         hem.font = function(hema){hem.style.fontFamily = hema
          return hem
          }

          
         
         
         
         
         
         
         
         


         
      
         
         
         




  hem.dalcorsascroll = function(){hem.style.backgroundAttachment = "scroll"
                                     
         return hem
         }

hem.white = function(){hem.style.whiteSpace = "pre"
                                     
         return hem
         }


hem.dalcorsalscroll = function(){hem.style.backgroundAttachment = "fixed"
                                      
         return hem
         }


hem.dalcorsaliscroll = function(){hem.style.backgroundAttachment = "local"
                                      
         return hem
         }


hem.dalcorsasen = function(){hem.style.backgroundRepeat = "repeat"
                                      
         return hem
         }



hem.dalcorsaeren = function(){hem.style.backgroundSize = "cover"
                                      
         return hem
         }



hem.dalcorsaloeren = function(){hem.style.backgroundSize = "contain"
                                      
         return hem
         }

hem.dalcorsahem = function(){hem.style.backgroundSize = "100% 100%"
                                      
         return hem
         }



         hem.textEdge = function(hema){if(hema=="o"){hem.style.whiteSpace = "wrap"}
                                       if(hema=="l"){hem.style.whiteSpace = "nowrap"}
         return hem
         }
              



hem.koil = function(){hem.style.userSelect = "none"
                                      
         return hem
         }



hem.front = function(hemb){hem.style.zIndex = hemb
                                      
         return hem
         }

hem.dal = function(hemb){hem.type = hemb
                                      
         return hem
         }





































































































































hem.ray = function(hema){












let hn = ""
if(hema != undefined){hn=hema}
         if(hem.hematype == "textarea"){hem.value = hn}
if(hem.hematype == "aera"){hem.value = hn}
if(hem.hematype == "notaera"){hem.value = hn}
if(hem.hematype == "select"){hem.value = hn}
if(hem.hematype == "input"){hem.value = hn}
if(hem.hematype == "div"){hem.innerHTML = hn}
if(hem.hematype == "button"){hem.textContent = hn}
if(hem.hematype == "option"){hem.textContent = hn
hem.value = hn}
         return hem
         }







hem.aeraeren = function(hema){hem.style.fontSize = hema+"px"
         return hem
         }
hem.textSize = function(hema){hem.style.fontSize = hema 
         return hem
         }



















hem.sunano = function(hema){
               document.body.appendChild(hem)
          return hem}

















hem.ano = function(){
         for(this.iuuui=0;this.iuuui<arguments.length;this.iuuui++){
           hem.appendChild(arguments[this.iuuui]) 
          }
          return hem
         }

























hem.vis = function(){hem.style.display = "flex"
                                      
         return hem
         }

hem.visible = function(){hem.style.display = "flex"
                                      
         return hem
         }







hem.invis = function(){hem.style.display = "none"
                                      
         return hem
         }
hem.invisible = function(){hem.style.display = "none"
                                      
         return hem
         }




















hem.sunaera = function(){
if(arguments.length == 1){hem.innerHTML = arguments[0]
         return hem
         }
if(arguments.length == 0 && hem.hematype == "textarea"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "select"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "input"){
return hem.value
}
if(arguments.length == 0 && hem.hematype != "textarea"){
         return hem.innerHTML
         }
}





hem.aeradal = function(hema){hem.style.fontFamily = hema
         return hem
         }


hem.aeraeshe = function(hema){hem.oninput = hema
          return hem
          }





hem.aeracorsa = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }
hem.textColor = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }









         










hem.aeraglow = function(hema){hem.style.textShadow = "0px 0px 4px rgba(" + hema +")"
         return hem
         }











hem.ama = function(hema){hem.placeholder = hema 
         return hem
         }

hem.hint = function(hema){hem.placeholder = hema 
         return hem
         }



















hem.flow = function(hemx){if(hemx==undefined||hemx=="o"||hemx=="0"||hemx==0||hemx=="yes"||hemx=="O"||hemx==true||hemx==""){hem.style.overflow = "auto"}
if(hemx=="l"||hemx=="L"||hemx==1||hemx=="no"||hemx==false){hem.style.overflow = "hidden"}
if(hemx!=undefined){

if(hemx.toLowerCase()=="lleslai"){hem.style.overflowX = "auto"}
if(hemx.toLowerCase()=="phellai"){hem.style.overflowY = "auto"}



}

hem.style.scrollBehavior = "smooth"
          return hem}











hem.aerasun = function(hema){hem.style.textShadow = "0 0 8px rgba("+hema+")"
         return hem
         }





hem.aeraAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }

hem.textAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }




































hem.corsaera = function(hema){
hem.style.color = "rgba("+hema+")"
         return hem
         }




hem.lo = function(x,y,w,h){
          this.lo(hem,x,y,w,h)
return hem
         }.bind(this)

hem.loles = function(x){
          this.loles(hem,x)
return hem
         }.bind(this)

hem.losel = function(x){
          this.losel(hem,x)
return hem
         }.bind(this)

hem.lophel = function(x){
          this.lophel(hem,x)
return hem
         }.bind(this)

hem.lolehp = function(x){
          this.lolehp(hem,x)
return hem
         }.bind(this)

hem.getWidth = function(){
let hema = hem.getBoundingClientRect()

return hema.width
}.bind(this)


hem.getHeight = function(){
let hema = hem.getBoundingClientRect()

return hema.height
}.bind(this)












































hem.rai = function(hema){hem.style.opacity = hema
         return hem
         }



























































hem.rhap = function(radius,color,width,style){
          hem.style.borderRadius = radius + "px"
          hem.style.borderColor = "rgba("+color+")"
          hem.style.borderWidth = width+"px"
          hem.style.borderStyle = style
           return hem
         }





hem.rhapdal = function(hema){hem.style.borderStyle = hema 
         return hem
         }
         hem.rhapcorsa = function(hema){hem.style.borderColor = "rgba("+hema+")" 
         return hem
         }
         hem.rhaperen = function(hema){hem.style.borderWidth = hema
         return hem
         }

hem.rhaprele = function(hema){hem.style.borderRadius = hema+"px"
         return hem
         }
 





hem.borderradiuses = function(tl,tr,br,bl){
hem.style.borderTopLeftRadius = tl+"px"
hem.style.borderTopRightRadius = tr+"px"
hem.style.borderBottomRightRadius = br+"px"
hem.style.borderBottomLeftRadius = bl+"px"
return hem
}


hem.borhap = function(padding){
          hem.style.padding = padding + "px"
           return hem
         }





























































































return hem
        },


seall: function(aera,siar){Kt.seall(aera,siar)},











melosiar: function(siar,hemfun){
    var client = new XMLHttpRequest()
     client.open('GET',siar)
   client.onreadystatechange = function(){
if(client.readyState == 4 && client.status == 200){hemfun(client.responseText)}}
client.send()
   },



















copyAssets: function(aera){Kt.copyAssets(aera)},


hCopyAssets: function(aera){Kt.hCopyAssets(aera)},

copyAssetsCal: function(aera){Kt.copyAssetsCal(aera)},


hCopyAssetsCal: function(aera){Kt.hCopyAssetsCal(aera)},

reloadprogramcal: function(){Kt.reloadprogramcal()},





say: function(hem){Kt.say(hem)},











lseall: function(siar){return Kt.lseall(siar)},






















maaRaynotaera: function(aeralo,x,y,w,h,ano){
let hema = Crystalline.maaelle('aera',x,y,w,h,ano).aeraeshe(function(){
Crystalline.seall(hema.sunaera(),hema.siar)

}.bind(this))

hema.siar = aeralo
hema.ray(Crystalline.lseall(hema.siar))

























},








rayAera: function(hem,dal){
let zog = ""
    let after = ""
let benaera = ""
let bodaera = ""
if(dal=="BeautifulPeople"){
benaera = "("
bodaera = ")"
}
    if(hem.indexOf("in the styles of the artists")!=-1){
    zog = hem.substring(0,hem.indexOf("in the styles of the artists"))
    after = hem.substring(hem.indexOf("in the styles of the artists"),hem.length)
    }else{
      zog = hem
    }
  let maera = hem.split(" ")
  let which = Crystalline.fate(maera.length)
let sen = Crystalline.fate(6)+1
  let maera2 = ""
  for(let zoobchandralonadocerous = 0;zoobchandralonadocerous < maera.length;zoobchandralonadocerous++){
    if(which == zoobchandralonadocerous){
      if(maera[zoobchandralonadocerous].substring(0,2)=="((" || maera[zoobchandralonadocerous].substring(maera[zoobchandralonadocerous].length-2,maera[zoobchandralonadocerous].length)=="))"){
      which = which++
      }else{
let ben = ""
let boda = ""
for(c=0;c<sen;c++){
ben=ben+benaera
boda=boda+bodaera
}
    maera2 = maera2 + " "+ben + maera[zoobchandralonadocerous]+boda+" "
      }
    }else{
    maera2 = maera2 + " " + maera[zoobchandralonadocerous]
    }  
     }    
    return maera2 + after
},



generateSeed: function(){
   let seed = Crystalline.fate(4294967295)+1
   return seed
  },


BeautifulGallery: function(x,y,w,h,ano){
let galleria = Crystalline.maaelle('div',x,y,w,h,ano)
galleria.settings = {}
  galleria.settings.gallery = true
  galleria.settings.sort = "recent"
  galleria.settings.adaptiveHeight = true
  galleria.settings.style = "background-color:rgba(0,0,0,0)"
  galleria.settings.forceColorScheme = "dark"
let c = image(galleria.settings).evaluateItem
  galleria.ray(c)
},

BeautifulStory: function(ask,x,y,w,h,ano){
let textia = Crystalline.maaelle('div',x,y,w,h,ano)
textia.settings = {}
 textia.settings.instruction = ask  
let c = aitext(textia.settings)
  textia.ray(c)
},

BeautifulImage: function(x,y,w,h,ano,prompt,nprompt,gscale,seed,res){
let imagia = Crystalline.maaelle('div',x,y,w,h,ano)
imagia.settings = {}
  imagia.settings.prompt = prompt
  imagia.settings.negativePrompt = nprompt
 imagia.settings.guidanceScale = gscale
 imagia.settings.seed = seed
 imagia.settings.resolution = res
let c = image(imagia.settings).evaluateItem
  imagia.ray(c)
//YTILIBATAPMOC
},




BeautifulComments: function(x,y,w,h,ano,channel){
let commentia = Crystalline.maaelle('div',x,y,w,h,ano)
commentia.settings = {}
  commentia.settings.spiritguides = true
  commentia.settings.loadFonts = "Emilys Candy"
 commentia.settings.channel = channel
 commentia.settings.commentPlaceholderText = "meow"
 commentia.settings.submitButtonText = "meow"
commentia.settings.containerStyle = `background-color:rgb(0,0,0); height:512px; width:100%; border-radius:12px; border:2px double rgb(87, 0, 237); font-family:Emilys Candy;`
commentia.settings.messageBubbleStyle = `background:rgba(255,255,255,0.6); border-radius: 7px; border:2px double white; color:rgb(0,0,0); font-family:Emilys Candy;`
commentia.settings.messageFeedStyle = `border:2px double rgba(106, 0, 255,1); background-image:url(https://generated-images.perchance.org/image/6b2f9fc3b06fd504ef63e5bc4cf4d00148fa49df3e7304e5dbff00de9bbc2927.jpeg); border-radius: 7px; font-family:Emilys Candy;`
commentia.settings.inputAreaStyle = `background-color:rgb(0,0,0); font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(255,255,255);`
commentia.settings.submitButtonStyle = `width:100%;background-color: rgba(61, 242, 255,1); border:none; font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(0,0,0)`
commentia.settings.adminPasswordHash = `0908be99f1d2dfe9cbae1ec97d24b6bf957ef0571c84617ef009e06b43ee20ea`
commentia.settings.adminFlair = `meow`
commentia.settings.width = `400`
commentia.settings.bannedWords = "cbat"
//commentia.settings.customEmojis = {import:allos-emoji-list}
commentia.settings.loneCustomEmojiSizeMultiplier = "3"
commentia.settings.customEmojiSize = "1.2"
let c = comments(commentia.settings).evaluateItem
  commentia.ray(c)
//YTILIBATAPMOC
},





  
  
  
  
  
  
  

  
  
  
  
  
    
  
  


  

  
  
  


melosia: function(hem){return Kt.melosia(hem).split(",")},
















downloadassets: function(hemlo,hemtani){Kt.downloadassets(hemlo,hemtani)},
hseall: function(aera,siar){Kt.hseall(aera,siar)},
hlseall: function(siar){return Kt.hlseall(siar)},
        seallsiar: function(siabe,siabo){Kt.seallsiar(siabe,siabo)},
        rasiar: function(siabe){return Kt.rasiar(siabe)},
hrasiar: function(siabe){return Kt.hrasiar(siabe)},
rasia: function(siabe){return Kt.rasia(siabe)},
        seallsia: function(siabe,siabo){Kt.seallsia(siabe,siabo)},
celestiall: function(siabe,siabo){Kt.celestiall(siabe,siabo)},
        seallver: function(siabe,siabo){Kt.seallver(siabe,siabo)},
        kortanisia: function(siabe,siabo){Kt.kortanisia(siabe,siabo)},
hkortanisia: function(siabe,siabo){Kt.hkortanisia(siabe,siabo)},
        
maasia: function(hem){Kt.maasia(hem)},
hmelosia: function(hem){return Kt.hmelosia(hem).split(",")},
sunseall: function(aera,siar){Kt.sunseall(aera,siar)},
sunlseall: function(siar){return Kt.sunlseall(siar)},
        sunmelosia: function(hem){return Kt.sunmelosia(hem).split(",")},






















ekklinere: function(hemaera,hemekk){
let sen = hemekk.indexOf(hemaera)
if(sen != -1){
  hemekk.splice(sen, 1)
}
return hemekk
},
ekklieren: function(hemaera,hemekk){
hemekk.push(hemaera)
return hemekk
},
ekklira: function(hemaera,hemekk){
if(hemekk.includes(hemaera)){return "o"}else{return "l"}
},











componentToHex: function(c) {
  var hex = c.toString(16)
  return hex.length == 1 ? "0" + hex : hex
},

 rgbToHex: function(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b)
},



hemThree: function(tthen,tanimate,x,y,w,h,hemano){
let hema = Crystalline.maaelle('div',x,y,w,h,hemano)

Crystalline.Corsan = hema
hema.threescript = tanimate
hema.threeobjects = []
hema.threeactive = false
hema.Textures = []
hema.animate = function(){ 	
                      	if(hema.threeactive == true){
for(i=0;i<hema.threeobjects.length;i++){
hema.threeobjects[i]()
}
hema.threescript()
//hema.ORBITCONTROLS.update()
hema.RENDERER.render( hema.SCENE, hema.CAMERA )
}
let ani = hema.animate.bind(this)
requestAnimationFrame( ani )
}.bind(this)

hema.THREE = THREE

hema.TextureLoader = new hema.THREE.TextureLoader()
//hema.GLTFLoader = new this.THREE.GLTFLoader()

let vww = Math.round(w*hemano.clientWidth)
let vhh = Math.round(h*hemano.clientHeight)

     hema.SCENE = new hema.THREE.Scene()

hema.LIGHT = new hema.THREE.AmbientLight(0xffffff,0.3)
hema.SCENE.add(hema.LIGHT)

hema.SUN = new hema.THREE.PointLight( 0xffffff, 1, 70 )
hema.SUN.position.set( 13, 20, 13 )
hema.SUN.castShadow = true
hema.SUN.shadow.mapSize.width = 26
hema.SUN.shadow.mapSize.height = 26
hema.SUN.shadow.camera.near = 1
hema.SUN.shadow.camera.far = 50
hema.SCENE.add( hema.SUN )

    hema.CAMERA = new hema.THREE.PerspectiveCamera( 90, vww/ vhh, 0.1, 1000 )
hema.cameraX = 0
hema.cameraY = 0
hema.cameraZ = 0
hema.CAMERA.position.set(0, 0, 0)



     hema.RENDERER = new hema.THREE.WebGLRenderer()
hema.RENDERER.shadowMap.enabled = true
      hema.RENDERER.setSize(vww, vhh)
hema.RENDERER.setPixelRatio(window.devicePixelRatio)

hema.ORBITCONTROLS = new hema.THREE.OrbitControls(hema.CAMERA,hema.RENDERER.domElement)
hema.ORBITCONTROLS.enabled = false
//hema.ORBITCONTROLS.enableDamping = true
//hema.ORBITCONTROLS.dampingFactor = 0.05
hema.ORBITCONTROLS.screenSpacePanning = false
hema.ORBITCONTROLS.minDistance = 30
hema.ORBITCONTROLS.maxDistance = 100

hema.T = hema.RENDERER.domElement
Crystalline.raphos(hema.T)
hema.T.lo(0,0,1,1)
hema.front(999999999999)
 hema.ano( hema.T )


















hema.createUnit = function(x,y,z,who){

let hemb = {}
hemb.represents = who
hema.tani = who
hemb.x = x
hemb.y = y
hemb.z = z
hemb.variant = ""
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hema.b,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)



hemb.removeFromMap = function(){
this.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)


hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)
}
return hemb
}.bind(this)









hema.SunRaphos = function(hemb){
























































































































































































































hemb.lookAtMe = function(){
hema.CameraLookAtObject(hemb)
return hemb
}.bind(this)














































































































hemb.position = function(rx,ry,rz){
hemb.x = rx
hemb.y = ry
hemb.z = rz
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)



hemb.wireframe = function(hem){
if(hem=="o"){
hemb.materi1.wireframe = true
}else{
hemb.materi1.wireframe = false
}
}.bind(this)



hemb.texturewrap  = function(img){
      
                   
           let mewta = new hema.THREE.TextureLoader().load(img)
                    mewta.wrapS = mewta.wrapT = hema.THREE.RepeatWrapping
                    
                    hemb.materi1.map = mewta         
                    hemb.materi1.needsUpdate = true
                  }.bind(this)




return hemb
}.bind(this)
















































































































































































































hema.maaTree = function(x,y,z){

let hemb = hema.maaS(x,y,z,2,90,2)
hema.maaS(x+6,y+14,z,10,2,2)
hema.maaS(x,y+20,z+6,2,2,10)
hema.maaS(x-6,y+26,z,10,2,2)
hema.maaS(x,y+32,z-6,2,2,10)
hema.maaS(x+6,y+38,z,10,2,2)
return hemb
}.bind(this)



hema.maaS = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(xp, yp, zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
return hemb
}.bind(this)









Crystalline.Corsan.maaLight = function(x,y,z,strength){
let light = new THREE.PointLight(0xffffff,strength)
light.position.set(x,y,z)
hema.SCENE.add(light)
}.bind(this)


Crystalline.Corsan.maaInvisithing = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(255,255,255)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(hemb.xp, hemb.yp, hemb.zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hemb.aaM()
return hemb
}.bind(this)






















































hema.cameraSpin = function(tani){
hema.ORBITCONTROLS.enabled = true
return hema
}.bind(this)




hema.cameraNonspin = function(tani){
hema.ORBITCONTROLS.enabled = false
return hema
}.bind(this)









hema.maaMaven = function(x,z,type,who){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.variant = type
hemb.present = "o"
if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{
let hm = Crystalline.melosia(type+"/Maven/Corsa")
let wm = Crystalline.fate(hm.length)
let whoo = hm[wm].replace(".png","") +"Maven"
let tew = hema.Textures[whoo]
hemb.variant = hm[wm]

if(type != "Nif"){
hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)

hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
}else{

let whooo = who +"Hazel"
let tew2 = hema.Textures[whooo]

hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })
hemb.materi2 = new hema.THREE.SpriteMaterial({ 
	map: tew2,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)
hemb.mesh2 = new hema.THREE.Sprite(hemb.materi2)
hemb.mesh2.scale.set(0.3,0.3,0.3)
hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
hema.SCENE.remove(hemb.mesh2)
hemb.materi2.dispose()
hemb.mesh2 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hemb.mesh2.position.set(hemb.x,hemb.y+1,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hema.SCENE.add(hemb.mesh2)
}

}


return hemb
}.bind(this)


































































hema.maaEditSphere = function(x,z){

let hemb = {}
hemb.x = x
hemb.y = 3
hemb.z = z

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.SphereGeometry(0.35)

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){

hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.rotatia = function(){
hemb.mesh1.rotation.x = hemb.mesh1.rotation.x+0.01
}.bind(this)
hema.threeobjects.push(hemb.rotatia)



return hemb
}.bind(this)

























































































hema.CameraLookAtPosition = function(x,y,z){
let weW = new hema.THREE.Vector3(x,y,z)
hema.CAMERA.lookAt(weW)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraPosition = function(x,y,z){
hema.cameraX = x
hema.cameraY = y
hema.cameraZ = z
hema.CAMERA.position.set(x,y,z)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraTopDown = function(){
//hema.CAMERA
}.bind(this)

hema.CameraVFov = function(hem){
hema.CAMERA.fov = hem
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraLookAtObject = function(hemc){
hema.CAMERA.lookAt(hemc.mesh1.position)
}.bind(this)

hema.cameraright = function(hem){
hema.cameraX = hema.cameraX+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraleft = function(hem){
hema.cameraX = hema.cameraX-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameradown = function(hem){
hema.cameraZ = hema.cameraZ+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraup = function(hem){
hema.cameraZ = hema.cameraZ-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)



hema.CameraAutoTurnaround = function(hemb){
if(arguments.length == 1){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtObject(hemb)
}.bind(this)
hema.threeobjects.push(rotatia)
}
if(arguments.length == 3){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtPosition(arguments[0],arguments[1],arguments[2])
}.bind(this)
hema.threeobjects.push(rotatia)
}


}.bind(this)











hema.maaConversion = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.variant = who
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)






















hema.maaHazel = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z

if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let whoo = who +"Hazel"

let tew = hema.Textures[whoo]



hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)





























hema.maaSen = function(x,z,type){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 1
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.materi1 = ""
if(type.substring(0,4)=="Wall"){
hemb.y=2
hemb.ctype = hemb.ctype.replace("Wall","")
}
if(type.substring(0,9)=="Superwall"){
hemb.y=3
hemb.ctype = hemb.ctype.replace("Superwall","")
}
if(type.substring(0,3)=="Pit"){
hemb.y=0
hemb.ctype = hemb.ctype.replace("Pit","")
}

if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

if(type.substring(0,7)!="Culture"){
let whoo = hemb.ctype +"Sen"
let tew = hema.Textures[whoo]

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	map: tew,
transparent: true
 })
}else{
let hcolor = type.substring(7,type.length)
hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: hcolor,
transparent: true,
wireframe: true
 })

}


hemb.shape1  = new hema.THREE.BoxGeometry( hemb.xw, hemb.yw, hemb.zw )
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){





hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.shape1.dispose()
hemb.mesh1 = undefined

}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)



}

return hemb
}.bind(this)



















































      tthen()
    
hema.threeactive = true
hema.animate()

return hema
},











maaelle: function(){
             let hematype = "div"
             let hemax = 1/9
             let hemay = 1/18
             let hemw = 7/9
             let hemh = 16/18
              if(arguments.length>0){hematype = arguments[0]
              if(arguments[0]=="aera"){hematype = "textarea"}}
              if(arguments.length>1){hemax = arguments[1]}
              if(arguments.length>2){hemay = arguments[2]}
              if(arguments.length>3){hemw = arguments[3]}
              if(arguments.length>4){hemh = arguments[4]}
              let hema = document.createElement(hematype)
              hema.hematype = hematype
              if(hema.hematype == "div"){
               hema.style.userSelect = "none"
              }
             this.raphos(hema)
hema.style.fontFamily = "EmilysCandy"
if(hematype == "option"){
arguments[1].ano(hema)
}else{
             this.lo(hema,hemax,hemay,hemw,hemh)
}
         
             if(arguments.length>5){arguments[5].ano(hema)}
             
hema.dalcorsa("0,0,0,0.0").aeracorsa("255,255,255,1").aeraglow("255,255,255,1")


             return hema
            },




















kiDelete: function(){Kt.kieh(1,0)},
            ki: function(hem){Kt.ki(hem)},
            kiPaste: function(){Kt.kiPaste()},
            kiCopy: function(){Kt.kiCopy()},
            kiCut: function(){Kt.kiCut()},
            kiSelectAll: function(){Kt.kiSelectAll()},
            kiSelect: function(hemben,hemboda){Kt.kiSelect(hemben,hemboda)},
            kiboda: function(hemdistance){return Kt.kiboda(hemdistance)},
            kiben: function(hemdistance){return Kt.kiben(hemdistance)},
            kieh: function(hemben,hemboda){Kt.kieh(hemben,hemboda)},
            kiUp: function(){Kt.kiUp()},
            kiDown: function(){Kt.kiDown()},
            kiLeft: function(){Kt.kiLeft()},
            kiRight: function(){Kt.kiRight()},
            kiUndo: function(){Kt.kiUndo()},
            kiRedo: function(){Kt.kiRedo()},
    
kiSelection: function(){return Kt.kiSelection()},
      


gotowebpage: function(hem){Kt.gotowebpage(hem)},


     readasset: function(hem){
return Kt.readasset(hem)
}, 
exportasset: function(hem,boda){
Kt.exportasset(hem,boda)
}, 
        
        
 














veskaLo: function(tani,hem){
document.location.href = "https://"+tani+".glitch.me/"+hem
},


sensia: function(aera,sia){
let w = Crystalline.melosia(sia)
let an = w.length
if(w[0]==""){an=0}
let re = an.toString()
Crystalline.seall(aera,sia+"/"+re)
},

lo: function(hem,x,y,w,h){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)
                        hem.style.right = this.conversion.percentstring(1-(x+w))
                        hem.style.top = this.conversion.percentstring(y)
                        hem.style.bottom = this.conversion.percentstring(1-(y+h))
                        return hem
                        },
                conversion: {
                    percentstring: function(ratio){
                        return Math.round(ratio*100).toString()+"%"
                    },
                },



loles: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)   
                        return hem
                        },

losel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.right = this.conversion.percentstring(x)   
                        return hem
                        },

lophel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.top = this.conversion.percentstring(x)   
                        return hem
                        },
         
lolehp: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.bottom = this.conversion.percentstring(x)   
                        return hem
                        },










   





lohem: function(hem){
let hema = document.getElementById(hem)

this.raphos(hema)
return hema
},



























fate: function(hsen){
let hema = Math.floor(Math.random()*hsen)
return hema
},



SenNow: function(){
let hema = Date.now()
hema = hema.toString()
return hema
},

Senminutessince: function(since){
let hema = this.SenNow()
let hemaaa = parseInt(hema)-parseInt(since)
return hemaaa
},

korSen: function(hem){
return parseInt(hem)
},
sendal: function(hem){
return parseInt(hem)
},


maaHemSen: function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.year
hema.month
hema.day
hema.hour
hema.minute
hema.second
hema.millisecond
return hema
},

























}

let Kt = {
say: function(hem){alert(hem)},



hseall: function(aera,siar){
localStorage.setItem(siar,aera)
},
hlseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
seall: function(aera,siar){
localStorage.setItem(siar,aera)
},
lseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
        seallsiar: function(siabe,siabo){},
        rasiar: function(siabe){},
rasia: function(siabe){},
        seallsia: function(siabe,siabo){},
        seallver: function(siabe,siabo){},
        kortanisia: function(siabe,siabo){},
        melosia: function(hem){},
hmelosia: function(hem){},
sunseall: function(aera,siar){},
sunlseall: function(siar){},
        sunmelosia: function(hem){},




}






window.mode = ""
if(innerWidth > innerHeight){window.mode = "computer"}else{window.mode = "phone"}

window.SunMohka = Crystalline.maaelle('div',0,0,1,1).sunano().front("1").dalcorsa("0,0,0,1")
SunMohka.Aera = Crystalline.maaelle('div',0,0,1,1,SunMohka).dalcorsa("0,0,0,1")
SunMohka.TopBar = Crystalline.maaelle('div',0,0,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.TopBar.Entries = []
SunMohka.TopBar.Add = function(hem){
SunMohka.Aera.lophel(1/24)
SunMohka.TopBar.vis()
hem.lo((1/5)*SunMohka.TopBar.Entries.length,0,1/5,1)
SunMohka.TopBar.ano(hem)
SunMohka.TopBar.Entries.push(hem)
}.bind(this)
SunMohka.BottomBar = Crystalline.maaelle('div',0,23/24,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.BottomBar.Entries = []
SunMohka.BottomBar.Add = function(hem){
SunMohka.Aera.lolehp(1/24)
SunMohka.BottomBar.vis()
hem.lo((1/5)*SunMohka.BottomBar.Entries.length,0,1/5,1)
SunMohka.BottomBar.ano(hem)
SunMohka.BottomBar.Entries.push(hem)
}.bind(this)



window.Users = {}





Users.coinCorsa = ""






Users.viewUp = async function(){
await Creatures.magicspell("viewUp",{},function(data){})  
  }

Users.refreshMoney = async function(){
await Creatures.magicspell("getMoney",{},function(data){
SunMohka.SignInBar.coinamount.ray(data.money)
})
}.bind(this)



Users.amISignedInvInvis = []
Users.amISignedInInvis = function(hem){
Users.amISignedInvInvis.push(hem)
}.bind(this)

Users.amISignedIn = async function(){
await Creatures.magicspell("amISignedIn",{},function(data){
if(data.signedIn == "o"){
SunMohka.SignInBar.signinliORusername.mode = "Account"
SunMohka.SignInBar.signinliORusername.ray(data.name)
for(i=0;i<Users.amISignedInvInvis.length;i++){
Users.amISignedInvInvis[i].invis()
}
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
}
})
}



Users.signOut = async function(){
await Creatures.magicspell("signOut",{},function(data){
if(siartani == "gamble"){Zogladorium()}
SunMohka.SignInBar.coinamount.ray("0")
alert(data.say)})
}

Users.signIn = async function(hname,hpass,hreferer){
await Creatures.magicspell("signIn",{name:hname,pass:hpass,referer:hreferer},function(data){alert(data.say)
if(data.say == "Account Created.  You are Signed In." || data.say == "You are Signed In."){
SunMohka.SignInBar.signinliORusername.ray(data.name)
SunMohka.SignInBar.signinliORusername.mode = "Account"
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
SunMohka.SignInBar.abovepopupsignin.invis()
}
})
}

Users.createSignInBar = function(cointype){
SunMohka.SignInBar = Crystalline.maaelle('div',0,0,1,1)
SunMohka.TopBar.Add(SunMohka.SignInBar)
SunMohka.SignInBar.cointype = cointype

SunMohka.SignInBar.coin = Crystalline.maaelle('div',0,0,1/4,1,SunMohka.SignInBar).dalcorsascroll().dalcorsaeren().dalcorsalsen().eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}
}.bind(this))

SunMohka.SignInBar.coinamount = Crystalline.maaelle('div',1/4,0,1/4,1,SunMohka.SignInBar).vcenter().ray("0").eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}

}.bind(this))

if(SunMohka.SignInBar.cointype.toUpperCase() == "S"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/5107474554438d57be7152605ea67a78.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}
if(SunMohka.SignInBar.cointype.toUpperCase() == "PERSON"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/837189de985fa03e9fb36adfbabf8c29.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}

SunMohka.SignInBar.signinliORusername = Crystalline.maaelle('div',2/4,0,2/4,1,SunMohka.SignInBar).dalcorsa("0,0,0,1").corsaera("255,255,255").rhap("7","255,255,255,1","1","solid").ray("SignIn").vcenter().eshe(function(){
if(SunMohka.SignInBar.signinliORusername.mode == "SignIn"){
SunMohka.SignInBar.abovepopupsignin.visible()
}
if(SunMohka.SignInBar.signinliORusername.mode == "Account"){
if(Users.AccountMohka.on=="l"){
Users.AccountMohka.on = "o"
Users.AccountMohka.visible()
SunMohka.SignInBar.signinliORusername.corsaera("0,255,0,1").rhap("7","0,255,0,1","1","solid")
}else{
Users.AccountMohka.on = "l"
Users.AccountMohka.invisible()
SunMohka.SignInBar.signinliORusername.corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid")
}

}
}.bind(this))
SunMohka.SignInBar.signinliORusername.mode = "SignIn"

Users.amISignedIn()

SunMohka.SignInBar.abovepopupsignin = Crystalline.maaelle('div',0,0,1,1).sunano().invis().front("100").dalcorsa("0,0,0,0.5")

SunMohka.SignInBar.popupsignin = Crystalline.maaelle('div',0,0,1,1,SunMohka.SignInBar.abovepopupsignin).front("101").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

SunMohka.SignInBar.popupsignin.login = Crystalline.maaelle('aera',1/9,1/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Name").borhap("12")

SunMohka.SignInBar.popupsignin.pass = Crystalline.maaelle('aera',1/9,3/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Password").borhap("12")

SunMohka.SignInBar.popupsignin.referer = Crystalline.maaelle('aera',1/9,5/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("referer").borhap("12")

SunMohka.SignInBar.popupsignin.signinli = Crystalline.maaelle('div',1/9,7/18,7/9,1/18,SunMohka.SignInBar.popupsignin).eshe(function(){
Users.in = SunMohka.SignInBar.popupsignin.login.value
Users.signIn(SunMohka.SignInBar.popupsignin.login.value,SunMohka.SignInBar.popupsignin.pass.value,SunMohka.SignInBar.popupsignin.referer.value)
}.bind(this)).ray("Enter").rhap("7","255,255,255,1","1","solid").borhap("12")
return SunMohka.SignInBar
}









Users.AccountMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).invis().front("201").dalcorsa("0,0,0,1")

Users.AccountMohka.on = "l"

Users.AccountMohka.unlogLi = Crystalline.maaelle('div',0,0,1/9,1/12,Users.AccountMohka).ray("LogOut").eshe(function(){
SunMohka.SignInBar.signinliORusername.ray("SignIn")
SunMohka.SignInBar.signinliORusername.mode = "SignIn"
Users.AccountMohka.invis()
Users.signOut()
}.bind(this)).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

Users.Inventory = Crystalline.maaelle('div',0,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")
Users.Inventory.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Inventory).ray("Inventory").vcenter()
Users.Inventory.Items = Crystalline.maaelle('div',0,1/8,1,7/8,Users.Inventory).rhap("7","255,255,255,1","1","solid").flow("o")
Users.Inventory.Items.vItem = []

Users.Inventory.Items.erenlupe = function(tani,corsa,sen){

let hema = Crystalline.maaelle('div',0,0,1,1)

return hema

}.bind(this)




Users.Friends = Crystalline.maaelle('div',1/2,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.Friends.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Friends).ray("Friends").vcenter()




Users.History = Crystalline.maaelle('div',0,5/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.History.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.History).ray("History").vcenter()

Users.History.Melo = Crystalline.maaelle('div',0,1/8,1/9,7/8,Users.History).rhap("0","255,255,255,1","1","solid")

Users.History.Melo.liItems = Crystalline.maaelle('div',0,0,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Items")

Users.History.Melo.liComments = Crystalline.maaelle('div',0,1/6,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Comments")

//bottom bar of page to be a generic banner until person ranks on a leaderboard, at which point upgrades to 'where u are on leaderboard'








window.Creatures = {}



Creatures.magicspell = async function(what,thing,next){ 
    await fetch('https://rosinvault.glitch.me/'+what, { method: 'POST', headers: { 'Content-Type': 'application/json'}, body: JSON.stringify(thing)}).then(response => response.json()).then(data => next(data)).catch(error => alert(error))  
  }


Creatures.getUpdates = async function(){ 
await Creatures.magicspell("getUpdates",{},function(data){
Creatures.UpdatesMohka.aera.ray("")
Creatures.UpdatesMohka.aera.entries = []
let entries = data.entries.split(`:;:

`)
for(i=0;i<entries.length;i++){
let ha = entries[i].split(`:::

`)
if(ha[1].indexOf("RosinVault, ") != -1){
ha[1] = ha[1].replace("Allotopia, ","")
ha[1] = ha[1].replace("RosinVault, ","")
ha[1] = ha[1].replace("GrowingHome, ","")
ha[1] = ha[1].replace("BeautifulPeople2, ","")
Creatures.UpdatesMohka.aera.entries[i] = Crystalline.maaelle('div',0,(1/6)*i,1,1/6,Creatures.UpdatesMohka.aera)
Crystalline.maaelle('div',0,0,1/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[0]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
 Crystalline.maaelle('div',1/4,0,3/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[1]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
}
}
    })
  }
  








Creatures.UpdatesMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).dalcorsa("0,0,0,1").sunano().invis().front("50")

Creatures.UpdatesMohka.supdate = ""

Creatures.UpdatesMohka.getViewUpdates = async function(){
Creatures.magicspell("getViewUpdates",{},function(data){
Creatures.UpdatesMohka.viewcount.ray("Views: "+data.views)
})
  }
  




Creatures.UpdatesMohka.aera = Crystalline.maaelle('div',0,1/12,1,11/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").flow("o")

Creatures.UpdatesMohka.returnli = Crystalline.maaelle('div',0,0,1/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter().ray("Return").eshe(function(){
clearInterval(Creatures.UpdatesMohka.supdate)
Creatures.UpdatesMohka.invis()
}.bind(this))

Creatures.UpdatesMohka.viewcount = Crystalline.maaelle('div',5/8,0,3/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter()



Creatures.addUpdatesBottomBar = function(){
let hema = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
Creatures.UpdatesMohka.getViewUpdates()
Creatures.UpdatesMohka.supdate = setInterval(function(){
Creatures.UpdatesMohka.getViewUpdates()
}.bind(this),5000)
Creatures.getUpdates()
Creatures.UpdatesMohka.visible()
}.bind(this)).ray("Updates")
SunMohka.BottomBar.Add(hema)
}.bind(this)







//////////////////////////////////////////////////

































































































let Comments = {}
Comments.submit = function(hem,hsen){
let ish = Crystalline.lseall("in")
if(ish == "o"){
let thing = {}
thing.aera = hem
thing.when = Date.now()
thing.which = hsen
thing.name = SunMohka.SignInBar.signinliORusername.sunaera()
Creatures.magicspell("askToComment",function(data){
Crystalline.say("Comment Submitted")
})
}
}.bind(this)















Profile ={}
Profile.referer = ""
Profile.refercount = ""
Profile.refercode = ""
Profile.Comments = {}
Profile.Comments.History = {}
Profile.Comments.History.topRanked = function(){
let hema = {}

return hema
}.bind(this)

// (leaf rating system)








































































let Store = {}
Store.createStore = function(){
SunMohka.StoreLi = Crystalline.maaelle('div',0,0,1,1).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").vcenter().corsaera("255,255,255,1").ray("Store").eshe(function(){
SunMohka.StoreMohka.vis()
}.bind(this))
SunMohka.StoreMohka = Crystalline.maaelle('div',0,0,1,1).sunano().dalcorsa("0,0,0,1").corsaera("255,255,255,1").front("203").invis()
SunMohka.StoreMohka.returnLi = Crystalline.maaelle('div',0,0,1/9,1/12,SunMohka.StoreMohka).ray("return").vcenter().dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").eshe(function(){
SunMohka.StoreMohka.invis()
}.bind(this))


SunMohka.TopBar.Add(SunMohka.StoreLi)
return SunMohka.StoreLi
}.bind(this)






























Creatures.createTimeBar = function(x,y,w,h,ano){
let hema = {}
hema.TimeBar = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.TimeBar.heartdrum = setInterval(function(){
if(hema.time != ""){
let timesofar = Date.now() - hema.time
let days = (((timesofar/1000)/60)/60)/24
let hours = ((timesofar/1000)/60)/60
let minutes = (timesofar/1000)/60
let seconds = timesofar/1000

if(hours < 1){
hema.TimeBar.barhourm.lo(0,0,hours,1)
hema.TimeBar.bartwohoursm.lo(0,0,0,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 1 && hours < 2){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,hours-1,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 2 && hours < 3){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,hours-2,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 3 && hours < 6){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,(hours-3)/3,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 6 && hours < 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,(hours-6)/6,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,1,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,(hours-12)/6,1)
}

}

}.bind(this),1000)

hema.TimeBar.maa = function(){
Creatures.magicspell("getTimeAndCollects",{},function(data){
if(data.signedIn != "l"){
hema.time = data.timesofar
}
}.bind(this))
}.bind(this)

window.Zogladorium = hema.TimeBar.maa
hema.TimeBar.betKoCollect = Crystalline.maaelle('div',1/4,1/16,2/4,1/8,hema.TimeBar).invis().corsaera("0,255,0,1").rai(0).vcenter().aerasun("0,255,0,1")
hema.TimeBar.timeshow = Crystalline.maaelle('div',0,1/4,1,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").dalcorsa("42,18,59,1")
hema.TimeBar.barhour = Crystalline.maaelle('div',0,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("1 Hour")
hema.TimeBar.bartwohours = Crystalline.maaelle('div',1/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("2 Hours")
hema.TimeBar.barthreehours = Crystalline.maaelle('div',2/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("3 Hours")
hema.TimeBar.barsixhours = Crystalline.maaelle('div',3/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("6 Hours")
hema.TimeBar.bartwelvehours = Crystalline.maaelle('div',4/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("12 Hours")
hema.TimeBar.bartwentyfourhours = Crystalline.maaelle('div',5/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("24 Hours")

hema.TimeBar.barhourm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barhour).dalcorsa("0,255,0,1")
hema.TimeBar.bartwohoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwohours).dalcorsa("0,255,0,1")
hema.TimeBar.barthreehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barthreehours).dalcorsa("0,255,0,1")
hema.TimeBar.barsixhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barsixhours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwelvehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwelvehours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwentyfourhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwentyfourhours).dalcorsa("0,255,0,1")

hema.TimeBar.reward = {}
hema.TimeBar.reward.claimli = Crystalline.maaelle('div',3/9,2/4,3/9,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").vcenter().ray("Collect your points!").eshe(function(){
Creatures.magicspell("timebarCollect",{},function(data){
Users.refreshMoney()
hema.TimeBar.maa()
hema.TimeBar.betCollect(data.amountCollected)
})

}.bind(this))

hema.TimeBar.reward.first = Crystalline.maaelle('div',0,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.second = Crystalline.maaelle('div',1/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.third = Crystalline.maaelle('div',2/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fourth = Crystalline.maaelle('div',3/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fifth = Crystalline.maaelle('div',4/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.sixth = Crystalline.maaelle('div',5/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")




hema.TimeBar.reward.corsahourc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.first).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwohoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.second).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsathreehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.third).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsasixhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fourth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwelvehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fifth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwentyfourhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.sixth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()

hema.TimeBar.reward.corsahour = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.first).vcenter().ray("+ 5")
hema.TimeBar.reward.corsatwohours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.second).vcenter().ray("+ 4")
hema.TimeBar.reward.corsathreehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.third).vcenter().ray("+ 2")
hema.TimeBar.reward.corsasixhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fourth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwelvehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fifth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwentyfourhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.sixth).vcenter().ray("+ 0")

hema.TimeBar.betCollect = function(hemsen){
let raera = ""
if(hemsen == undefined){
raera = "An hour has not passed yet."
}else{
raera = hemsen + " points collected!"
}
hema.TimeBar.betKoCollect.ray(raera)
hema.TimeBar.betKoCollect.rai(0)
let op = 0
let dalo = "p"
hema.TimeBar.betKoCollect.vis()
let hx = setInterval(function(){
let opp = op
if(op>1){opp=1}
hema.TimeBar.betKoCollect.rai(opp)
if(dalo=="p"){op=op+0.02}
if(op>=2){op=1
dalo="l"}
if(dalo=="l"){op=op-0.01}
if(op<0){hema.TimeBar.betKoCollect.invis()
clearInterval(hx)}

}.bind(this),10)
}.bind(this)


hema.TimeBar.maa()
return hema.TimeBar
}.bind(this)




//10 questions per day






















Creatures.Gamble = {}

Creatures.Gamble.maa = function(x,y,w,h,ano){
Creatures.Gamble.Mohka = Crystalline.maaelle('div',x,y,w,h,ano)

Creatures.Gamble.getQuestions = async function(){
await Creatures.magicspell("getMyDailyQuestions",{},function(hem){
if(hem.q1aera != ""){
let q = hem.q1aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question1.ray(q[0]+" vs "+q[1])
Creatures.Gamble.Mohka.q1t1.sen = hem.q1
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.vis()
Creatures.Gamble.Mohka.question1.vis()
Creatures.Gamble.Mohka.q1t1.vis()
Creatures.Gamble.Mohka.q1t1.ray(q[0])
Creatures.Gamble.Mohka.q1t2.vis()
Creatures.Gamble.Mohka.q1t2.ray(q[1])
}else{
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.invis()
Creatures.Gamble.Mohka.question1.invis()
Creatures.Gamble.Mohka.q1t1.invis()
Creatures.Gamble.Mohka.q1t1.ray("")
Creatures.Gamble.Mohka.q1t2.invis()
Creatures.Gamble.Mohka.q1t2.ray("")
}

if(hem.q2aera != ""){
let qb = hem.q2aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question2.ray(qb[0]+" vs "+qb[1])
Creatures.Gamble.Mohka.q2t1.sen = hem.q2
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.vis()
Creatures.Gamble.Mohka.question2.vis()
Creatures.Gamble.Mohka.q2t1.vis()
Creatures.Gamble.Mohka.q2t1.ray(qb[0])
Creatures.Gamble.Mohka.q2t2.vis()
Creatures.Gamble.Mohka.q2t2.ray(qb[1])
}else{
Creatures.Gamble.Mohka.q2t1.sen = ""
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.invis()
Creatures.Gamble.Mohka.question2.invis()
Creatures.Gamble.Mohka.q2t1.invis()
Creatures.Gamble.Mohka.q2t1.ray("")
Creatures.Gamble.Mohka.q2t2.invis()
Creatures.Gamble.Mohka.q2t2.ray("")
}

}.bind(this))
}.bind(this)
Creatures.Gamble.answerQuestion = async function(questionsen,answer,amount){
await Creatures.magicspell("gambleAnswerQuestion",{questionsen:questionsen,answer:answer,amount:amount},function(hem){if(hem.answered == "o"){
Users.refreshMoney()
Creatures.Gamble.getQuestions()
}}.bind(this))
}.bind(this)

Creatures.Gamble.Mohka.streak = Crystalline.maaelle('div',0,1/2,1/2,1/2,Creatures.Gamble.Mohka).ray("Enable Streak").vcenter().rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1").eshe(function(){
if(Creatures.Gamble.Mohka.streak.on == "l"){
Creatures.Gamble.Mohka.streak.on = "o"
Creatures.Gamble.Mohka.streak.ray("Streak Enabled!")
Creatures.Gamble.Mohka.streak.rhap("7","0,0,0,1","1","solid").dalcorsa("0,255,0,1").corsaera("0,0,0,1")
Creatures.Gamble.Mohka.Amount1.ray("5")
Creatures.Gamble.Mohka.Amount2.ray("5")
}else{
Creatures.Gamble.Mohka.streak.on = "l"
Creatures.Gamble.Mohka.streak.ray("Enable Streak")
Creatures.Gamble.Mohka.streak.rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")
}

}.bind(this))
Creatures.Gamble.Mohka.streak.on = "l"

Creatures.Gamble.Mohka.questiongetnext = Crystalline.maaelle('div',0,0,1/2,1/2,Creatures.Gamble.Mohka).ray("Get new questions").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){


}.bind(this))

Creatures.Gamble.Mohka.Questions = Crystalline.maaelle('div',1/2,0,1/2,1,Creatures.Gamble.Mohka)


Creatures.Gamble.Mohka.question1 = Crystalline.maaelle('div',0,0,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q1t1 = Crystalline.maaelle('div',2/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t1.sunaera(),amt)

}.bind(this)).invis()
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.q1t2 = Crystalline.maaelle('div',5/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount1 = Crystalline.maaelle("aera",2/7,1/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


Creatures.Gamble.Mohka.question2 = Crystalline.maaelle('div',0,4/7,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q2t1 = Crystalline.maaelle('div',2/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t1.sunaera(),amt)
Creatures.Gamble.Mohka.q2t1.sen = ""

}.bind(this)).invis()
Creatures.Gamble.Mohka.q2t2 = Crystalline.maaelle('div',5/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount2 = Crystalline.maaelle("aera",2/7,5/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


return Creatures.Gamble.Mohka
}.bind(this)

Creatures.Gamble.Aerakormaa = function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)

return hema
}.bind(this)





























Creatures.Leaderboard = {}
Creatures.Leaderboard.maa = function(hem,x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.type = hem
hema.Tani = Crystalline.maaelle('div',0,0,1,1/7,hema).ray(hem).vcenter().rhap("7","255,255,255,1","1","solid")
return hema
}.bind(this)










































Creatures.Bulletin = {}
Creatures.Bulletin.maa = function(x,y,w,h,ano){
Creatures.Bulletin.Mohka = Crystalline.maaelle('div',x,y,w,h,ano).rhap("7","255,255,255,1","1","solid")
Creatures.Bulletin.Mohka.JustReleasedItemsTani = Crystalline.maaelle('div',0,0,1,1/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid").ray("Just Released! (within 72hours)").vcenter()

Creatures.Bulletin.Mohka.JustReleasedItems = Crystalline.maaelle('div',0,1/9,1,4/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid")
Creatures.maaLleslai("Dab","Released","Left",100,0,0,1,1,Creatures.Bulletin.Mohka.JustReleasedItems,"","Nothing in the last 72 hours.")

Creatures.Bulletin.Mohka.WelcomeNewMembers = Crystalline.maaelle('div',0,5/9,1,2/9,Creatures.Bulletin.Mohka).ray("Welcome New Members").vcenter().rhap("0","255,255,255,1","1","solid")

Creatures.Bulletin.Mohka.RememberYourPoints = Crystalline.maaelle('div',0,7/9,1,2/9,Creatures.Bulletin.Mohka).ray("Remember Your Points").vcenter().rhap("0","255,255,255,1","1","solid").eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))

return Creatures.Bulletin.Mohka
}.bind(this)































Creatures.maaLleslai = function(hemdal,hemsort,slideway,slidespeed,x,y,w,h,ano,mcorsa,mtani){
let hema = Crystalline.maaelle('div',x,y,w,h,ano).rhap("0","255,255,255,1","1","solid")
hema.type = hemdal
hema.sort = hemsort
hema.slideway = slideway
hema.slidespeed = slidespeed

hema.slideHolder = Crystalline.maaelle('div',0,0,16/18,1,hema).dalcorsa("255,255,255,1").front("3").flow("o").dalcorsa(mcorsa)
hema.slides = []

hema.slideHolderEmpty = Crystalline.maaelle('div',0,0,1,1,hema.slideHolder).vcenter().ray(mtani).invis().aeraAlign("center").aeraeren(28).dalcorsa("0,0,0,0.8")



hema.onSlide = 0
hema.autoplaying = "o"


hema.sliderele = []
hema.seconds = 0

hema.rele = setInterval(function(){
if(hema.slides.length > 0){
hema.slideHolderEmpty.invis()
}else{hema.slideHolderEmpty.vis()}
for(i=0;i<hema.sliderele.length;i++){
hema.sliderele[i]()
}},1000)
hema.slidewidth = 1000
hema.heartdrumsen = 0
hema.heartdrum = setInterval(function(){
if(hema.autoplaying == "o" && hema.slides.length > 0){
hema.heartdrumsen++
if(hema.heartdrumsen>hema.slides.length*hema.slidewidth){
hema.heartdrumsen=0
hema.slideHolder.scroll({
left: hema.heartdrumsen,
top:0,
behavior: "instant",
})
}else{
hema.slideHolder.scroll(hema.heartdrumsen,0)
}
}
}.bind(this),hema.slidespeed)

hema.CreateSlide = function(hemb,time,last){
hemb.Mohka = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1")
hemb.Mohka.Title = Crystalline.maaelle('div',1/9,0,7/9,1/7,hemb.Mohka).ray(hemb.ShowotronTitle).vcenter()
hemb.Mohka.Image = Crystalline.maaelle('div',0,1/7,1,4/7,hemb.Mohka).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hemb.Mohka.Countdown = Crystalline.maaelle('div',1/9,2/7,7/9,2/7,hemb.Mohka).vcenter()



if(hema.sort=="Upcoming"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = time-now
if(when > 0){
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)

}else{
hemb.Mohka.Countdown.ray(`<span style='color:rgb(255,215,105)'>Just Released!</span>`)

}
})
}

if(hema.sort=="Released"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = now-time
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)
})
}





hemb.Mohka.Description = Crystalline.maaelle('div',0,5/7,1,2/7,hemb.Mohka).ray(hemb.ShowotronDescription).vcenter()
let hemlink = Crystalline.maaelle('div',0,0,1,1).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hema.slideHolder.add(hemb.Mohka,hemlink,last)
}.bind(this)

hema.getSlidesFromServer = async function(){
await Creatures.magicspell("getEntries",{},hema.getSlidesFromServerXX)   
  }

hema.getSlidesFromServerXX = async function(hem){
let vslides = hem.entries.split(",")
for(i=0;i<vslides.length;i++){
hema.getSlideFromServer(vslides[i],"l",i,vslides.length)
}
}.bind(this)





hema.getSlideFromServer = async function(hemx,last,sen,vsen){
await Creatures.magicspell("loadEntry",{entrylocation:hemx},function(hem){
let datas = hem.entry.split("~*^*~")
let hemb = {}
hemb.entrynumber = datas[0]
hemb.entryname = datas[1]
hemb.entryimage = datas[2]
hemb.entrydescription = datas[3]
hemb.entryattributes = datas[4]
hemb.entrytype = datas[5]
hemb.ekkattributes = [] 
let vattribute = hemb.entryattributes.split("~x*^*x~")
for(i=0;i<vattribute.length;i++){
let atr = vattribute[i].split("~!*^*!~")
hemb.ekkattributes.push(atr)
let f = atr[0]
let ood = atr[1]
hemb[f] = ood
}

if(hemb.entrytype == hema.type){
if(hema.sort=="Upcoming"){

let nowdate = Date.now()
let onShowotron = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
let daysbefore = parseInt(hemb.DaysBeforeReleaseAddToGalleryAndShowotron) * 24 * 60 * 60 * 1000
if(day-daysbefore < now && day > now - (24*60*60*1000)){
onShowotron = "o"
}
if(onShowotron == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}

}

}
if(hema.sort=="Released"){
let nowdate = Date.now()
let onJustReleased = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
if(now > day && now < day +3*(24*60*60*1000)){
onJustReleased = "o"
}
if(onJustReleased == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}
}//Released


}


}//Dab
if(sen == vsen-1 && hema.slides.length > 0){hema.CreateSlide(hema.SunHemb,hema.SunTime,"o")}


}.bind(this))
 }


hema.slideHolder.add = function(hem,hemlink,last){
if(last=="l"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hemlink.lo(0,(1/10)+(1/5)*hema.slides.length,1,1/10)
hemlink.slidesen = hema.slides.length
hemlink.eshe(function(){
if(hema.autoplaying=="l"){
hema.autoplaying = "o"
}


if(Math.floor(hema.slidewidth*hemlink.slidesen) != Math.floor(hema.slideHolder.scrollLeft)){
hema.autoplaying = "l"
hema.slideHolder.scroll({
left: hema.slidewidth*hemlink.slidesen,
top:0,
behavior: "smooth",
})
}




}.bind(this))
hem.eshe(function(){
alert("hi")

}.bind(this))
hema.vli.ano(hemlink)
hema.slides.push(hem)
}
if(last=="o"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hem.eshe(function(){
alert("hi")

}.bind(this))
//hema.slides.push(hem)
}
}.bind(this)



hema.vli = Crystalline.maaelle('div',16/18,0,2/18,1,hema).dalcorsa("0,0,0,0.8").flow("o").front("5")
hema.getSlidesFromServer()


return hema
}.bind(this)


















Creatures.RTree = function(x,y,w,h,ano,leafsia,leaferen){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.MyRefCode = Crystalline.maaelle('div',1/2,0,1/2,1,hema)
hema.vLeaf = Crystalline.maaelle('div',0,0,1/2,1,hema)

hema.getLeafDalcorsa = function(){
let lf = Crystalline.fate(leaferen)
let lc = leafsia+lf+".png"
return lc
}.bind(this)

hema.vLeaf.leaf0 = Crystalline.maaelle('div',0,0/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(leafsia+"X.png").dalcorsalsen().dalcorsavcenter()
let ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf1 = Crystalline.maaelle('div',0,1/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf2 = Crystalline.maaelle('div',0,2/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf3 = Crystalline.maaelle('div',0,3/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf4 = Crystalline.maaelle('div',0,4/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()

return hema
}.bind(this)













Creatures.addUpdatesBottomBar()




SunMohka.Aera.flow("o")

Creatures.Leaderboard.maa("Referals",0,0,1/2,1/2,SunMohka.Aera)
Creatures.Leaderboard.maa("Alchemy",1/2,0,1/2,1/2,SunMohka.Aera)
Creatures.Leaderboard.maa("TotalGrams",0,1/2,1/2,1/2,SunMohka.Aera)
Creatures.Leaderboard.maa("GamblingCoins",1/2,1/2,1/2,1/2,SunMohka.Aera)
Creatures.Leaderboard.maa("LongestStreak",0,1,1/2,1/2,SunMohka.Aera)






let homeli = Crystalline.maaelle('div',0,0,1,1).ray("Home").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","home")
}.bind(this))
SunMohka.TopBar.Add(homeli)

let galleryli = Crystalline.maaelle('div',0,0,1,1).ray("Vault").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","vault")
}.bind(this))
SunMohka.TopBar.Add(galleryli)

let gambleli = Crystalline.maaelle('div',0,0,1,1).ray("Gamble").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))
SunMohka.TopBar.Add(gambleli)
Users.createSignInBar("S")
let referalli = Crystalline.maaelle('div',0,0,1,1).ray("Referal").vcenter().eshe(function(){
Crystalline.veskaLo("rosinvault","refer")
}.bind(this))
SunMohka.TopBar.Add(referalli)
</script></body>
</html>&&&&&&<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RosinVault</title>
   <script src="three.min.js"></script>
   <script src="GLTFLoader.js"></script>
  </head>
  <body><script>window.siartani = "edit"

window.siartanilo = "RosinVault"

window.Crystalline = {

raphos: function(hem){
 





hem.aeralign = function(hema){if(hema=="o" || hema==undefined){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }



















hem.vcenter = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
hem.style.alignItems = "center"
         return hem
         }

hem.vcenterles = function(){hem.style.display = "flex"
hem.style.justifyContent = "center"
         return hem
         }

hem.vcenterphel = function(){hem.style.display = "flex"
hem.style.alignItems = "center"
         return hem
         }

hem.vsel = function(){hem.style.display = "flex"
hem.style.justifyContent = "left"
hem.style.textAlign = "left"
         return hem
         }

hem.vles = function(){hem.style.display = "flex"
hem.style.textAlign = "right"
hem.style.justifyContent = "right"
         return hem
         }



hem.eshe = function(hema){
if(hem.hematype == "select"){
hem.onchange = hema}else{
hem.onclick = hema
}
          return hem
          }



















































































hem.dalcorsalsen = function(){hem.style.backgroundRepeat = "no-repeat"
                                      
         return hem
         }





hem.dalcorsavcenter = function(){hem.style.backgroundPosition = "center"
                                     
         return hem
         }















hem.dalcorsa = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

hem.Background = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"}
         return hem
         }

         hem.corsadal = function(hema){if(hema.indexOf("/")==-1){hem.style.backgroundColor = "rgba("+hema+")"}else{hem.style.backgroundImage = "url("+hema+")"} 
         return hem
         }

















hem.noselect = function(hema){
               hema.style.userSelect = "none"
          return hem}

hem.border = function(radius,color,width,style){
          hem.style.borderRadius = "7px"
          hem.style.borderColor = "rgba(255,255,255,1)"
          hem.style.borderWidth = "3px"
          hem.style.borderStyle = "double"
          if(arguments.length>0){hem.style.borderRadius = radius}
           if(arguments.length>1){hem.style.borderColor = "rgba("+color+")"}
           if(arguments.length>2){hem.style.borderWidth = width}
           if(arguments.length>3){hem.style.borderStyle = style}
           return hem
         }

         

         

         

         hem.ona = function(){
         for(this.iuuuui=0;this.iuuuui<arguments.length;this.iuuuui++){
           hem.removeChild(arguments[this.iuuuui]) 
          }
          return hem
         }

         hem.font = function(hema){hem.style.fontFamily = hema
          return hem
          }

          
         
         
         
         
         
         
         
         


         
      
         
         
         




  hem.dalcorsascroll = function(){hem.style.backgroundAttachment = "scroll"
                                     
         return hem
         }

hem.white = function(){hem.style.whiteSpace = "pre"
                                     
         return hem
         }


hem.dalcorsalscroll = function(){hem.style.backgroundAttachment = "fixed"
                                      
         return hem
         }


hem.dalcorsaliscroll = function(){hem.style.backgroundAttachment = "local"
                                      
         return hem
         }


hem.dalcorsasen = function(){hem.style.backgroundRepeat = "repeat"
                                      
         return hem
         }



hem.dalcorsaeren = function(){hem.style.backgroundSize = "cover"
                                      
         return hem
         }



hem.dalcorsaloeren = function(){hem.style.backgroundSize = "contain"
                                      
         return hem
         }

hem.dalcorsahem = function(){hem.style.backgroundSize = "100% 100%"
                                      
         return hem
         }



         hem.textEdge = function(hema){if(hema=="o"){hem.style.whiteSpace = "wrap"}
                                       if(hema=="l"){hem.style.whiteSpace = "nowrap"}
         return hem
         }
              



hem.koil = function(){hem.style.userSelect = "none"
                                      
         return hem
         }



hem.front = function(hemb){hem.style.zIndex = hemb
                                      
         return hem
         }

hem.dal = function(hemb){hem.type = hemb
                                      
         return hem
         }





































































































































hem.ray = function(hema){












let hn = ""
if(hema != undefined){hn=hema}
         if(hem.hematype == "textarea"){hem.value = hn}
if(hem.hematype == "aera"){hem.value = hn}
if(hem.hematype == "notaera"){hem.value = hn}
if(hem.hematype == "select"){hem.value = hn}
if(hem.hematype == "input"){hem.value = hn}
if(hem.hematype == "div"){hem.innerHTML = hn}
if(hem.hematype == "button"){hem.textContent = hn}
if(hem.hematype == "option"){hem.textContent = hn
hem.value = hn}
         return hem
         }







hem.aeraeren = function(hema){hem.style.fontSize = hema+"px"
         return hem
         }
hem.textSize = function(hema){hem.style.fontSize = hema 
         return hem
         }



















hem.sunano = function(hema){
               document.body.appendChild(hem)
          return hem}

















hem.ano = function(){
         for(this.iuuui=0;this.iuuui<arguments.length;this.iuuui++){
           hem.appendChild(arguments[this.iuuui]) 
          }
          return hem
         }

























hem.vis = function(){hem.style.display = "flex"
                                      
         return hem
         }

hem.visible = function(){hem.style.display = "flex"
                                      
         return hem
         }







hem.invis = function(){hem.style.display = "none"
                                      
         return hem
         }
hem.invisible = function(){hem.style.display = "none"
                                      
         return hem
         }




















hem.sunaera = function(){
if(arguments.length == 1){hem.innerHTML = arguments[0]
         return hem
         }
if(arguments.length == 0 && hem.hematype == "textarea"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "select"){
return hem.value
}
if(arguments.length == 0 && hem.hematype == "input"){
return hem.value
}
if(arguments.length == 0 && hem.hematype != "textarea"){
         return hem.innerHTML
         }
}





hem.aeradal = function(hema){hem.style.fontFamily = hema
         return hem
         }


hem.aeraeshe = function(hema){hem.oninput = hema
          return hem
          }





hem.aeracorsa = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }
hem.textColor = function(hema){hem.style.color = "rgba("+hema+")" 
         return hem
         }









         










hem.aeraglow = function(hema){hem.style.textShadow = "0px 0px 4px rgba(" + hema +")"
         return hem
         }











hem.ama = function(hema){hem.placeholder = hema 
         return hem
         }

hem.hint = function(hema){hem.placeholder = hema 
         return hem
         }



















hem.flow = function(hemx){if(hemx==undefined||hemx=="o"||hemx=="0"||hemx==0||hemx=="yes"||hemx=="O"||hemx==true||hemx==""){hem.style.overflow = "auto"}
if(hemx=="l"||hemx=="L"||hemx==1||hemx=="no"||hemx==false){hem.style.overflow = "hidden"}
if(hemx!=undefined){

if(hemx.toLowerCase()=="lleslai"){hem.style.overflowX = "auto"}
if(hemx.toLowerCase()=="phellai"){hem.style.overflowY = "auto"}



}

hem.style.scrollBehavior = "smooth"
          return hem}











hem.aerasun = function(hema){hem.style.textShadow = "0 0 8px rgba("+hema+")"
         return hem
         }





hem.aeraAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }

hem.textAlign = function(hema){if(hema=="o"){hem.style.textAlign = "center"}else{hem.style.textAlign = hema} 
         return hem
         }




































hem.corsaera = function(hema){
hem.style.color = "rgba("+hema+")"
         return hem
         }




hem.lo = function(x,y,w,h){
          this.lo(hem,x,y,w,h)
return hem
         }.bind(this)

hem.loles = function(x){
          this.loles(hem,x)
return hem
         }.bind(this)

hem.losel = function(x){
          this.losel(hem,x)
return hem
         }.bind(this)

hem.lophel = function(x){
          this.lophel(hem,x)
return hem
         }.bind(this)

hem.lolehp = function(x){
          this.lolehp(hem,x)
return hem
         }.bind(this)

hem.getWidth = function(){
let hema = hem.getBoundingClientRect()

return hema.width
}.bind(this)


hem.getHeight = function(){
let hema = hem.getBoundingClientRect()

return hema.height
}.bind(this)












































hem.rai = function(hema){hem.style.opacity = hema
         return hem
         }



























































hem.rhap = function(radius,color,width,style){
          hem.style.borderRadius = radius + "px"
          hem.style.borderColor = "rgba("+color+")"
          hem.style.borderWidth = width+"px"
          hem.style.borderStyle = style
           return hem
         }





hem.rhapdal = function(hema){hem.style.borderStyle = hema 
         return hem
         }
         hem.rhapcorsa = function(hema){hem.style.borderColor = "rgba("+hema+")" 
         return hem
         }
         hem.rhaperen = function(hema){hem.style.borderWidth = hema
         return hem
         }

hem.rhaprele = function(hema){hem.style.borderRadius = hema+"px"
         return hem
         }
 





hem.borderradiuses = function(tl,tr,br,bl){
hem.style.borderTopLeftRadius = tl+"px"
hem.style.borderTopRightRadius = tr+"px"
hem.style.borderBottomRightRadius = br+"px"
hem.style.borderBottomLeftRadius = bl+"px"
return hem
}


hem.borhap = function(padding){
          hem.style.padding = padding + "px"
           return hem
         }





























































































return hem
        },


seall: function(aera,siar){Kt.seall(aera,siar)},











melosiar: function(siar,hemfun){
    var client = new XMLHttpRequest()
     client.open('GET',siar)
   client.onreadystatechange = function(){
if(client.readyState == 4 && client.status == 200){hemfun(client.responseText)}}
client.send()
   },



















copyAssets: function(aera){Kt.copyAssets(aera)},


hCopyAssets: function(aera){Kt.hCopyAssets(aera)},

copyAssetsCal: function(aera){Kt.copyAssetsCal(aera)},


hCopyAssetsCal: function(aera){Kt.hCopyAssetsCal(aera)},

reloadprogramcal: function(){Kt.reloadprogramcal()},





say: function(hem){Kt.say(hem)},











lseall: function(siar){return Kt.lseall(siar)},






















maaRaynotaera: function(aeralo,x,y,w,h,ano){
let hema = Crystalline.maaelle('aera',x,y,w,h,ano).aeraeshe(function(){
Crystalline.seall(hema.sunaera(),hema.siar)

}.bind(this))

hema.siar = aeralo
hema.ray(Crystalline.lseall(hema.siar))

























},








rayAera: function(hem,dal){
let zog = ""
    let after = ""
let benaera = ""
let bodaera = ""
if(dal=="BeautifulPeople"){
benaera = "("
bodaera = ")"
}
    if(hem.indexOf("in the styles of the artists")!=-1){
    zog = hem.substring(0,hem.indexOf("in the styles of the artists"))
    after = hem.substring(hem.indexOf("in the styles of the artists"),hem.length)
    }else{
      zog = hem
    }
  let maera = hem.split(" ")
  let which = Crystalline.fate(maera.length)
let sen = Crystalline.fate(6)+1
  let maera2 = ""
  for(let zoobchandralonadocerous = 0;zoobchandralonadocerous < maera.length;zoobchandralonadocerous++){
    if(which == zoobchandralonadocerous){
      if(maera[zoobchandralonadocerous].substring(0,2)=="((" || maera[zoobchandralonadocerous].substring(maera[zoobchandralonadocerous].length-2,maera[zoobchandralonadocerous].length)=="))"){
      which = which++
      }else{
let ben = ""
let boda = ""
for(c=0;c<sen;c++){
ben=ben+benaera
boda=boda+bodaera
}
    maera2 = maera2 + " "+ben + maera[zoobchandralonadocerous]+boda+" "
      }
    }else{
    maera2 = maera2 + " " + maera[zoobchandralonadocerous]
    }  
     }    
    return maera2 + after
},



generateSeed: function(){
   let seed = Crystalline.fate(4294967295)+1
   return seed
  },


BeautifulGallery: function(x,y,w,h,ano){
let galleria = Crystalline.maaelle('div',x,y,w,h,ano)
galleria.settings = {}
  galleria.settings.gallery = true
  galleria.settings.sort = "recent"
  galleria.settings.adaptiveHeight = true
  galleria.settings.style = "background-color:rgba(0,0,0,0)"
  galleria.settings.forceColorScheme = "dark"
let c = image(galleria.settings).evaluateItem
  galleria.ray(c)
},

BeautifulStory: function(ask,x,y,w,h,ano){
let textia = Crystalline.maaelle('div',x,y,w,h,ano)
textia.settings = {}
 textia.settings.instruction = ask  
let c = aitext(textia.settings)
  textia.ray(c)
},

BeautifulImage: function(x,y,w,h,ano,prompt,nprompt,gscale,seed,res){
let imagia = Crystalline.maaelle('div',x,y,w,h,ano)
imagia.settings = {}
  imagia.settings.prompt = prompt
  imagia.settings.negativePrompt = nprompt
 imagia.settings.guidanceScale = gscale
 imagia.settings.seed = seed
 imagia.settings.resolution = res
let c = image(imagia.settings).evaluateItem
  imagia.ray(c)
//YTILIBATAPMOC
},




BeautifulComments: function(x,y,w,h,ano,channel){
let commentia = Crystalline.maaelle('div',x,y,w,h,ano)
commentia.settings = {}
  commentia.settings.spiritguides = true
  commentia.settings.loadFonts = "Emilys Candy"
 commentia.settings.channel = channel
 commentia.settings.commentPlaceholderText = "meow"
 commentia.settings.submitButtonText = "meow"
commentia.settings.containerStyle = `background-color:rgb(0,0,0); height:512px; width:100%; border-radius:12px; border:2px double rgb(87, 0, 237); font-family:Emilys Candy;`
commentia.settings.messageBubbleStyle = `background:rgba(255,255,255,0.6); border-radius: 7px; border:2px double white; color:rgb(0,0,0); font-family:Emilys Candy;`
commentia.settings.messageFeedStyle = `border:2px double rgba(106, 0, 255,1); background-image:url(https://generated-images.perchance.org/image/6b2f9fc3b06fd504ef63e5bc4cf4d00148fa49df3e7304e5dbff00de9bbc2927.jpeg); border-radius: 7px; font-family:Emilys Candy;`
commentia.settings.inputAreaStyle = `background-color:rgb(0,0,0); font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(255,255,255);`
commentia.settings.submitButtonStyle = `width:100%;background-color: rgba(61, 242, 255,1); border:none; font-family:Emilys Candy; border:2px double white; border-radius: 7px; color: rgb(0,0,0)`
commentia.settings.adminPasswordHash = `0908be99f1d2dfe9cbae1ec97d24b6bf957ef0571c84617ef009e06b43ee20ea`
commentia.settings.adminFlair = `meow`
commentia.settings.width = `400`
commentia.settings.bannedWords = "cbat"
//commentia.settings.customEmojis = {import:allos-emoji-list}
commentia.settings.loneCustomEmojiSizeMultiplier = "3"
commentia.settings.customEmojiSize = "1.2"
let c = comments(commentia.settings).evaluateItem
  commentia.ray(c)
//YTILIBATAPMOC
},





  
  
  
  
  
  
  

  
  
  
  
  
    
  
  


  

  
  
  


melosia: function(hem){return Kt.melosia(hem).split(",")},
















downloadassets: function(hemlo,hemtani){Kt.downloadassets(hemlo,hemtani)},
hseall: function(aera,siar){Kt.hseall(aera,siar)},
hlseall: function(siar){return Kt.hlseall(siar)},
        seallsiar: function(siabe,siabo){Kt.seallsiar(siabe,siabo)},
        rasiar: function(siabe){return Kt.rasiar(siabe)},
hrasiar: function(siabe){return Kt.hrasiar(siabe)},
rasia: function(siabe){return Kt.rasia(siabe)},
        seallsia: function(siabe,siabo){Kt.seallsia(siabe,siabo)},
celestiall: function(siabe,siabo){Kt.celestiall(siabe,siabo)},
        seallver: function(siabe,siabo){Kt.seallver(siabe,siabo)},
        kortanisia: function(siabe,siabo){Kt.kortanisia(siabe,siabo)},
hkortanisia: function(siabe,siabo){Kt.hkortanisia(siabe,siabo)},
        
maasia: function(hem){Kt.maasia(hem)},
hmelosia: function(hem){return Kt.hmelosia(hem).split(",")},
sunseall: function(aera,siar){Kt.sunseall(aera,siar)},
sunlseall: function(siar){return Kt.sunlseall(siar)},
        sunmelosia: function(hem){return Kt.sunmelosia(hem).split(",")},






















ekklinere: function(hemaera,hemekk){
let sen = hemekk.indexOf(hemaera)
if(sen != -1){
  hemekk.splice(sen, 1)
}
return hemekk
},
ekklieren: function(hemaera,hemekk){
hemekk.push(hemaera)
return hemekk
},
ekklira: function(hemaera,hemekk){
if(hemekk.includes(hemaera)){return "o"}else{return "l"}
},











componentToHex: function(c) {
  var hex = c.toString(16)
  return hex.length == 1 ? "0" + hex : hex
},

 rgbToHex: function(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b)
},



hemThree: function(tthen,tanimate,x,y,w,h,hemano){
let hema = Crystalline.maaelle('div',x,y,w,h,hemano)

Crystalline.Corsan = hema
hema.threescript = tanimate
hema.threeobjects = []
hema.threeactive = false
hema.Textures = []
hema.animate = function(){ 	
                      	if(hema.threeactive == true){
for(i=0;i<hema.threeobjects.length;i++){
hema.threeobjects[i]()
}
hema.threescript()
//hema.ORBITCONTROLS.update()
hema.RENDERER.render( hema.SCENE, hema.CAMERA )
}
let ani = hema.animate.bind(this)
requestAnimationFrame( ani )
}.bind(this)

hema.THREE = THREE

hema.TextureLoader = new hema.THREE.TextureLoader()
//hema.GLTFLoader = new this.THREE.GLTFLoader()

let vww = Math.round(w*hemano.clientWidth)
let vhh = Math.round(h*hemano.clientHeight)

     hema.SCENE = new hema.THREE.Scene()

hema.LIGHT = new hema.THREE.AmbientLight(0xffffff,0.3)
hema.SCENE.add(hema.LIGHT)

hema.SUN = new hema.THREE.PointLight( 0xffffff, 1, 70 )
hema.SUN.position.set( 13, 20, 13 )
hema.SUN.castShadow = true
hema.SUN.shadow.mapSize.width = 26
hema.SUN.shadow.mapSize.height = 26
hema.SUN.shadow.camera.near = 1
hema.SUN.shadow.camera.far = 50
hema.SCENE.add( hema.SUN )

    hema.CAMERA = new hema.THREE.PerspectiveCamera( 90, vww/ vhh, 0.1, 1000 )
hema.cameraX = 0
hema.cameraY = 0
hema.cameraZ = 0
hema.CAMERA.position.set(0, 0, 0)



     hema.RENDERER = new hema.THREE.WebGLRenderer()
hema.RENDERER.shadowMap.enabled = true
      hema.RENDERER.setSize(vww, vhh)
hema.RENDERER.setPixelRatio(window.devicePixelRatio)

hema.ORBITCONTROLS = new hema.THREE.OrbitControls(hema.CAMERA,hema.RENDERER.domElement)
hema.ORBITCONTROLS.enabled = false
//hema.ORBITCONTROLS.enableDamping = true
//hema.ORBITCONTROLS.dampingFactor = 0.05
hema.ORBITCONTROLS.screenSpacePanning = false
hema.ORBITCONTROLS.minDistance = 30
hema.ORBITCONTROLS.maxDistance = 100

hema.T = hema.RENDERER.domElement
Crystalline.raphos(hema.T)
hema.T.lo(0,0,1,1)
hema.front(999999999999)
 hema.ano( hema.T )


















hema.createUnit = function(x,y,z,who){

let hemb = {}
hemb.represents = who
hema.tani = who
hemb.x = x
hemb.y = y
hemb.z = z
hemb.variant = ""
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hema.b,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)



hemb.removeFromMap = function(){
this.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)


hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)
}
return hemb
}.bind(this)









hema.SunRaphos = function(hemb){
























































































































































































































hemb.lookAtMe = function(){
hema.CameraLookAtObject(hemb)
return hemb
}.bind(this)














































































































hemb.position = function(rx,ry,rz){
hemb.x = rx
hemb.y = ry
hemb.z = rz
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)



hemb.wireframe = function(hem){
if(hem=="o"){
hemb.materi1.wireframe = true
}else{
hemb.materi1.wireframe = false
}
}.bind(this)



hemb.texturewrap  = function(img){
      
                   
           let mewta = new hema.THREE.TextureLoader().load(img)
                    mewta.wrapS = mewta.wrapT = hema.THREE.RepeatWrapping
                    
                    hemb.materi1.map = mewta         
                    hemb.materi1.needsUpdate = true
                  }.bind(this)




return hemb
}.bind(this)
















































































































































































































hema.maaTree = function(x,y,z){

let hemb = hema.maaS(x,y,z,2,90,2)
hema.maaS(x+6,y+14,z,10,2,2)
hema.maaS(x,y+20,z+6,2,2,10)
hema.maaS(x-6,y+26,z,10,2,2)
hema.maaS(x,y+32,z-6,2,2,10)
hema.maaS(x+6,y+38,z,10,2,2)
return hemb
}.bind(this)



hema.maaS = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(xp, yp, zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
return hemb
}.bind(this)









Crystalline.Corsan.maaLight = function(x,y,z,strength){
let light = new THREE.PointLight(0xffffff,strength)
light.position.set(x,y,z)
hema.SCENE.add(light)
}.bind(this)


Crystalline.Corsan.maaInvisithing = function(x,y,z,xp,yp,zp){

let hemb = {}
hemb.x = x
hemb.y = y
hemb.z = z
hemb.xp = xp
hemb.yp = yp
hemb.zp = zp

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(255,255,255)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.BoxGeometry(hemb.xp, hemb.yp, hemb.zp)
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)

hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){
hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hemb.aaM()
return hemb
}.bind(this)






















































hema.cameraSpin = function(tani){
hema.ORBITCONTROLS.enabled = true
return hema
}.bind(this)




hema.cameraNonspin = function(tani){
hema.ORBITCONTROLS.enabled = false
return hema
}.bind(this)









hema.maaMaven = function(x,z,type,who){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.variant = type
hemb.present = "o"
if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{
let hm = Crystalline.melosia(type+"/Maven/Corsa")
let wm = Crystalline.fate(hm.length)
let whoo = hm[wm].replace(".png","") +"Maven"
let tew = hema.Textures[whoo]
hemb.variant = hm[wm]

if(type != "Nif"){
hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)

hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
}else{

let whooo = who +"Hazel"
let tew2 = hema.Textures[whooo]

hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })
hemb.materi2 = new hema.THREE.SpriteMaterial({ 
	map: tew2,
transparent: true
 })

hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)
hemb.mesh2 = new hema.THREE.Sprite(hemb.materi2)
hemb.mesh2.scale.set(0.3,0.3,0.3)
hemb.aaM = function(){
hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.mesh1 = undefined
hema.SCENE.remove(hemb.mesh2)
hemb.materi2.dispose()
hemb.mesh2 = undefined
}.bind(this)

hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
hemb.mesh2.position.set(hemb.x,hemb.y+1,hemb.z)
hema.SunRaphos(hemb)
hema.SCENE.add(hemb.mesh1)
hema.SCENE.add(hemb.mesh2)
}

}


return hemb
}.bind(this)


































































hema.maaEditSphere = function(x,z){

let hemb = {}
hemb.x = x
hemb.y = 3
hemb.z = z

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: "rgb(0,255,0)",
transparent: true,
wireframe: true,
 })

hemb.shape1  = new hema.THREE.SphereGeometry(0.35)

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){
hemb.materi1.visible = false
}.bind(this)

hemb.Maa = function(){

hemb.materi1.visible = true
hemb.materi1.needsUpdate = true
}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.rotatia = function(){
hemb.mesh1.rotation.x = hemb.mesh1.rotation.x+0.01
}.bind(this)
hema.threeobjects.push(hemb.rotatia)



return hemb
}.bind(this)

























































































hema.CameraLookAtPosition = function(x,y,z){
let weW = new hema.THREE.Vector3(x,y,z)
hema.CAMERA.lookAt(weW)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraPosition = function(x,y,z){
hema.cameraX = x
hema.cameraY = y
hema.cameraZ = z
hema.CAMERA.position.set(x,y,z)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraTopDown = function(){
//hema.CAMERA
}.bind(this)

hema.CameraVFov = function(hem){
hema.CAMERA.fov = hem
hema.CAMERA.updateProjectionMatrix()
}.bind(this)

hema.CameraLookAtObject = function(hemc){
hema.CAMERA.lookAt(hemc.mesh1.position)
}.bind(this)

hema.cameraright = function(hem){
hema.cameraX = hema.cameraX+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraleft = function(hem){
hema.cameraX = hema.cameraX-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameradown = function(hem){
hema.cameraZ = hema.cameraZ+hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)
hema.cameraup = function(hem){
hema.cameraZ = hema.cameraZ-hem
hema.CAMERA.position.set(hema.cameraX,hema.cameraY,hema.cameraZ)
hema.CAMERA.updateProjectionMatrix()
}.bind(this)



hema.CameraAutoTurnaround = function(hemb){
if(arguments.length == 1){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtObject(hemb)
}.bind(this)
hema.threeobjects.push(rotatia)
}
if(arguments.length == 3){
let rotatia = function(){
hema.CAMERA.translateX(1)
hema.CameraLookAtPosition(arguments[0],arguments[1],arguments[2])
}.bind(this)
hema.threeobjects.push(rotatia)
}


}.bind(this)











hema.maaConversion = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z
hemb.variant = who
if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let hm = Crystalline.melosia(who+"/Conversion/Corsa")
let v = Crystalline.fate(hm.length)
let whoo = hm[v].replace(".png","") +"Conversion"
let tew = hema.Textures[whoo]
hemb.variant = hm[v]


hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)






















hema.maaHazel = function(x,z,who){

let hemb = {}
hemb.cwho = who
hemb.tani = who
hemb.x = x
hemb.y = 2
hemb.z = z

if(who=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

let whoo = who +"Hazel"

let tew = hema.Textures[whoo]



hemb.materi1 = new hema.THREE.SpriteMaterial({ 
	map: tew,
transparent: true
 })





hemb.mesh1 = new hema.THREE.Sprite(hemb.materi1)



hemb.mesh1.position.set(x,2,z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)

hemb.stepsright = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.right(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsup = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.up(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsleft = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.left(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.stepsdown = function(hemsen){
hemb.steps = 0
hemb.stepping = setInterval(function(){
hemb.down(1)
hemb.steps++
if(hemb.steps==hemsen){
clearInterval(hemb.stepping)
}
}.bind(this),200)
}.bind(this)

hemb.right = function(hemsen){
hemb.x = hemb.x+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.left = function(hemsen){
hemb.x = hemb.x-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.down = function(hemsen){
hemb.z = hemb.z+hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)
hemb.up = function(hemsen){
hemb.z = hemb.z-hemsen
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
}.bind(this)

hemb.aaM = function(){

hema.SCENE.remove(hemb.mesh1)

hemb.materi1.dispose()

hemb.mesh1 = undefined
}.bind(this)




hemb.removeFromMap = function(){

Crystalline.map.replaceCubeUnit(hemb.x,hemb.z,"Nothing")
return hemb
}.bind(this)




hemb.MoveTo = function(x,y,z){
hemb.x = x
hemb.y = y
hemb.z = z
hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)
return hemb
}.bind(this)


}


return hemb
}.bind(this)





























hema.maaSen = function(x,z,type){

let hemb = {}
hemb.ctype = type
hemb.x = x
hemb.y = 1
hemb.z = z
hemb.xw = 1
hemb.yw = 1
hemb.zw = 1
hemb.materi1 = ""
if(type.substring(0,4)=="Wall"){
hemb.y=2
hemb.ctype = hemb.ctype.replace("Wall","")
}
if(type.substring(0,9)=="Superwall"){
hemb.y=3
hemb.ctype = hemb.ctype.replace("Superwall","")
}
if(type.substring(0,3)=="Pit"){
hemb.y=0
hemb.ctype = hemb.ctype.replace("Pit","")
}

if(type=="Nothing"){
hemb.aaM = function(){}
hemb.removeFromMap = function(){}
hemb.MoveTo = function(){}
}else{

if(type.substring(0,7)!="Culture"){
let whoo = hemb.ctype +"Sen"
let tew = hema.Textures[whoo]

hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	map: tew,
transparent: true
 })
}else{
let hcolor = type.substring(7,type.length)
hemb.materi1 = new hema.THREE.MeshStandardMaterial({ 
	color: hcolor,
transparent: true,
wireframe: true
 })

}


hemb.shape1  = new hema.THREE.BoxGeometry( hemb.xw, hemb.yw, hemb.zw )
hemb.shape1.castShadow = true
hemb.shape1.receiveShadow = true

hemb.mesh1 = new hema.THREE.Mesh(hemb.shape1, hemb.materi1)






hemb.aaM = function(){





hema.SCENE.remove(hemb.mesh1)
hemb.materi1.dispose()
hemb.shape1.dispose()
hemb.mesh1 = undefined

}.bind(this)





hemb.mesh1.position.set(hemb.x,hemb.y,hemb.z)

hema.SunRaphos(hemb)



hema.SCENE.add(hemb.mesh1)



}

return hemb
}.bind(this)



















































      tthen()
    
hema.threeactive = true
hema.animate()

return hema
},











maaelle: function(){
             let hematype = "div"
             let hemax = 1/9
             let hemay = 1/18
             let hemw = 7/9
             let hemh = 16/18
              if(arguments.length>0){hematype = arguments[0]
              if(arguments[0]=="aera"){hematype = "textarea"}}
              if(arguments.length>1){hemax = arguments[1]}
              if(arguments.length>2){hemay = arguments[2]}
              if(arguments.length>3){hemw = arguments[3]}
              if(arguments.length>4){hemh = arguments[4]}
              let hema = document.createElement(hematype)
              hema.hematype = hematype
              if(hema.hematype == "div"){
               hema.style.userSelect = "none"
              }
             this.raphos(hema)
hema.style.fontFamily = "EmilysCandy"
if(hematype == "option"){
arguments[1].ano(hema)
}else{
             this.lo(hema,hemax,hemay,hemw,hemh)
}
         
             if(arguments.length>5){arguments[5].ano(hema)}
             
hema.dalcorsa("0,0,0,0.0").aeracorsa("255,255,255,1").aeraglow("255,255,255,1")


             return hema
            },




















kiDelete: function(){Kt.kieh(1,0)},
            ki: function(hem){Kt.ki(hem)},
            kiPaste: function(){Kt.kiPaste()},
            kiCopy: function(){Kt.kiCopy()},
            kiCut: function(){Kt.kiCut()},
            kiSelectAll: function(){Kt.kiSelectAll()},
            kiSelect: function(hemben,hemboda){Kt.kiSelect(hemben,hemboda)},
            kiboda: function(hemdistance){return Kt.kiboda(hemdistance)},
            kiben: function(hemdistance){return Kt.kiben(hemdistance)},
            kieh: function(hemben,hemboda){Kt.kieh(hemben,hemboda)},
            kiUp: function(){Kt.kiUp()},
            kiDown: function(){Kt.kiDown()},
            kiLeft: function(){Kt.kiLeft()},
            kiRight: function(){Kt.kiRight()},
            kiUndo: function(){Kt.kiUndo()},
            kiRedo: function(){Kt.kiRedo()},
    
kiSelection: function(){return Kt.kiSelection()},
      


gotowebpage: function(hem){Kt.gotowebpage(hem)},


     readasset: function(hem){
return Kt.readasset(hem)
}, 
exportasset: function(hem,boda){
Kt.exportasset(hem,boda)
}, 
        
        
 














veskaLo: function(tani,hem){
document.location.href = "https://"+tani+".glitch.me/"+hem
},


sensia: function(aera,sia){
let w = Crystalline.melosia(sia)
let an = w.length
if(w[0]==""){an=0}
let re = an.toString()
Crystalline.seall(aera,sia+"/"+re)
},

lo: function(hem,x,y,w,h){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)
                        hem.style.right = this.conversion.percentstring(1-(x+w))
                        hem.style.top = this.conversion.percentstring(y)
                        hem.style.bottom = this.conversion.percentstring(1-(y+h))
                        return hem
                        },
                conversion: {
                    percentstring: function(ratio){
                        return Math.round(ratio*100).toString()+"%"
                    },
                },



loles: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.left = this.conversion.percentstring(x)   
                        return hem
                        },

losel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.right = this.conversion.percentstring(x)   
                        return hem
                        },

lophel: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.top = this.conversion.percentstring(x)   
                        return hem
                        },
         
lolehp: function(hem,x){
                        hem.style.position = "absolute"
                        hem.style.bottom = this.conversion.percentstring(x)   
                        return hem
                        },










   





lohem: function(hem){
let hema = document.getElementById(hem)

this.raphos(hema)
return hema
},



























fate: function(hsen){
let hema = Math.floor(Math.random()*hsen)
return hema
},



SenNow: function(){
let hema = Date.now()
hema = hema.toString()
return hema
},

Senminutessince: function(since){
let hema = this.SenNow()
let hemaaa = parseInt(hema)-parseInt(since)
return hemaaa
},

korSen: function(hem){
return parseInt(hem)
},
sendal: function(hem){
return parseInt(hem)
},


maaHemSen: function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.year
hema.month
hema.day
hema.hour
hema.minute
hema.second
hema.millisecond
return hema
},

























}

let Kt = {
say: function(hem){alert(hem)},



hseall: function(aera,siar){
localStorage.setItem(siar,aera)
},
hlseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
seall: function(aera,siar){
localStorage.setItem(siar,aera)
},
lseall: function(siar){
let lae = localStorage.getItem(siar)
if(lae==null){lae=""}
if(lae==undefined){lae=""}
return lae
},
        seallsiar: function(siabe,siabo){},
        rasiar: function(siabe){},
rasia: function(siabe){},
        seallsia: function(siabe,siabo){},
        seallver: function(siabe,siabo){},
        kortanisia: function(siabe,siabo){},
        melosia: function(hem){},
hmelosia: function(hem){},
sunseall: function(aera,siar){},
sunlseall: function(siar){},
        sunmelosia: function(hem){},




}






window.mode = ""
if(innerWidth > innerHeight){window.mode = "computer"}else{window.mode = "phone"}

window.SunMohka = Crystalline.maaelle('div',0,0,1,1).sunano().front("1").dalcorsa("0,0,0,1")
SunMohka.Aera = Crystalline.maaelle('div',0,0,1,1,SunMohka).dalcorsa("0,0,0,1")
SunMohka.TopBar = Crystalline.maaelle('div',0,0,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.TopBar.Entries = []
SunMohka.TopBar.Add = function(hem){
SunMohka.Aera.lophel(1/24)
SunMohka.TopBar.vis()
hem.lo((1/5)*SunMohka.TopBar.Entries.length,0,1/5,1)
SunMohka.TopBar.ano(hem)
SunMohka.TopBar.Entries.push(hem)
}.bind(this)
SunMohka.BottomBar = Crystalline.maaelle('div',0,23/24,1,1/24,SunMohka).flow("o").rhap("7","255,255,255,1","1","solid").invis()
SunMohka.BottomBar.Entries = []
SunMohka.BottomBar.Add = function(hem){
SunMohka.Aera.lolehp(1/24)
SunMohka.BottomBar.vis()
hem.lo((1/5)*SunMohka.BottomBar.Entries.length,0,1/5,1)
SunMohka.BottomBar.ano(hem)
SunMohka.BottomBar.Entries.push(hem)
}.bind(this)



window.Users = {}





Users.coinCorsa = ""






Users.viewUp = async function(){
await Creatures.magicspell("viewUp",{},function(data){})  
  }

Users.refreshMoney = async function(){
await Creatures.magicspell("getMoney",{},function(data){
SunMohka.SignInBar.coinamount.ray(data.money)
})
}.bind(this)



Users.amISignedInvInvis = []
Users.amISignedInInvis = function(hem){
Users.amISignedInvInvis.push(hem)
}.bind(this)

Users.amISignedIn = async function(){
await Creatures.magicspell("amISignedIn",{},function(data){
if(data.signedIn == "o"){
SunMohka.SignInBar.signinliORusername.mode = "Account"
SunMohka.SignInBar.signinliORusername.ray(data.name)
for(i=0;i<Users.amISignedInvInvis.length;i++){
Users.amISignedInvInvis[i].invis()
}
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
}
})
}



Users.signOut = async function(){
await Creatures.magicspell("signOut",{},function(data){
if(siartani == "gamble"){Zogladorium()}
SunMohka.SignInBar.coinamount.ray("0")
alert(data.say)})
}

Users.signIn = async function(hname,hpass,hreferer){
await Creatures.magicspell("signIn",{name:hname,pass:hpass,referer:hreferer},function(data){alert(data.say)
if(data.say == "Account Created.  You are Signed In." || data.say == "You are Signed In."){
SunMohka.SignInBar.signinliORusername.ray(data.name)
SunMohka.SignInBar.signinliORusername.mode = "Account"
if(siartani == "gamble"){Zogladorium()
Creatures.Gamble.getQuestions()}
Users.refreshMoney()
SunMohka.SignInBar.abovepopupsignin.invis()
}
})
}

Users.createSignInBar = function(cointype){
SunMohka.SignInBar = Crystalline.maaelle('div',0,0,1,1)
SunMohka.TopBar.Add(SunMohka.SignInBar)
SunMohka.SignInBar.cointype = cointype

SunMohka.SignInBar.coin = Crystalline.maaelle('div',0,0,1/4,1,SunMohka.SignInBar).dalcorsascroll().dalcorsaeren().dalcorsalsen().eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}
}.bind(this))

SunMohka.SignInBar.coinamount = Crystalline.maaelle('div',1/4,0,1/4,1,SunMohka.SignInBar).vcenter().ray("0").eshe(function(){
if(siartanilo == "RosinVault"){Crystalline.veskaLo("rosinvault","gamble")}

}.bind(this))

if(SunMohka.SignInBar.cointype.toUpperCase() == "S"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/5107474554438d57be7152605ea67a78.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}
if(SunMohka.SignInBar.cointype.toUpperCase() == "PERSON"){
Users.coinCorsa = "https://user-uploads.perchance.org/file/837189de985fa03e9fb36adfbabf8c29.png"
SunMohka.SignInBar.coin.dalcorsa(Users.coinCorsa)}

SunMohka.SignInBar.signinliORusername = Crystalline.maaelle('div',2/4,0,2/4,1,SunMohka.SignInBar).dalcorsa("0,0,0,1").corsaera("255,255,255").rhap("7","255,255,255,1","1","solid").ray("SignIn").vcenter().eshe(function(){
if(SunMohka.SignInBar.signinliORusername.mode == "SignIn"){
SunMohka.SignInBar.abovepopupsignin.visible()
}
if(SunMohka.SignInBar.signinliORusername.mode == "Account"){
if(Users.AccountMohka.on=="l"){
Users.AccountMohka.on = "o"
Users.AccountMohka.visible()
SunMohka.SignInBar.signinliORusername.corsaera("0,255,0,1").rhap("7","0,255,0,1","1","solid")
}else{
Users.AccountMohka.on = "l"
Users.AccountMohka.invisible()
SunMohka.SignInBar.signinliORusername.corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid")
}

}
}.bind(this))
SunMohka.SignInBar.signinliORusername.mode = "SignIn"

Users.amISignedIn()

SunMohka.SignInBar.abovepopupsignin = Crystalline.maaelle('div',0,0,1,1).sunano().invis().front("100").dalcorsa("0,0,0,0.5")

SunMohka.SignInBar.popupsignin = Crystalline.maaelle('div',0,0,1,1,SunMohka.SignInBar.abovepopupsignin).front("101").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

SunMohka.SignInBar.popupsignin.login = Crystalline.maaelle('aera',1/9,1/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Name").borhap("12")

SunMohka.SignInBar.popupsignin.pass = Crystalline.maaelle('aera',1/9,3/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("Password").borhap("12")

SunMohka.SignInBar.popupsignin.referer = Crystalline.maaelle('aera',1/9,5/18,7/9,1/18,SunMohka.SignInBar.popupsignin).hint("referer").borhap("12")

SunMohka.SignInBar.popupsignin.signinli = Crystalline.maaelle('div',1/9,7/18,7/9,1/18,SunMohka.SignInBar.popupsignin).eshe(function(){
Users.in = SunMohka.SignInBar.popupsignin.login.value
Users.signIn(SunMohka.SignInBar.popupsignin.login.value,SunMohka.SignInBar.popupsignin.pass.value,SunMohka.SignInBar.popupsignin.referer.value)
}.bind(this)).ray("Enter").rhap("7","255,255,255,1","1","solid").borhap("12")
return SunMohka.SignInBar
}









Users.AccountMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).invis().front("201").dalcorsa("0,0,0,1")

Users.AccountMohka.on = "l"

Users.AccountMohka.unlogLi = Crystalline.maaelle('div',0,0,1/9,1/12,Users.AccountMohka).ray("LogOut").eshe(function(){
SunMohka.SignInBar.signinliORusername.ray("SignIn")
SunMohka.SignInBar.signinliORusername.mode = "SignIn"
Users.AccountMohka.invis()
Users.signOut()
}.bind(this)).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")

Users.Inventory = Crystalline.maaelle('div',0,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")
Users.Inventory.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Inventory).ray("Inventory").vcenter()
Users.Inventory.Items = Crystalline.maaelle('div',0,1/8,1,7/8,Users.Inventory).rhap("7","255,255,255,1","1","solid").flow("o")
Users.Inventory.Items.vItem = []

Users.Inventory.Items.erenlupe = function(tani,corsa,sen){

let hema = Crystalline.maaelle('div',0,0,1,1)

return hema

}.bind(this)




Users.Friends = Crystalline.maaelle('div',1/2,1/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.Friends.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.Friends).ray("Friends").vcenter()




Users.History = Crystalline.maaelle('div',0,5/12,1/2,4/12,Users.AccountMohka).rhap("7","255,255,255,1","1","solid")

Users.History.Tani = Crystalline.maaelle('div',0,0,1,1/8,Users.History).ray("History").vcenter()

Users.History.Melo = Crystalline.maaelle('div',0,1/8,1/9,7/8,Users.History).rhap("0","255,255,255,1","1","solid")

Users.History.Melo.liItems = Crystalline.maaelle('div',0,0,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Items")

Users.History.Melo.liComments = Crystalline.maaelle('div',0,1/6,1,1/6,Users.History.Melo).rhap("0","255,255,255,1","1","solid").ray("Comments")

//bottom bar of page to be a generic banner until person ranks on a leaderboard, at which point upgrades to 'where u are on leaderboard'








window.Creatures = {}



Creatures.magicspell = async function(what,thing,next){ 
    await fetch('https://rosinvault.glitch.me/'+what, { method: 'POST', headers: { 'Content-Type': 'application/json'}, body: JSON.stringify(thing)}).then(response => response.json()).then(data => next(data)).catch(error => alert(error))  
  }


Creatures.getUpdates = async function(){ 
await Creatures.magicspell("getUpdates",{},function(data){
Creatures.UpdatesMohka.aera.ray("")
Creatures.UpdatesMohka.aera.entries = []
let entries = data.entries.split(`:;:

`)
for(i=0;i<entries.length;i++){
let ha = entries[i].split(`:::

`)
if(ha[1].indexOf("RosinVault, ") != -1){
ha[1] = ha[1].replace("Allotopia, ","")
ha[1] = ha[1].replace("RosinVault, ","")
ha[1] = ha[1].replace("GrowingHome, ","")
ha[1] = ha[1].replace("BeautifulPeople2, ","")
Creatures.UpdatesMohka.aera.entries[i] = Crystalline.maaelle('div',0,(1/6)*i,1,1/6,Creatures.UpdatesMohka.aera)
Crystalline.maaelle('div',0,0,1/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[0]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
 Crystalline.maaelle('div',1/4,0,3/4,1,Creatures.UpdatesMohka.aera.entries[i]).ray(ha[1]).rhap("7","255,255,255,1","1","solid").corsaera("255,255,255,1").dalcorsa("0,0,0,1")
}
}
    })
  }
  








Creatures.UpdatesMohka = Crystalline.maaelle('div',0,0,1,1,SunMohka.Aera).dalcorsa("0,0,0,1").sunano().invis().front("50")

Creatures.UpdatesMohka.supdate = ""

Creatures.UpdatesMohka.getViewUpdates = async function(){
Creatures.magicspell("getViewUpdates",{},function(data){
Creatures.UpdatesMohka.viewcount.ray("Views: "+data.views)
})
  }
  




Creatures.UpdatesMohka.aera = Crystalline.maaelle('div',0,1/12,1,11/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").flow("o")

Creatures.UpdatesMohka.returnli = Crystalline.maaelle('div',0,0,1/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter().ray("Return").eshe(function(){
clearInterval(Creatures.UpdatesMohka.supdate)
Creatures.UpdatesMohka.invis()
}.bind(this))

Creatures.UpdatesMohka.viewcount = Crystalline.maaelle('div',5/8,0,3/8,1/12,Creatures.UpdatesMohka).corsaera("255,255,255,1").dalcorsa("0,0,0,1").rhap("7","255,255,255,1","1","solid").vcenter()



Creatures.addUpdatesBottomBar = function(){
let hema = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
Creatures.UpdatesMohka.getViewUpdates()
Creatures.UpdatesMohka.supdate = setInterval(function(){
Creatures.UpdatesMohka.getViewUpdates()
}.bind(this),5000)
Creatures.getUpdates()
Creatures.UpdatesMohka.visible()
}.bind(this)).ray("Updates")
SunMohka.BottomBar.Add(hema)
}.bind(this)







//////////////////////////////////////////////////

































































































let Comments = {}
Comments.submit = function(hem,hsen){
let ish = Crystalline.lseall("in")
if(ish == "o"){
let thing = {}
thing.aera = hem
thing.when = Date.now()
thing.which = hsen
thing.name = SunMohka.SignInBar.signinliORusername.sunaera()
Creatures.magicspell("askToComment",function(data){
Crystalline.say("Comment Submitted")
})
}
}.bind(this)















Profile ={}
Profile.referer = ""
Profile.refercount = ""
Profile.refercode = ""
Profile.Comments = {}
Profile.Comments.History = {}
Profile.Comments.History.topRanked = function(){
let hema = {}

return hema
}.bind(this)

// (leaf rating system)








































































let Store = {}
Store.createStore = function(){
SunMohka.StoreLi = Crystalline.maaelle('div',0,0,1,1).rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").vcenter().corsaera("255,255,255,1").ray("Store").eshe(function(){
SunMohka.StoreMohka.vis()
}.bind(this))
SunMohka.StoreMohka = Crystalline.maaelle('div',0,0,1,1).sunano().dalcorsa("0,0,0,1").corsaera("255,255,255,1").front("203").invis()
SunMohka.StoreMohka.returnLi = Crystalline.maaelle('div',0,0,1/9,1/12,SunMohka.StoreMohka).ray("return").vcenter().dalcorsa("0,0,0,1").corsaera("255,255,255,1").rhap("7","255,255,255,1","1","solid").eshe(function(){
SunMohka.StoreMohka.invis()
}.bind(this))


SunMohka.TopBar.Add(SunMohka.StoreLi)
return SunMohka.StoreLi
}.bind(this)






























Creatures.createTimeBar = function(x,y,w,h,ano){
let hema = {}
hema.TimeBar = Crystalline.maaelle('div',x,y,w,h,ano)
hema.time = ""
hema.TimeBar.heartdrum = setInterval(function(){
if(hema.time != ""){
let timesofar = Date.now() - hema.time
let days = (((timesofar/1000)/60)/60)/24
let hours = ((timesofar/1000)/60)/60
let minutes = (timesofar/1000)/60
let seconds = timesofar/1000

if(hours < 1){
hema.TimeBar.barhourm.lo(0,0,hours,1)
hema.TimeBar.bartwohoursm.lo(0,0,0,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 1 && hours < 2){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,hours-1,1)
hema.TimeBar.barthreehoursm.lo(0,0,0,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 2 && hours < 3){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,hours-2,1)
hema.TimeBar.barsixhoursm.lo(0,0,0,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 3 && hours < 6){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,(hours-3)/3,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,0,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 6 && hours < 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,(hours-6)/6,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,0,1)
}

if(hours > 12){
hema.TimeBar.barhourm.lo(0,0,1,1)
hema.TimeBar.bartwohoursm.lo(0,0,1,1)
hema.TimeBar.barthreehoursm.lo(0,0,1,1)
hema.TimeBar.barsixhoursm.lo(0,0,1,1)
hema.TimeBar.bartwelvehoursm.lo(0,0,1,1)
hema.TimeBar.bartwentyfourhoursm.lo(0,0,(hours-12)/6,1)
}

}

}.bind(this),1000)

hema.TimeBar.maa = function(){
Creatures.magicspell("getTimeAndCollects",{},function(data){
if(data.signedIn != "l"){
hema.time = data.timesofar
}
}.bind(this))
}.bind(this)

window.Zogladorium = hema.TimeBar.maa
hema.TimeBar.betKoCollect = Crystalline.maaelle('div',1/4,1/16,2/4,1/8,hema.TimeBar).invis().corsaera("0,255,0,1").rai(0).vcenter().aerasun("0,255,0,1")
hema.TimeBar.timeshow = Crystalline.maaelle('div',0,1/4,1,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").dalcorsa("42,18,59,1")
hema.TimeBar.barhour = Crystalline.maaelle('div',0,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("1 Hour")
hema.TimeBar.bartwohours = Crystalline.maaelle('div',1/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("2 Hours")
hema.TimeBar.barthreehours = Crystalline.maaelle('div',2/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("3 Hours")
hema.TimeBar.barsixhours = Crystalline.maaelle('div',3/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("6 Hours")
hema.TimeBar.bartwelvehours = Crystalline.maaelle('div',4/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("12 Hours")
hema.TimeBar.bartwentyfourhours = Crystalline.maaelle('div',5/6,1/4,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,0.7","1","solid").vcenter().ray("24 Hours")

hema.TimeBar.barhourm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barhour).dalcorsa("0,255,0,1")
hema.TimeBar.bartwohoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwohours).dalcorsa("0,255,0,1")
hema.TimeBar.barthreehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barthreehours).dalcorsa("0,255,0,1")
hema.TimeBar.barsixhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.barsixhours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwelvehoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwelvehours).dalcorsa("0,255,0,1")
hema.TimeBar.bartwentyfourhoursm = Crystalline.maaelle('div',0,0,0,1,hema.TimeBar.bartwentyfourhours).dalcorsa("0,255,0,1")

hema.TimeBar.reward = {}
hema.TimeBar.reward.claimli = Crystalline.maaelle('div',3/9,2/4,3/9,1/8,hema.TimeBar).rhap("7","255,255,255,1","1","solid").vcenter().ray("Collect your points!").eshe(function(){
Creatures.magicspell("timebarCollect",{},function(data){
Users.refreshMoney()
hema.TimeBar.maa()
hema.TimeBar.betCollect(data.amountCollected)
})

}.bind(this))

hema.TimeBar.reward.first = Crystalline.maaelle('div',0,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.second = Crystalline.maaelle('div',1/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.third = Crystalline.maaelle('div',2/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fourth = Crystalline.maaelle('div',3/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.fifth = Crystalline.maaelle('div',4/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")
hema.TimeBar.reward.sixth = Crystalline.maaelle('div',5/6,3/8,1/6,1/8,hema.TimeBar).rhap("0","255,255,255,1","1","solid")




hema.TimeBar.reward.corsahourc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.first).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwohoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.second).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsathreehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.third).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsasixhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fourth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwelvehoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.fifth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()
hema.TimeBar.reward.corsatwentyfourhoursc = Crystalline.maaelle('div',0,0,1/2,1,hema.TimeBar.reward.sixth).dalcorsa(Users.coinCorsa).dalcorsascroll().dalcorsaeren().dalcorsalsen()

hema.TimeBar.reward.corsahour = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.first).vcenter().ray("+ 5")
hema.TimeBar.reward.corsatwohours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.second).vcenter().ray("+ 4")
hema.TimeBar.reward.corsathreehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.third).vcenter().ray("+ 2")
hema.TimeBar.reward.corsasixhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fourth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwelvehours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.fifth).vcenter().ray("+ 1")
hema.TimeBar.reward.corsatwentyfourhours = Crystalline.maaelle('div',1/2,0,1/2,1,hema.TimeBar.reward.sixth).vcenter().ray("+ 0")

hema.TimeBar.betCollect = function(hemsen){
let raera = ""
if(hemsen == undefined){
raera = "An hour has not passed yet."
}else{
raera = hemsen + " points collected!"
}
hema.TimeBar.betKoCollect.ray(raera)
hema.TimeBar.betKoCollect.rai(0)
let op = 0
let dalo = "p"
hema.TimeBar.betKoCollect.vis()
let hx = setInterval(function(){
let opp = op
if(op>1){opp=1}
hema.TimeBar.betKoCollect.rai(opp)
if(dalo=="p"){op=op+0.02}
if(op>=2){op=1
dalo="l"}
if(dalo=="l"){op=op-0.01}
if(op<0){hema.TimeBar.betKoCollect.invis()
clearInterval(hx)}

}.bind(this),10)
}.bind(this)


hema.TimeBar.maa()
return hema.TimeBar
}.bind(this)




//10 questions per day






















Creatures.Gamble = {}

Creatures.Gamble.maa = function(x,y,w,h,ano){
Creatures.Gamble.Mohka = Crystalline.maaelle('div',x,y,w,h,ano)

Creatures.Gamble.getQuestions = async function(){
await Creatures.magicspell("getMyDailyQuestions",{},function(hem){
if(hem.q1aera != ""){
let q = hem.q1aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question1.ray(q[0]+" vs "+q[1])
Creatures.Gamble.Mohka.q1t1.sen = hem.q1
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.vis()
Creatures.Gamble.Mohka.question1.vis()
Creatures.Gamble.Mohka.q1t1.vis()
Creatures.Gamble.Mohka.q1t1.ray(q[0])
Creatures.Gamble.Mohka.q1t2.vis()
Creatures.Gamble.Mohka.q1t2.ray(q[1])
}else{
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.Amount1.ray("0")
Creatures.Gamble.Mohka.Amount1.invis()
Creatures.Gamble.Mohka.question1.invis()
Creatures.Gamble.Mohka.q1t1.invis()
Creatures.Gamble.Mohka.q1t1.ray("")
Creatures.Gamble.Mohka.q1t2.invis()
Creatures.Gamble.Mohka.q1t2.ray("")
}

if(hem.q2aera != ""){
let qb = hem.q2aera.split("~+^°^+~")
Creatures.Gamble.Mohka.question2.ray(qb[0]+" vs "+qb[1])
Creatures.Gamble.Mohka.q2t1.sen = hem.q2
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.vis()
Creatures.Gamble.Mohka.question2.vis()
Creatures.Gamble.Mohka.q2t1.vis()
Creatures.Gamble.Mohka.q2t1.ray(qb[0])
Creatures.Gamble.Mohka.q2t2.vis()
Creatures.Gamble.Mohka.q2t2.ray(qb[1])
}else{
Creatures.Gamble.Mohka.q2t1.sen = ""
Creatures.Gamble.Mohka.Amount2.ray("0")
Creatures.Gamble.Mohka.Amount2.invis()
Creatures.Gamble.Mohka.question2.invis()
Creatures.Gamble.Mohka.q2t1.invis()
Creatures.Gamble.Mohka.q2t1.ray("")
Creatures.Gamble.Mohka.q2t2.invis()
Creatures.Gamble.Mohka.q2t2.ray("")
}

}.bind(this))
}.bind(this)
Creatures.Gamble.answerQuestion = async function(questionsen,answer,amount){
await Creatures.magicspell("gambleAnswerQuestion",{questionsen:questionsen,answer:answer,amount:amount},function(hem){if(hem.answered == "o"){
Users.refreshMoney()
Creatures.Gamble.getQuestions()
}}.bind(this))
}.bind(this)

Creatures.Gamble.Mohka.streak = Crystalline.maaelle('div',0,1/2,1/2,1/2,Creatures.Gamble.Mohka).ray("Enable Streak").vcenter().rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1").eshe(function(){
if(Creatures.Gamble.Mohka.streak.on == "l"){
Creatures.Gamble.Mohka.streak.on = "o"
Creatures.Gamble.Mohka.streak.ray("Streak Enabled!")
Creatures.Gamble.Mohka.streak.rhap("7","0,0,0,1","1","solid").dalcorsa("0,255,0,1").corsaera("0,0,0,1")
Creatures.Gamble.Mohka.Amount1.ray("5")
Creatures.Gamble.Mohka.Amount2.ray("5")
}else{
Creatures.Gamble.Mohka.streak.on = "l"
Creatures.Gamble.Mohka.streak.ray("Enable Streak")
Creatures.Gamble.Mohka.streak.rhap("7","255,255,255,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")
}

}.bind(this))
Creatures.Gamble.Mohka.streak.on = "l"

Creatures.Gamble.Mohka.questiongetnext = Crystalline.maaelle('div',0,0,1/2,1/2,Creatures.Gamble.Mohka).ray("Get new questions").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){


}.bind(this))

Creatures.Gamble.Mohka.Questions = Crystalline.maaelle('div',1/2,0,1/2,1,Creatures.Gamble.Mohka)


Creatures.Gamble.Mohka.question1 = Crystalline.maaelle('div',0,0,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q1t1 = Crystalline.maaelle('div',2/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t1.sunaera(),amt)

}.bind(this)).invis()
Creatures.Gamble.Mohka.q1t1.sen = ""
Creatures.Gamble.Mohka.q1t2 = Crystalline.maaelle('div',5/9,2/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount1.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q1t1.sen,Creatures.Gamble.Mohka.q1t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount1 = Crystalline.maaelle("aera",2/7,1/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


Creatures.Gamble.Mohka.question2 = Crystalline.maaelle('div',0,4/7,1,1/7,Creatures.Gamble.Mohka.Questions).ray("").vcenter().invis()

Creatures.Gamble.Mohka.q2t1 = Crystalline.maaelle('div',2/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t1.sunaera(),amt)
Creatures.Gamble.Mohka.q2t1.sen = ""

}.bind(this)).invis()
Creatures.Gamble.Mohka.q2t2 = Crystalline.maaelle('div',5/9,6/7,2/9,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let amt = Creatures.Gamble.Mohka.Amount2.sunaera()
Creatures.Gamble.answerQuestion(Creatures.Gamble.Mohka.q2t1.sen,Creatures.Gamble.Mohka.q2t2.sunaera(),amt)

}.bind(this)).invis()

Creatures.Gamble.Mohka.Amount2 = Crystalline.maaelle("aera",2/7,5/7,3/7,1/7,Creatures.Gamble.Mohka.Questions).rhap("7","255,255,255,1","1","solid").hint("Amount Wagered").vcenter().invis()


return Creatures.Gamble.Mohka
}.bind(this)

Creatures.Gamble.Aerakormaa = function(x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)

return hema
}.bind(this)





























Creatures.Leaderboard = {}
Creatures.Leaderboard.maa = function(hem,x,y,w,h,ano){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.type = hem
hema.Tani = Crystalline.maaelle('div',0,0,1,1/7,hema).ray(hem).vcenter().rhap("7","255,255,255,1","1","solid")
return hema
}.bind(this)










































Creatures.Bulletin = {}
Creatures.Bulletin.maa = function(x,y,w,h,ano){
Creatures.Bulletin.Mohka = Crystalline.maaelle('div',x,y,w,h,ano).rhap("7","255,255,255,1","1","solid")
Creatures.Bulletin.Mohka.JustReleasedItemsTani = Crystalline.maaelle('div',0,0,1,1/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid").ray("Just Released! (within 72hours)").vcenter()

Creatures.Bulletin.Mohka.JustReleasedItems = Crystalline.maaelle('div',0,1/9,1,4/9,Creatures.Bulletin.Mohka).rhap("0","255,255,255,1","1","solid")
Creatures.maaLleslai("Dab","Released","Left",100,0,0,1,1,Creatures.Bulletin.Mohka.JustReleasedItems,"","Nothing in the last 72 hours.")

Creatures.Bulletin.Mohka.WelcomeNewMembers = Crystalline.maaelle('div',0,5/9,1,2/9,Creatures.Bulletin.Mohka).ray("Welcome New Members").vcenter().rhap("0","255,255,255,1","1","solid")

Creatures.Bulletin.Mohka.RememberYourPoints = Crystalline.maaelle('div',0,7/9,1,2/9,Creatures.Bulletin.Mohka).ray("Remember Your Points").vcenter().rhap("0","255,255,255,1","1","solid").eshe(function(){
Crystalline.veskaLo("rosinvault","gamble")
}.bind(this))

return Creatures.Bulletin.Mohka
}.bind(this)































Creatures.maaLleslai = function(hemdal,hemsort,slideway,slidespeed,x,y,w,h,ano,mcorsa,mtani){
let hema = Crystalline.maaelle('div',x,y,w,h,ano).rhap("0","255,255,255,1","1","solid")
hema.type = hemdal
hema.sort = hemsort
hema.slideway = slideway
hema.slidespeed = slidespeed

hema.slideHolder = Crystalline.maaelle('div',0,0,16/18,1,hema).dalcorsa("255,255,255,1").front("3").flow("o").dalcorsa(mcorsa)
hema.slides = []

hema.slideHolderEmpty = Crystalline.maaelle('div',0,0,1,1,hema.slideHolder).vcenter().ray(mtani).invis().aeraAlign("center").aeraeren(28).dalcorsa("0,0,0,0.8")



hema.onSlide = 0
hema.autoplaying = "o"


hema.sliderele = []
hema.seconds = 0

hema.rele = setInterval(function(){
if(hema.slides.length > 0){
hema.slideHolderEmpty.invis()
}else{hema.slideHolderEmpty.vis()}
for(i=0;i<hema.sliderele.length;i++){
hema.sliderele[i]()
}},1000)
hema.slidewidth = 1000
hema.heartdrumsen = 0
hema.heartdrum = setInterval(function(){
if(hema.autoplaying == "o" && hema.slides.length > 0){
hema.heartdrumsen++
if(hema.heartdrumsen>hema.slides.length*hema.slidewidth){
hema.heartdrumsen=0
hema.slideHolder.scroll({
left: hema.heartdrumsen,
top:0,
behavior: "instant",
})
}else{
hema.slideHolder.scroll(hema.heartdrumsen,0)
}
}
}.bind(this),hema.slidespeed)

hema.CreateSlide = function(hemb,time,last){
hemb.Mohka = Crystalline.maaelle('div',0,0,1,1).dalcorsa("0,0,0,1")
hemb.Mohka.Title = Crystalline.maaelle('div',1/9,0,7/9,1/7,hemb.Mohka).ray(hemb.ShowotronTitle).vcenter()
hemb.Mohka.Image = Crystalline.maaelle('div',0,1/7,1,4/7,hemb.Mohka).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hemb.Mohka.Countdown = Crystalline.maaelle('div',1/9,2/7,7/9,2/7,hemb.Mohka).vcenter()



if(hema.sort=="Upcoming"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = time-now
if(when > 0){
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)

}else{
hemb.Mohka.Countdown.ray(`<span style='color:rgb(255,215,105)'>Just Released!</span>`)

}
})
}

if(hema.sort=="Released"){
hema.sliderele.push(function(){
let now = Math.round(Date.now()/1000)
let when = now-time
let days = Math.floor(when/86400)
when %= 86400
let hours = Math.floor(when/3600)
when %= 3600
let minutes = Math.floor(when/60)
when %= 60
let seconds = when
hemb.Mohka.Countdown.white()
hemb.Mohka.Countdown.ray(`Days: <span style='color:rgb(100,255,100)'>`+days+`</span> Hours: <span style='color:rgb(100,255,100)'>`+hours+`</span> Minutes: <span style='color:rgb(100,255,100)'>`+minutes+`</span> Seconds: <span style='color:rgb(100,255,100)'>`+seconds+`</span>`)
})
}





hemb.Mohka.Description = Crystalline.maaelle('div',0,5/7,1,2/7,hemb.Mohka).ray(hemb.ShowotronDescription).vcenter()
let hemlink = Crystalline.maaelle('div',0,0,1,1).dalcorsa(hemb.entryimage).dalcorsascroll().dalcorsaeren()
hema.slideHolder.add(hemb.Mohka,hemlink,last)
}.bind(this)

hema.getSlidesFromServer = async function(){
await Creatures.magicspell("getEntries",{},hema.getSlidesFromServerXX)   
  }

hema.getSlidesFromServerXX = async function(hem){
let vslides = hem.entries.split(",")
for(i=0;i<vslides.length;i++){
hema.getSlideFromServer(vslides[i],"l",i,vslides.length)
}
}.bind(this)





hema.getSlideFromServer = async function(hemx,last,sen,vsen){
await Creatures.magicspell("loadEntry",{entrylocation:hemx},function(hem){
let datas = hem.entry.split("~*^*~")
let hemb = {}
hemb.entrynumber = datas[0]
hemb.entryname = datas[1]
hemb.entryimage = datas[2]
hemb.entrydescription = datas[3]
hemb.entryattributes = datas[4]
hemb.entrytype = datas[5]
hemb.ekkattributes = [] 
let vattribute = hemb.entryattributes.split("~x*^*x~")
for(i=0;i<vattribute.length;i++){
let atr = vattribute[i].split("~!*^*!~")
hemb.ekkattributes.push(atr)
let f = atr[0]
let ood = atr[1]
hemb[f] = ood
}

if(hemb.entrytype == hema.type){
if(hema.sort=="Upcoming"){

let nowdate = Date.now()
let onShowotron = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
let daysbefore = parseInt(hemb.DaysBeforeReleaseAddToGalleryAndShowotron) * 24 * 60 * 60 * 1000
if(day-daysbefore < now && day > now - (24*60*60*1000)){
onShowotron = "o"
}
if(onShowotron == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}

}

}
if(hema.sort=="Released"){
let nowdate = Date.now()
let onJustReleased = "l"
let datelings = hemb.ReleaseDate.split("-")
let d1 = parseInt(datelings[0])
let d2 = parseInt(datelings[1])-1
let d3 = parseInt(datelings[2])
let parsedTime = hemb.ReleaseTime.split(":")
let hour = parseInt(parsedTime[0])
let minute = parsedTime[1]
let day = parseInt(Date.UTC(d1,d2,d3,hour,minute))
let noww = Date.now()
let now = parseInt(noww)
if(now > day && now < day +3*(24*60*60*1000)){
onJustReleased = "o"
}
if(onJustReleased == "o"){
let time = Math.round(day/1000)
hema.CreateSlide(hemb,time,last)
if(hema.SunHemb==undefined){
hema.SunHemb = hemb
hema.SunTime = time
}
}//Released


}


}//Dab
if(sen == vsen-1 && hema.slides.length > 0){hema.CreateSlide(hema.SunHemb,hema.SunTime,"o")}


}.bind(this))
 }


hema.slideHolder.add = function(hem,hemlink,last){
if(last=="l"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hemlink.lo(0,(1/10)+(1/5)*hema.slides.length,1,1/10)
hemlink.slidesen = hema.slides.length
hemlink.eshe(function(){
if(hema.autoplaying=="l"){
hema.autoplaying = "o"
}


if(Math.floor(hema.slidewidth*hemlink.slidesen) != Math.floor(hema.slideHolder.scrollLeft)){
hema.autoplaying = "l"
hema.slideHolder.scroll({
left: hema.slidewidth*hemlink.slidesen,
top:0,
behavior: "smooth",
})
}




}.bind(this))
hem.eshe(function(){
alert("hi")

}.bind(this))
hema.vli.ano(hemlink)
hema.slides.push(hem)
}
if(last=="o"){
hem.lo(hema.slides.length,0,1,1)
hema.slideHolder.ano(hem)
hema.slidewidth = hem.offsetWidth
hem.eshe(function(){
alert("hi")

}.bind(this))
//hema.slides.push(hem)
}
}.bind(this)



hema.vli = Crystalline.maaelle('div',16/18,0,2/18,1,hema).dalcorsa("0,0,0,0.8").flow("o").front("5")
hema.getSlidesFromServer()


return hema
}.bind(this)


















Creatures.RTree = function(x,y,w,h,ano,leafsia,leaferen){
let hema = Crystalline.maaelle('div',x,y,w,h,ano)
hema.MyRefCode = Crystalline.maaelle('div',1/2,0,1/2,1,hema)
hema.vLeaf = Crystalline.maaelle('div',0,0,1/2,1,hema)

hema.getLeafDalcorsa = function(){
let lf = Crystalline.fate(leaferen)
let lc = leafsia+lf+".png"
return lc
}.bind(this)

hema.vLeaf.leaf0 = Crystalline.maaelle('div',0,0/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(leafsia+"X.png").dalcorsalsen().dalcorsavcenter()
let ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf1 = Crystalline.maaelle('div',0,1/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf2 = Crystalline.maaelle('div',0,2/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf3 = Crystalline.maaelle('div',0,3/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()
ty = hema.getLeafDalcorsa()
hema.vLeaf.leaf4 = Crystalline.maaelle('div',0,4/5,1,1/5,hema.vLeaf).dalcorsascroll().dalcorsaloeren().dalcorsa(ty).dalcorsalsen().dalcorsavcenter()

return hema
}.bind(this)

















SunMohka.nav = Crystalline.maaelle('div',0,0,1,1/18,SunMohka.Aera).flow("o").rhap("7","255,255,255,1","1","solid")
SunMohka.nav.under = Crystalline.maaelle('div',0,0,1/4,1,SunMohka.nav).ray("uploads").eshe(function(){
SunMohka.account.vis()
SunMohka.EntryEditMohka.invis()
SunMohka.gq.invis()
SunMohka.comments.invis()
SunMohka.nav.gc.rhap("7","255,255,255,1","1","solid")
SunMohka.nav.under.rhap("7","0,255,0,1","1","solid")
SunMohka.nav.en.rhap("7","255,255,255,1","1","solid")
SunMohka.nav.comments.rhap("7","255,255,255,1","1","solid")
}.bind(this)).rhap("7","255,255,255,1","1","solid").vcenter()
SunMohka.nav.en = Crystalline.maaelle('div',1/4,0,1/4,1,SunMohka.nav).ray("entries").eshe(function(){
SunMohka.account.invis()
SunMohka.EntryEditMohka.vis()
SunMohka.gq.invis()
SunMohka.comments.invis()
SunMohka.nav.gc.rhap("7","255,255,255,1","1","solid")
SunMohka.nav.under.rhap("7","255,255,255,1","1","solid")
SunMohka.nav.en.rhap("7","0,255,0,1","1","solid")
SunMohka.nav.comments.rhap("7","255,255,255,1","1","solid")
}.bind(this)).rhap("7","255,255,255,1","1","solid").vcenter()
SunMohka.nav.gc = Crystalline.maaelle('div',2/4,0,1/4,1,SunMohka.nav).ray("gamble").eshe(function(){
SunMohka.account.invis()
SunMohka.EntryEditMohka.invis()
SunMohka.gq.vis()
SunMohka.comments.invis()
SunMohka.nav.gc.rhap("7","0,255,0,1","1","solid")
SunMohka.nav.under.rhap("7","255,255,255,1","1","solid")
SunMohka.nav.en.rhap("7","255,255,255,1","1","solid")
SunMohka.nav.comments.rhap("7","255,255,255,1","1","solid")
}.bind(this)).rhap("7","255,255,255,1","1","solid").vcenter()
SunMohka.nav.comments = Crystalline.maaelle('div',3/4,0,1/4,1,SunMohka.nav).ray("comments").eshe(function(){
SunMohka.account.invis()
SunMohka.EntryEditMohka.invis()
SunMohka.gq.invis()
SunMohka.comments.vis()
SunMohka.nav.gc.rhap("7","255,255,255,1","1","solid")
SunMohka.nav.under.rhap("7","255,255,255,1","1","solid")
SunMohka.nav.en.rhap("7","255,255,255,1","1","solid")
SunMohka.nav.comments.rhap("7","0,255,0,1","1","solid")
}.bind(this)).rhap("7","255,255,255,1","1","solid").vcenter()


SunMohka.comments = Crystalline.maaelle('div',0,1/18,1,17/18,SunMohka.Aera).flow("o").invis()




SunMohka.gq = Crystalline.maaelle('div',0,1/18,1,17/18,SunMohka.Aera).flow("o").invis()
SunMohka.gq.qekkmohka = Crystalline.maaelle('div',0,0,2/4,1,SunMohka.gq).rhap("7","255,255,255,1","1","solid").flow("o")

SunMohka.gq.qekkmohka.top = Crystalline.maaelle('div',0,0,1,1/14,SunMohka.gq.qekkmohka).rhap("7","255,255,255,1","1","solid")

SunMohka.gq.qekkmohka.tani = Crystalline.maaelle('div',1/6,0,4/6,1,SunMohka.gq.qekkmohka.top).vcenter().ray("Questions")

SunMohka.gq.newOn = "l"

SunMohka.gq.team1 = Crystalline.maaelle('aera',6/12,0,2/12,1/8,SunMohka.gq).rhap("7","255,255,255,1","1","solid").ama("Team1").invis()
SunMohka.gq.teamaera = Crystalline.maaelle('div',8/12,0,2/12,1/8,SunMohka.gq).vcenter().ray(" vs ").invis()
SunMohka.gq.team2 = Crystalline.maaelle('aera',10/12,0,2/12,1/8,SunMohka.gq).rhap("7","255,255,255,1","1","solid").ama("Team2").invis()

SunMohka.gq.desc = Crystalline.maaelle('aera',6/12,1/8,6/12,2/8,SunMohka.gq).rhap("7","255,255,255,1","1","solid").ama("optional description").invis()

SunMohka.gq.gametimetani = Crystalline.maaelle('div',6/12,3/8,6/12,1/8,SunMohka.gq).vcenter().ray("Game Time").invis()

SunMohka.gq.date = Crystalline.maaelle('input',6/12,4/8,3/12,1/8,SunMohka.gq).invis()
SunMohka.gq.date.type = "Date"
SunMohka.gq.time = Crystalline.maaelle('input',9/12,4/8,3/12,1/8,SunMohka.gq).invis()
SunMohka.gq.time.type = "Time"



SunMohka.gq.bettimetani = Crystalline.maaelle('div',6/12,5/8,6/12,1/8,SunMohka.gq).vcenter().ray("Bettable Until").invis()

SunMohka.gq.betdate = Crystalline.maaelle('input',6/12,6/8,3/12,1/8,SunMohka.gq).invis()
SunMohka.gq.betdate.type = "Date"
SunMohka.gq.bettime = Crystalline.maaelle('input',9/12,6/8,3/12,1/8,SunMohka.gq).invis()
SunMohka.gq.bettime.type = "Time"

SunMohka.gq.done = Crystalline.maaelle('div',6/12,7/8,6/12,1/8,SunMohka.gq).rhap("7","255,255,255,1","1","solid").ray("Done").vcenter().invis().eshe(function(){
SunMohka.gq.qekkmohka.ekk.erenlupe(SunMohka.gq.newOn)

}.bind(this))

//question record


SunMohka.gq.getQuestion = function(sen){
let qt = "question"+sen
Creatures.magicspell("getQuestion",{sen:SunMohka.gq.qekkmohka.ekk[qt].sen.toString()},async function(data){
if(data.question != undefined && data.question != ""){
let qx = data.question.split("~+^°^+~")
qx.team1 = qx[0]
qx.team2 = qx[1]
qx.desc = qx[2]
qx.date = qx[3]
qx.time = qx[4]
qx.betdate = qx[5]
qx.bettime = qx[6]
SunMohka.gq.qekkmohka.ekk[qt].tani.ray(qx.team1+" vs "+qx.team2)
SunMohka.gq.qekkmohka.ekk[qt].li.eshe(function(){
for(cc=0;cc<10;cc++){
let wv = "question"+cc
SunMohka.gq.qekkmohka.ekk[wv].li.corsaera("255,255,255,1")
}
SunMohka.gq.qekkmohka.ekk[qt].li.corsaera("0,255,0,1")
SunMohka.gq.resolveOn = SunMohka.gq.qekkmohka.ekk[qt].sen
SunMohka.gq.resolvemohka.vis()
SunMohka.gq.resolvemohka.whowonteam1.ray(qx.team1)
SunMohka.gq.resolvemohka.whowonteam2.ray(qx.team2)
SunMohka.gq.newOn = ""
SunMohka.gq.desc.invis().ray("")
SunMohka.gq.team1.invis().ray("")
SunMohka.gq.teamaera.invis()
SunMohka.gq.team2.invis().ray("")
SunMohka.gq.gametimetani.invis()
SunMohka.gq.date.invis()
SunMohka.gq.time.invis()
SunMohka.gq.bettimetani.invis()
SunMohka.gq.betdate.invis()
SunMohka.gq.bettime.invis()
SunMohka.gq.done.invis()
}.bind(this)).ray("Resolve")
}else{
SunMohka.gq.qekkmohka.ekk[qt].tani.ray(" ")
SunMohka.gq.qekkmohka.ekk[qt].li.ray("Create").eshe(function(){
for(cc=0;cc<10;cc++){
let wv = "question"+cc
SunMohka.gq.qekkmohka.ekk[wv].li.corsaera("255,255,255,1")
}
SunMohka.gq.qekkmohka.ekk[qt].li.corsaera("0,255,0,1")
SunMohka.gq.resolvemohka.invis()
SunMohka.gq.resolvemohka.whowonteam1.ray("")
SunMohka.gq.resolvemohka.whowonteam2.ray("")
SunMohka.gq.newOn = sen
SunMohka.gq.desc.vis().ray("")
SunMohka.gq.team1.vis().ray("")
SunMohka.gq.teamaera.vis()
SunMohka.gq.team2.vis().ray("")
SunMohka.gq.gametimetani.vis()
SunMohka.gq.date.vis()
SunMohka.gq.time.vis()
SunMohka.gq.bettimetani.vis()
SunMohka.gq.betdate.vis()
SunMohka.gq.bettime.vis()
SunMohka.gq.done.vis()
}.bind(this))

}
})
}.bind(this)




SunMohka.gq.resolveOn = "l"
SunMohka.gq.resolvemohka = Crystalline.maaelle('div',1/2,0,1/2,1,SunMohka.gq).invis()
SunMohka.gq.resolvemohka.whowontani = Crystalline.maaelle('div',1/3,1/6,1/3,1/6,SunMohka.gq.resolvemohka).vcenter().ray("Who Won").rhap("7","255,255,255,1","1","solid")
SunMohka.gq.resolvemohka.whowonteam1 = Crystalline.maaelle('div',0,3/6,1/3,1/6,SunMohka.gq.resolvemohka).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let who = SunMohka.gq.resolvemohka.whowonteam1.sunaera()
Creatures.magicspell("resolveQuestion",{questionsen:SunMohka.gq.resolveOn.toString(),whowon:who},async function(data){
SunMohka.gq.getQuestion(SunMohka.gq.resolveOn.toString())
SunMohka.gq.resolveOn = "l"
SunMohka.gq.resolvemohka.invis()
SunMohka.gq.resolvemohka.whowonteam1.ray("")
SunMohka.gq.resolvemohka.whowonteam2.ray("")
})

}.bind(this))
SunMohka.gq.resolvemohka.whowonteam2 = Crystalline.maaelle('div',2/3,3/6,1/3,1/6,SunMohka.gq.resolvemohka).rhap("7","255,255,255,1","1","solid").vcenter().eshe(function(){
let who = SunMohka.gq.resolvemohka.whowonteam2.sunaera()
Creatures.magicspell("resolveQuestion",{questionsen:SunMohka.gq.resolveOn.toString(),whowon:who},async function(data){
SunMohka.gq.getQuestion(SunMohka.gq.resolveOn.toString())
SunMohka.gq.resolveOn = "l"
SunMohka.gq.resolvemohka.invis()
SunMohka.gq.resolvemohka.whowonteam1.ray("")
SunMohka.gq.resolvemohka.whowonteam2.ray("")
})

}.bind(this))

SunMohka.gq.qekkmohka.ekk = Crystalline.maaelle('div',0,1/9,1,8/9,SunMohka.gq.qekkmohka).flow("o")

for(c=0;c<10;c++){
let qt = "question"+c
SunMohka.gq.qekkmohka.ekk[qt] = Crystalline.maaelle('div',0,c*(1/10),1,1/10,SunMohka.gq.qekkmohka.ekk)
SunMohka.gq.qekkmohka.ekk[qt].mode = "l"
SunMohka.gq.qekkmohka.ekk[qt].sen = c
SunMohka.gq.qekkmohka.ekk[qt].tani = Crystalline.maaelle('div',0,0,4/5,1,SunMohka.gq.qekkmohka.ekk[qt]).rhap("7","255,255,255,1","1","solid")
SunMohka.gq.qekkmohka.ekk[qt].li = Crystalline.maaelle('div',4/5,0,1/5,1,SunMohka.gq.qekkmohka.ekk[qt]).rhap("7","255,255,255,1","1","solid").vcenter()
SunMohka.gq.getQuestion(c)
}





SunMohka.gq.qekkmohka.ekk.erenlupe = async function(questionsen){
let haera = SunMohka.gq.team1.sunaera()+"~+^°^+~"+SunMohka.gq.team2.sunaera()+"~+^°^+~"+SunMohka.gq.desc.sunaera()+"~+^°^+~"+SunMohka.gq.date.sunaera()+"~+^°^+~"+SunMohka.gq.time.sunaera()+"~+^°^+~"+SunMohka.gq.betdate.sunaera()+"~+^°^+~"+SunMohka.gq.bettime.sunaera()
await Creatures.magicspell("maaQuestion",{questionsen:questionsen,haera:haera},async function(data){
SunMohka.gq.newOn = ""
SunMohka.gq.desc.invis().ray("")
SunMohka.gq.team1.invis().ray("")
SunMohka.gq.teamaera.invis()
SunMohka.gq.team2.invis().ray("")
SunMohka.gq.gametimetani.invis()
SunMohka.gq.date.invis()
SunMohka.gq.time.invis()
SunMohka.gq.bettimetani.invis()
SunMohka.gq.betdate.invis()
SunMohka.gq.bettime.invis()
SunMohka.gq.done.invis()
SunMohka.gq.getQuestion(questionsen)
})
}.bind(this)


SunMohka.account = Crystalline.maaelle('div',0,1/18,1,17/18,SunMohka.Aera).flow("o").invis()
SunMohka.account.update = Crystalline.maaelle('form',0,0,1/3,1/8,SunMohka.account)
SunMohka.account.update.ref = "uploadForm"
SunMohka.account.update.id="uploadForm"
SunMohka.account.update.action = "https://rosinvault.glitch.me/upload"
SunMohka.account.update.method = "post"
SunMohka.account.update.enctype = "multipart/form-data"
SunMohka.account.update.uploadli = Crystalline.maaelle('input',0,0,1,1/2,SunMohka.account.update)
SunMohka.account.update.uploadli.type = "file"
SunMohka.account.update.uploadli.name = "sampleFile"
SunMohka.account.update.uploadko = Crystalline.maaelle('input',0,1/2,1,1/2,SunMohka.account.update)
SunMohka.account.update.uploadko.type= "submit"
SunMohka.account.update.uploadko.value = "Upload!"

SunMohka.account.update2 = Crystalline.maaelle('form',1/3,0,1/3,1/8,SunMohka.account)
SunMohka.account.update2.ref = "uploadForm"
SunMohka.account.update2.id="uploadForm"
SunMohka.account.update2.action = "https://rosinvault.glitch.me/upload2"
SunMohka.account.update2.method = "post"
SunMohka.account.update2.enctype = "multipart/form-data"
SunMohka.account.update2.uploadli = Crystalline.maaelle('input',0,0,1,1/2,SunMohka.account.update2)
SunMohka.account.update2.uploadli.type = "file"
SunMohka.account.update2.uploadli.name = "sampleFile"
SunMohka.account.update2.uploadko = Crystalline.maaelle('input',0,1/2,1,1/2,SunMohka.account.update2)
SunMohka.account.update2.uploadko.type= "submit"
SunMohka.account.update2.uploadko.value = "three"

SunMohka.account.update3 = Crystalline.maaelle('form',2/3,0,1/3,1/8,SunMohka.account)
SunMohka.account.update3.ref = "uploadForm"
SunMohka.account.update3.id="uploadForm"
SunMohka.account.update3.action = "https://rosinvault.glitch.me/upload3"
SunMohka.account.update3.method = "post"
SunMohka.account.update3.enctype = "multipart/form-data"
SunMohka.account.update3.uploadli = Crystalline.maaelle('input',0,0,1,1/2,SunMohka.account.update3)
SunMohka.account.update3.uploadli.type = "file"
SunMohka.account.update3.uploadli.name = "sampleFile"
SunMohka.account.update3.uploadko = Crystalline.maaelle('input',0,1/2,1,1/2,SunMohka.account.update3)
SunMohka.account.update3.uploadko.type= "submit"
SunMohka.account.update3.uploadko.value = "GLTF"









SunMohka.EntryEditMohka = Crystalline.maaelle('div',0,1/18,1,17/18,SunMohka.Aera).flow("o").invis()
SunMohka.EntryEditMohka.entrynumber = Crystalline.maaelle('aera',0,0,1/4,1/5,SunMohka.EntryEditMohka).hint("number")
SunMohka.EntryEditMohka.entryname = Crystalline.maaelle('aera',1/4,0,1/4,1/5,SunMohka.EntryEditMohka).hint("name")
SunMohka.EntryEditMohka.entryimagelink = Crystalline.maaelle('aera',2/4,0,1/4,1/5,SunMohka.EntryEditMohka).hint("image")
SunMohka.EntryEditMohka.seallli = Crystalline.maaelle('div',3/4,0,1/4,1/5,SunMohka.EntryEditMohka).vcenter().rhap("7","255,255,255,1","1","solid").ray("save").eshe(function(){
Entries.Save()
}.bind(this))
SunMohka.EntryEditMohka.entrydescription = Crystalline.maaelle('aera',0,1/5,1/2,4/5,SunMohka.EntryEditMohka).hint("description")

SunMohka.EntryEditMohka.attributeselector = Crystalline.maaelle('select',1/2,3/10,1/2,1/10,SunMohka.EntryEditMohka).eshe(function(){
let sunaera = SunMohka.EntryEditMohka.attributeselector.sunaera()
Entries.preset(sunaera)
}.bind(this))

Crystalline.maaelle('option',SunMohka.EntryEditMohka.attributeselector).ray("Select Preset")
Crystalline.maaelle('option',SunMohka.EntryEditMohka.attributeselector).ray("none")
Crystalline.maaelle('option',SunMohka.EntryEditMohka.attributeselector).ray("Event")
Crystalline.maaelle('option',SunMohka.EntryEditMohka.attributeselector).ray("Dab")
Crystalline.maaelle('option',SunMohka.EntryEditMohka.attributeselector).ray("Plant")
Crystalline.maaelle('option',SunMohka.EntryEditMohka.attributeselector).ray("GambleQuestion")
Crystalline.maaelle('option',SunMohka.EntryEditMohka.attributeselector).ray("HomeImg")
Crystalline.maaelle('option',SunMohka.EntryEditMohka.attributeselector).ray("Card")
Crystalline.maaelle('option',SunMohka.EntryEditMohka.attributeselector).ray("Booster")

SunMohka.EntryEditMohka.attributesmohka = Crystalline.maaelle('div',1/2,2/5,1/2,3/5,SunMohka.EntryEditMohka).flow("o")


SunMohka.vEntryMohka = Crystalline.maaelle('div',0,1,1,10/12,SunMohka.EntryEditMohka).flow("o")

  
  








window.Entries = {}
Entries.entryattributetitles = []
Entries.entryattributedescriptions = []
Entries.entrylist = []

Entries.start = async function(){
await Entries.loadEntries()
}

Entries.loadEntries = async function(){
SunMohka.vEntryMohka.ray("")
Entries.getEntriesX()
}

 Entries.getEntriesX = async function(){ 
Entries.entrylist = []
await Creatures.magicspell("getEntries",{},async function(data){if(data.entries.indexOf(",") != -1){
        let hem = data.entries.split(",")
for(let i = 0; i < hem.length; i++){
await Entries.loadEntryX(hem[i])} 
  }  
if(data.entries.length == 1){await Entries.loadEntryX(data.entries)}})    
    }

Entries.loadEntryX = async function(entrylocation){ 
await Creatures.magicspell("loadEntry",{entrylocation:entrylocation},function(data){
Entries.loadEntry(data.entry)
})}

Entries.loadEntry = function(entry){
if(entry.indexOf("~*^*~") != -1){
let entrydatas = entry.split("~*^*~")
let entrynumber = entrydatas[0]
let entryname = "thing"
if(entrydatas.length > 1){entryname = entrydatas[1]}

let entryimagelink = "thing"
if(entrydatas.length > 2){entryimagelink = entrydatas[2]}

let entrydescription = "thing"
if(entrydatas.length > 3){entrydescription = entrydatas[3]}

let entryattributesstring = "a~!*^*!~0~x*^*x~b~!*^*!~0"
if(entrydatas.length > 4){entryattributesstring = entrydatas[4]}

let entrytype = "none"
if(entrydatas.length > 5){entrytype = entrydatas[5]}



let entryattributes = entryattributesstring.split("~x*^*x~")
let entrymohka = Crystalline.maaelle('div',0,Entries.entrylist.length,1,1,SunMohka.vEntryMohka).rhap("7","0,255,0,1","1","solid").dalcorsa("0,0,0,1").corsaera("255,255,255,1")
Entries.entrylist.push(entrymohka)

entrymohka.name = Crystalline.maaelle('div',1/5,0,3/5,1/8,entrymohka).ray(entryname).vcenter()

  entrymohka.number = Crystalline.maaelle('div',0,0,1/5,1/8,entrymohka).ray(entrynumber).vcenter()

entrymohka.img = Crystalline.maaelle('div',0,1/8,1,4/8,entrymohka).dalcorsascroll().dalcorsaeren().dalcorsa(entryimagelink)

entrymohka.description = Crystalline.maaelle('div',0,5/8,1,1/8,entrymohka).ray(entrydescription)

entrymohka.attributesx = Crystalline.maaelle('div',0,6/8,1,2/8,entrymohka).flow("o")

    entrymohka.editli = Crystalline.maaelle('div',4/5,0,1/5,1/8,entrymohka).ray("edit").vcenter().rhap("7","255,255,255,1","1","solid").eshe(function(){
scrollTo(0,0)
SunMohka.EntryEditMohka.entrynumber.ray(entrynumber)
SunMohka.EntryEditMohka.entryname.ray(entryname)
SunMohka.EntryEditMohka.entryimagelink.ray(entryimagelink)
SunMohka.EntryEditMohka.entrydescription.ray(entrydescription)
SunMohka.EntryEditMohka.attributeselector.ray(entrytype)
Entries.loadattributes(entryattributesstring)
}.bind(this))

for(let us = 0; us < entryattributes.length; us++){
let attribute = Crystalline.maaelle('div',0,(1/4)*us,1,1/4,entrymohka.attributesx).rhap("7","255,255,255,1","1","solid")
let asa = entryattributes[us].split("~!*^*!~")
let attributename = Crystalline.maaelle('div',0,0,1,1/2,attribute).ray(asa[0] + ": ")
let attributeat = Crystalline.maaelle('div',1/2,0,1,1/2,attribute).ray(asa[1])
}
}
  }


Entries.saveEntryX = async function(fullstring,entrylocation){ 
await Creatures.magicspell("saveEntry",{fullstring:fullstring,entrylocation:entrylocation},async function(data){
Entries.loadEntries()
})
}

   
  
Entries.saveEntry = async function(){
let entryattributious = []
  for(let i = 0; i < Entries.entryattributetitles.length; i++){    
let av = Entries.entryattributetitles[i].sunaera()
entryattributious.push(av+"~!*^*!~"+Entries.entryattributedescriptions[i].value)
}   
let entryattributestring = entryattributious.join("~x*^*x~")
let fullstring = SunMohka.EntryEditMohka.entrynumber.value+"~*^*~"+SunMohka.EntryEditMohka.entryname.value+"~*^*~"+SunMohka.EntryEditMohka.entryimagelink.value+"~*^*~"+SunMohka.EntryEditMohka.entrydescription.value+"~*^*~"+entryattributestring+"~*^*~"+SunMohka.EntryEditMohka.attributeselector.value
await Entries.saveEntryX(fullstring,"entries/"+SunMohka.EntryEditMohka.entrynumber.value)
return fullstring
}

Entries.Save = function(){
  Entries.saveEntry()
}

Entries.preset = function(hem){
Entries.entryattributedescriptions = []
Entries.entryattributetitles = []
    SunMohka.EntryEditMohka.attributesmohka.ray("")
if(hem == "none"){    
    }
    if(hem == "Event"){
      Entries.addspecificattribute("Weight")
      Entries.addspecificattribute("Effect")
    }
    if(hem == "Card"){
Entries.addspecificattribute("CardType")
Entries.addspecificattribute("Role")
Entries.addspecificattribute("Stats")
Entries.addspecificattribute("Ability1")
Entries.addspecificattribute("Ability2")
Entries.addspecificattribute("Quotes")
Entries.addspecificattribute("Rarity")
    }
    if(hem == "Dab"){
Entries.addspecificattribute("Strains")
Entries.addspecificattribute("ReleaseDate")
Entries.addspecificattribute("ReleaseTime")
Entries.addspecificattribute("ShowotronTitle")
Entries.addspecificattribute("ShowotronDescription")
Entries.addspecificattribute("Price")
Entries.addspecificattribute("DaysBeforeReleaseAddToGalleryAndShowotron")
Entries.addspecificattribute("Amount")
Entries.addspecificattribute("Temperature")
Entries.addspecificattribute("Type")
    }
if(hem == "Plant"){
Entries.addspecificattribute("Strains")
Entries.addspecificattribute("ReleaseDate")
Entries.addspecificattribute("ReleaseTime")
Entries.addspecificattribute("ShowotronTitle")
Entries.addspecificattribute("ShowotronDescription")
Entries.addspecificattribute("Price")
Entries.addspecificattribute("DaysBeforeReleaseAddToGalleryAndShowotron")
Entries.addspecificattribute("Amount")
Entries.addspecificattribute("Temperature")
Entries.addspecificattribute("Type")
    }
if(hem == "GambleQuestion"){
Entries.addspecificattribute("Matchup")
Entries.addspecificattribute("Question")
    }
if(hem == "Booster"){
Entries.addspecificattribute("Cards")
Entries.addspecificattribute("ReleaseDate")
Entries.addspecificattribute("ReleaseTime")
Entries.addspecificattribute("ShowotronTitle")
Entries.addspecificattribute("ShowotronDescription")
Entries.addspecificattribute("Price")
Entries.addspecificattribute("DaysBeforeReleaseAddToGalleryAndShowotron")
Entries.addspecificattribute("Amount")
Entries.addspecificattribute("Mutations")
Entries.addspecificattribute("Type")
    }
if(hem == "Coin"){
Entries.addspecificattribute("IdealTemperature")
Entries.addspecificattribute("Strains")
    }
if(hem == "HomeImg"){
Entries.addspecificattribute("Date")
    }
  }

Entries.addspecificattribute = function(hem){
    let attributesholder = Crystalline.maaelle('div',0,(1/10)*Entries.entryattributetitles.length,1,1/10,SunMohka.EntryEditMohka.attributesmohka)
    let attributestitle = Crystalline.maaelle('div',0,0,1/2,1,attributesholder).hint("title").ray(hem)
    Entries.entryattributetitles.push(attributestitle)    
let attributesvalue = ""
if(hem == "ReleaseDate"){
attributesvalue = Crystalline.maaelle('input',1/2,0,1/2,1,attributesholder)
attributesvalue.type = "Date"
}
if(hem == "ReleaseTime"){
attributesvalue = Crystalline.maaelle('input',1/2,0,1/2,1,attributesholder)
attributesvalue.type = "Time"
}

if(hem != "ReleaseDate" && hem != "ReleaseTime"){attributesvalue = Crystalline.maaelle('aera',1/2,0,1/2,1,attributesholder).hint("value")    
}
   if(hem == "Date"){
let d = new Date()
let dd = d.toUTCString()
attributesvalue.ray(dd)
}

    Entries.entryattributedescriptions.push(attributesvalue)
  }

Entries.loadattributes = function(attributesstring){
Entries.entryattributedescriptions = []
Entries.entryattributetitles = []
SunMohka.EntryEditMohka.attributesmohka.ray("")
    let entryattributes = attributesstring.split("~x*^*x~")
    for(let we = 0; we < entryattributes.length; we++){
      let attributedata = entryattributes[we].split("~!*^*!~")
      let attributename = attributedata[0]
      let attributeamount = attributedata[1]
      let attributesholder = Crystalline.maaelle('div',0,(1/10)*Entries.entryattributetitles.length,1,1/10,SunMohka.EntryEditMohka.attributesmohka)

let attributestitle = Crystalline.maaelle('div',0,0,1/2,1,attributesholder).hint("title").ray(attributename)    
    Entries.entryattributetitles.push(attributestitle)

let attributesvalue = Crystalline.maaelle('aera',1/2,0,1/2,1,attributesholder).hint("value").ray(attributeamount)
Entries.entryattributedescriptions.push(attributesvalue)
    }
  }
















Users.createSignInBar("S")


  Entries.start()
</script></body>
</html>%%%%%%Mon, 22 Jul 2024 16:34:02 GMT:::

RosinVault, Allotopia, GrowingHome, Created recording of history.  Now to have it viewable on Site!:;:


Mon, 22 Jul 2024 17:21:46 GMT:::

RosinVault, Allotopia, GrowingHome, added Rate Limiting to prevent ddos attacks.  No jamming us with spam.:;:


Tue, 23 Jul 2024 20:41:11 GMT:::

RosinVault, Allotopia, GrowingHome, Started Footer which will house option to see Updates:;:


Sat, 27 Jul 2024 15:18:06 GMT:::

RosinVault, Allotopia, GrowingHome, Converted underlying code to my language.  Everything 30x more efficient on average.:;:


Sat, 27 Jul 2024 16:02:44 GMT:::

RosinVault, Allotopia, Made top bar and bottom bar their own objects with an 'add' ability which allows them to scale nicely for yetunknown things that should be on them.:;:


Sun, 28 Jul 2024 01:33:56 GMT:::

RosinVault, Allotopia, GrowingHome, Now with a Button to save a backup which i will probably push 1 or more times per day :):;:


Tue, 30 Jul 2024 20:47:41 GMT:::

RosinVault, Allotopia, GrowingHome, View Counter, remembering if logged in between browsing, bare store page and Showotron (frontpage display) started.:;:


Fri, 02 Aug 2024 01:44:39 GMT:::

RosinVault, Allotopia, GrowingHome, the Showotron (Front page display slider) is up and displaying settable entries:;:


Sun, 04 Aug 2024 20:28:05 GMT:::

RosinVault, Allotopia, GrowingHome, Started individual Gallery page:;:


Tue, 13 Aug 2024 16:37:30 GMT:::

RosinVault, Allotopia, GrowingHome, Cookies and Cryptography up for good User Accounts.:;:


Thu, 15 Aug 2024 18:31:18 GMT:::

RosinVault, Allotopia, GrowingHome, Time and Coin Collection now up:;:


Fri, 30 Aug 2024 15:36:36 GMT:::

RosinVault, Allotopia, GrowingHome, 3D in:;:


Tue, 03 Sep 2024 18:40:50 GMT:::

RosinVault, Gamble collect animation up:;:


Tue, 10 Sep 2024 22:17:39 GMT:::

RosinVault, Allotopia, Gamble questions functional.